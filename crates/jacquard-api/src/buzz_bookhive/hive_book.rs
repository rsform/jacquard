// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: buzz.bookhive.hiveBook
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

///A book within the hive
#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
pub struct HiveBook<'a> {
    ///The authors of the book (tab separated)
    #[serde(borrow)]
    pub authors: jacquard_common::CowStr<'a>,
    ///URL to full-size cover image
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub cover: std::option::Option<jacquard_common::CowStr<'a>>,
    pub created_at: jacquard_common::types::string::Datetime,
    ///Book description/summary
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub description: std::option::Option<jacquard_common::CowStr<'a>>,
    ///The book's hive id, used to correlate user's books with the hive
    #[serde(borrow)]
    pub id: jacquard_common::CowStr<'a>,
    ///Average rating (0-1000)
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub rating: std::option::Option<i64>,
    ///Number of ratings
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub ratings_count: std::option::Option<i64>,
    ///The source service name (e.g. Goodreads)
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub source: std::option::Option<jacquard_common::CowStr<'a>>,
    ///ID of the book in the source service
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub source_id: std::option::Option<jacquard_common::CowStr<'a>>,
    ///URL to the book on the source service
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub source_url: std::option::Option<jacquard_common::CowStr<'a>>,
    ///URL to thumbnail image
    #[serde(borrow)]
    pub thumbnail: jacquard_common::CowStr<'a>,
    ///The title of the book
    #[serde(borrow)]
    pub title: jacquard_common::CowStr<'a>,
    pub updated_at: jacquard_common::types::string::Datetime,
}

/// Typed wrapper for GetRecord response with this collection's record type.
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
pub struct HiveBookGetRecordOutput<'a> {
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub cid: std::option::Option<jacquard_common::types::string::Cid<'a>>,
    #[serde(borrow)]
    pub uri: jacquard_common::types::string::AtUri<'a>,
    #[serde(borrow)]
    pub value: HiveBook<'a>,
}

/// Marker type for deserializing records from this collection.
pub struct HiveBookRecord;
impl jacquard_common::xrpc::XrpcResp for HiveBookRecord {
    const NSID: &'static str = "buzz.bookhive.hiveBook";
    const ENCODING: &'static str = "application/json";
    type Output<'de> = HiveBookGetRecordOutput<'de>;
    type Err<'de> = jacquard_common::types::collection::RecordError<'de>;
}

impl jacquard_common::types::collection::Collection for HiveBook<'_> {
    const NSID: &'static str = "buzz.bookhive.hiveBook";
    type Record = HiveBookRecord;
}

impl From<HiveBookGetRecordOutput<'_>> for HiveBook<'_> {
    fn from(output: HiveBookGetRecordOutput<'_>) -> Self {
        use jacquard_common::IntoStatic;
        output.value.into_static()
    }
}