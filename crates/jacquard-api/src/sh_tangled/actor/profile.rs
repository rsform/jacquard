// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: sh.tangled.actor.profile
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

///A declaration of a Tangled account profile.
#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
pub struct Profile<'a> {
    ///Include link to this account on Bluesky.
    pub bluesky: bool,
    ///Free-form profile description text.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub description: std::option::Option<jacquard_common::CowStr<'a>>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub links: std::option::Option<Vec<jacquard_common::types::string::Uri<'a>>>,
    ///Free-form location text.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub location: std::option::Option<jacquard_common::CowStr<'a>>,
    ///Any ATURI, it is up to appviews to validate these fields.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub pinned_repositories: std::option::Option<
        Vec<jacquard_common::types::string::AtUri<'a>>,
    >,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub stats: std::option::Option<Vec<jacquard_common::CowStr<'a>>>,
}

impl jacquard_common::types::collection::Collection for Profile<'_> {
    const NSID: &'static str = "sh.tangled.actor.profile";
}