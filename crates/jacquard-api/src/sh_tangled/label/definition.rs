// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: sh.tangled.label.definition
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
pub struct Definition<'a> {
    ///The hex value for the background color for the label. Appviews may choose to respect this.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub color: std::option::Option<jacquard_common::CowStr<'a>>,
    pub created_at: jacquard_common::types::string::Datetime,
    ///Whether this label can be repeated for a given entity, eg.: [reviewer:foo, reviewer:bar]
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub multiple: std::option::Option<bool>,
    ///The display name of this label.
    #[serde(borrow)]
    pub name: jacquard_common::CowStr<'a>,
    ///The areas of the repo this label may apply to, eg.: sh.tangled.repo.issue. Appviews may choose to respect this.
    #[serde(borrow)]
    pub scope: Vec<jacquard_common::types::string::Nsid<'a>>,
    ///The type definition of this label. Appviews may allow sorting for certain types.
    #[serde(borrow)]
    pub value_type: crate::sh_tangled::label::definition::ValueType<'a>,
}

impl jacquard_common::types::collection::Collection for Definition<'_> {
    const NSID: &'static str = "sh.tangled.label.definition";
}

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
pub struct ValueType<'a> {
    ///Closed set of values that this label can take.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub r#enum: std::option::Option<Vec<jacquard_common::CowStr<'a>>>,
    ///An optional constraint that can be applied on string concrete types.
    #[serde(borrow)]
    pub format: jacquard_common::CowStr<'a>,
    ///The concrete type of this label's value.
    #[serde(borrow)]
    pub r#type: jacquard_common::CowStr<'a>,
}