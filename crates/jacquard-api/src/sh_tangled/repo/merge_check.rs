// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: sh.tangled.repo.mergeCheck
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
pub struct ConflictInfo<'a> {
    ///Name of the conflicted file
    #[serde(borrow)]
    pub filename: jacquard_common::CowStr<'a>,
    ///Reason for the conflict
    #[serde(borrow)]
    pub reason: jacquard_common::CowStr<'a>,
}

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    bon::Builder,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
#[builder(start_fn = new)]
pub struct MergeCheck<'a> {
    ///Target branch to merge into
    #[serde(borrow)]
    #[builder(into)]
    pub branch: jacquard_common::CowStr<'a>,
    ///DID of the repository owner
    #[serde(borrow)]
    pub did: jacquard_common::types::string::Did<'a>,
    ///Name of the repository
    #[serde(borrow)]
    #[builder(into)]
    pub name: jacquard_common::CowStr<'a>,
    ///Patch or pull request to check for merge conflicts
    #[serde(borrow)]
    #[builder(into)]
    pub patch: jacquard_common::CowStr<'a>,
    #[serde(flatten)]
    #[serde(borrow)]
    #[builder(default)]
    pub extra_data: ::std::collections::BTreeMap<
        ::jacquard_common::smol_str::SmolStr,
        ::jacquard_common::types::value::Data<'a>,
    >,
}

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
pub struct MergeCheckOutput<'a> {
    ///List of files with merge conflicts
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub conflicts: std::option::Option<Vec<jacquard_common::types::value::Data<'a>>>,
    ///Error message if check failed
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub error: std::option::Option<jacquard_common::CowStr<'a>>,
    ///Whether the merge has conflicts
    pub is_conflicted: bool,
    ///Additional message about the merge check
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub message: std::option::Option<jacquard_common::CowStr<'a>>,
}

///Response type for
///sh.tangled.repo.mergeCheck
pub struct MergeCheckResponse;
impl jacquard_common::xrpc::XrpcResp for MergeCheckResponse {
    const NSID: &'static str = "sh.tangled.repo.mergeCheck";
    const ENCODING: &'static str = "application/json";
    type Output<'de> = MergeCheckOutput<'de>;
    type Err<'de> = jacquard_common::xrpc::GenericError<'de>;
}

impl<'de> jacquard_common::xrpc::XrpcRequest<'de> for MergeCheck<'de> {
    const NSID: &'static str = "sh.tangled.repo.mergeCheck";
    const METHOD: jacquard_common::xrpc::XrpcMethod = jacquard_common::xrpc::XrpcMethod::Procedure(
        "application/json",
    );
    type Response = MergeCheckResponse;
}