// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: sh.tangled.repo.languages
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
pub struct Language<'a> {
    ///Hex color code for this language
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub color: std::option::Option<jacquard_common::CowStr<'a>>,
    ///File extensions associated with this language
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub extensions: std::option::Option<Vec<jacquard_common::CowStr<'a>>>,
    ///Number of files in this language
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub file_count: std::option::Option<i64>,
    ///Programming language name
    #[serde(borrow)]
    pub name: jacquard_common::CowStr<'a>,
    ///Percentage of total codebase (0-100)
    pub percentage: i64,
    ///Total size of files in this language (bytes)
    pub size: i64,
}

#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    bon::Builder,
    jacquard_derive::IntoStatic
)]
#[builder(start_fn = new)]
#[serde(rename_all = "camelCase")]
pub struct Languages<'a> {
    ///(default: "HEAD")
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    #[builder(into)]
    pub r#ref: std::option::Option<jacquard_common::CowStr<'a>>,
    #[serde(borrow)]
    #[builder(into)]
    pub repo: jacquard_common::CowStr<'a>,
}

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
pub struct LanguagesOutput<'a> {
    #[serde(borrow)]
    pub languages: Vec<jacquard_common::types::value::Data<'a>>,
    ///The git reference used
    #[serde(borrow)]
    pub r#ref: jacquard_common::CowStr<'a>,
    ///Total number of files analyzed
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub total_files: std::option::Option<i64>,
    ///Total size of all analyzed files in bytes
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub total_size: std::option::Option<i64>,
}

#[jacquard_derive::open_union]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    thiserror::Error,
    miette::Diagnostic
)]
#[serde(tag = "error", content = "message")]
#[serde(bound(deserialize = "'de: 'a"))]
pub enum LanguagesError<'a> {
    ///Repository not found or access denied
    #[serde(rename = "RepoNotFound")]
    RepoNotFound(std::option::Option<String>),
    ///Git reference not found
    #[serde(rename = "RefNotFound")]
    RefNotFound(std::option::Option<String>),
    ///Invalid request parameters
    #[serde(rename = "InvalidRequest")]
    InvalidRequest(std::option::Option<String>),
}

impl std::fmt::Display for LanguagesError<'_> {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Self::RepoNotFound(msg) => {
                write!(f, "RepoNotFound")?;
                if let Some(msg) = msg {
                    write!(f, ": {}", msg)?;
                }
                Ok(())
            }
            Self::RefNotFound(msg) => {
                write!(f, "RefNotFound")?;
                if let Some(msg) = msg {
                    write!(f, ": {}", msg)?;
                }
                Ok(())
            }
            Self::InvalidRequest(msg) => {
                write!(f, "InvalidRequest")?;
                if let Some(msg) = msg {
                    write!(f, ": {}", msg)?;
                }
                Ok(())
            }
            Self::Unknown(err) => write!(f, "Unknown error: {:?}", err),
        }
    }
}

impl jacquard_common::IntoStatic for LanguagesError<'_> {
    type Output = LanguagesError<'static>;
    fn into_static(self) -> Self::Output {
        match self {
            LanguagesError::RepoNotFound(v) => {
                LanguagesError::RepoNotFound(v.into_static())
            }
            LanguagesError::RefNotFound(v) => {
                LanguagesError::RefNotFound(v.into_static())
            }
            LanguagesError::InvalidRequest(v) => {
                LanguagesError::InvalidRequest(v.into_static())
            }
            LanguagesError::Unknown(v) => LanguagesError::Unknown(v.into_static()),
        }
    }
}

///Response type for
///sh.tangled.repo.languages
pub struct LanguagesResponse;
impl jacquard_common::xrpc::XrpcResp for LanguagesResponse {
    const NSID: &'static str = "sh.tangled.repo.languages";
    const ENCODING: &'static str = "application/json";
    type Output<'de> = LanguagesOutput<'de>;
    type Err<'de> = LanguagesError<'de>;
}

impl<'de> jacquard_common::xrpc::XrpcRequest<'de> for Languages<'de> {
    const NSID: &'static str = "sh.tangled.repo.languages";
    const METHOD: jacquard_common::xrpc::XrpcMethod = jacquard_common::xrpc::XrpcMethod::Query;
    type Response = LanguagesResponse;
}

///Endpoint type for
///sh.tangled.repo.languages
pub struct LanguagesRequest;
impl jacquard_common::xrpc::XrpcEndpoint for LanguagesRequest {
    const PATH: &'static str = "/xrpc/sh.tangled.repo.languages";
    const METHOD: jacquard_common::xrpc::XrpcMethod = jacquard_common::xrpc::XrpcMethod::Query;
    type Request<'de> = Languages<'de>;
    type Response = LanguagesResponse;
}