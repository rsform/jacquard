// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: sh.tangled.repo.listSecrets
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    bon::Builder,
    jacquard_derive::IntoStatic
)]
#[builder(start_fn = new)]
#[serde(rename_all = "camelCase")]
pub struct ListSecrets<'a> {
    #[serde(borrow)]
    pub repo: jacquard_common::types::string::AtUri<'a>,
}

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
pub struct ListSecretsOutput<'a> {
    #[serde(borrow)]
    pub secrets: Vec<jacquard_common::types::value::Data<'a>>,
}

/// Response type for
///sh.tangled.repo.listSecrets
pub struct ListSecretsResponse;
impl jacquard_common::xrpc::XrpcResp for ListSecretsResponse {
    const NSID: &'static str = "sh.tangled.repo.listSecrets";
    const ENCODING: &'static str = "application/json";
    type Output<'de> = ListSecretsOutput<'de>;
    type Err<'de> = jacquard_common::xrpc::GenericError<'de>;
}

impl<'a> jacquard_common::xrpc::XrpcRequest for ListSecrets<'a> {
    const NSID: &'static str = "sh.tangled.repo.listSecrets";
    const METHOD: jacquard_common::xrpc::XrpcMethod = jacquard_common::xrpc::XrpcMethod::Query;
    type Response = ListSecretsResponse;
}

/// Endpoint type for
///sh.tangled.repo.listSecrets
pub struct ListSecretsRequest;
impl jacquard_common::xrpc::XrpcEndpoint for ListSecretsRequest {
    const PATH: &'static str = "/xrpc/sh.tangled.repo.listSecrets";
    const METHOD: jacquard_common::xrpc::XrpcMethod = jacquard_common::xrpc::XrpcMethod::Query;
    type Request<'de> = ListSecrets<'de>;
    type Response = ListSecretsResponse;
}

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic,
    bon::Builder
)]
#[serde(rename_all = "camelCase")]
pub struct Secret<'a> {
    pub created_at: jacquard_common::types::string::Datetime,
    #[serde(borrow)]
    pub created_by: jacquard_common::types::string::Did<'a>,
    #[serde(borrow)]
    #[builder(into)]
    pub key: jacquard_common::CowStr<'a>,
    #[serde(borrow)]
    pub repo: jacquard_common::types::string::AtUri<'a>,
}