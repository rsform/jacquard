// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: sh.tangled.repo.pull
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

pub mod comment;
pub mod status;

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
pub struct Pull<'a> {
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub body: std::option::Option<jacquard_common::CowStr<'a>>,
    pub created_at: jacquard_common::types::string::Datetime,
    #[serde(borrow)]
    pub patch: jacquard_common::CowStr<'a>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub source: std::option::Option<crate::sh_tangled::repo::pull::Source<'a>>,
    #[serde(borrow)]
    pub target: crate::sh_tangled::repo::pull::Target<'a>,
    #[serde(borrow)]
    pub title: jacquard_common::CowStr<'a>,
}

impl jacquard_common::types::collection::Collection for Pull<'_> {
    const NSID: &'static str = "sh.tangled.repo.pull";
}

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
pub struct Source<'a> {
    #[serde(borrow)]
    pub branch: jacquard_common::CowStr<'a>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub repo: std::option::Option<jacquard_common::types::string::AtUri<'a>>,
    #[serde(borrow)]
    pub sha: jacquard_common::CowStr<'a>,
}

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
pub struct Target<'a> {
    #[serde(borrow)]
    pub branch: jacquard_common::CowStr<'a>,
    #[serde(borrow)]
    pub repo: jacquard_common::types::string::AtUri<'a>,
}