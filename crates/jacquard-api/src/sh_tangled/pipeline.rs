// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: sh.tangled.pipeline
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

pub mod status;

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
pub struct CloneOpts<'a> {
    pub depth: i64,
    pub skip: bool,
    pub submodules: bool,
}

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
pub struct Pipeline<'a> {
    #[serde(borrow)]
    pub trigger_metadata: crate::sh_tangled::pipeline::TriggerMetadata<'a>,
    #[serde(borrow)]
    pub workflows: Vec<crate::sh_tangled::pipeline::Workflow<'a>>,
}

/// Typed wrapper for GetRecord response with this collection's record type.
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
pub struct PipelineGetRecordOutput<'a> {
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub cid: std::option::Option<jacquard_common::types::string::Cid<'a>>,
    #[serde(borrow)]
    pub uri: jacquard_common::types::string::AtUri<'a>,
    #[serde(borrow)]
    pub value: Pipeline<'a>,
}

/// Marker type for deserializing records from this collection.
pub struct PipelineRecord;
impl jacquard_common::xrpc::XrpcResp for PipelineRecord {
    const NSID: &'static str = "sh.tangled.pipeline";
    const ENCODING: &'static str = "application/json";
    type Output<'de> = PipelineGetRecordOutput<'de>;
    type Err<'de> = jacquard_common::types::collection::RecordError<'de>;
}

impl jacquard_common::types::collection::Collection for Pipeline<'_> {
    const NSID: &'static str = "sh.tangled.pipeline";
    type Record = PipelineRecord;
}

impl From<PipelineGetRecordOutput<'_>> for Pipeline<'static> {
    fn from(output: PipelineGetRecordOutput<'_>) -> Self {
        use jacquard_common::IntoStatic;
        output.value.into_static()
    }
}

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
pub struct ManualTriggerData<'a> {
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub inputs: std::option::Option<Vec<crate::sh_tangled::pipeline::Pair<'a>>>,
}

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
pub struct Pair<'a> {
    #[serde(borrow)]
    pub key: jacquard_common::CowStr<'a>,
    #[serde(borrow)]
    pub value: jacquard_common::CowStr<'a>,
}

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
pub struct PullRequestTriggerData<'a> {
    #[serde(borrow)]
    pub action: jacquard_common::CowStr<'a>,
    #[serde(borrow)]
    pub source_branch: jacquard_common::CowStr<'a>,
    #[serde(borrow)]
    pub source_sha: jacquard_common::CowStr<'a>,
    #[serde(borrow)]
    pub target_branch: jacquard_common::CowStr<'a>,
}

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
pub struct PushTriggerData<'a> {
    #[serde(borrow)]
    pub new_sha: jacquard_common::CowStr<'a>,
    #[serde(borrow)]
    pub old_sha: jacquard_common::CowStr<'a>,
    #[serde(borrow)]
    pub r#ref: jacquard_common::CowStr<'a>,
}

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
pub struct TriggerMetadata<'a> {
    #[serde(borrow)]
    pub kind: jacquard_common::CowStr<'a>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub manual: std::option::Option<crate::sh_tangled::pipeline::ManualTriggerData<'a>>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub pull_request: std::option::Option<
        crate::sh_tangled::pipeline::PullRequestTriggerData<'a>,
    >,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub push: std::option::Option<crate::sh_tangled::pipeline::PushTriggerData<'a>>,
    #[serde(borrow)]
    pub repo: crate::sh_tangled::pipeline::TriggerRepo<'a>,
}

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
pub struct TriggerRepo<'a> {
    #[serde(borrow)]
    pub default_branch: jacquard_common::CowStr<'a>,
    #[serde(borrow)]
    pub did: jacquard_common::types::string::Did<'a>,
    #[serde(borrow)]
    pub knot: jacquard_common::CowStr<'a>,
    #[serde(borrow)]
    pub repo: jacquard_common::CowStr<'a>,
}

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
pub struct Workflow<'a> {
    #[serde(borrow)]
    pub clone: crate::sh_tangled::pipeline::CloneOpts<'a>,
    #[serde(borrow)]
    pub engine: jacquard_common::CowStr<'a>,
    #[serde(borrow)]
    pub name: jacquard_common::CowStr<'a>,
    #[serde(borrow)]
    pub raw: jacquard_common::CowStr<'a>,
}