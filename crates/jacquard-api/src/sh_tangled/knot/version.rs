// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: sh.tangled.knot.version
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
pub struct VersionOutput<'a> {
    #[serde(borrow)]
    pub version: jacquard_common::CowStr<'a>,
}

#[jacquard_derive::open_union]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    thiserror::Error,
    miette::Diagnostic,
    jacquard_derive::IntoStatic
)]
#[serde(tag = "error", content = "message")]
#[serde(bound(deserialize = "'de: 'a"))]
pub enum VersionError<'a> {}
impl std::fmt::Display for VersionError<'_> {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Self::Unknown(err) => write!(f, "Unknown error: {:?}", err),
        }
    }
}

/// XRPC request marker type
#[derive(
    Debug,
    Clone,
    Copy,
    PartialEq,
    Eq,
    serde::Serialize,
    serde::Deserialize,
    jacquard_derive::IntoStatic
)]
pub struct Version;
///Response type for
///sh.tangled.knot.version
pub struct VersionResponse;
impl jacquard_common::xrpc::XrpcResp for VersionResponse {
    const NSID: &'static str = "sh.tangled.knot.version";
    const ENCODING: &'static str = "application/json";
    type Output<'de> = VersionOutput<'de>;
    type Err<'de> = VersionError<'de>;
}

impl jacquard_common::xrpc::XrpcRequest for Version {
    const NSID: &'static str = "sh.tangled.knot.version";
    const METHOD: jacquard_common::xrpc::XrpcMethod = jacquard_common::xrpc::XrpcMethod::Query;
    type Response = VersionResponse;
}

///Endpoint type for
///sh.tangled.knot.version
pub struct VersionRequest;
impl jacquard_common::xrpc::XrpcEndpoint for VersionRequest {
    const PATH: &'static str = "/xrpc/sh.tangled.knot.version";
    const METHOD: jacquard_common::xrpc::XrpcMethod = jacquard_common::xrpc::XrpcMethod::Query;
    type Request<'de> = Version;
    type Response = VersionResponse;
}