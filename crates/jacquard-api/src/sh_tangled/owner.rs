// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: sh.tangled.owner
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
pub struct OwnerOutput<'a> {
    #[serde(borrow)]
    pub owner: jacquard_common::types::string::Did<'a>,
}

#[jacquard_derive::open_union]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    thiserror::Error,
    miette::Diagnostic
)]
#[serde(tag = "error", content = "message")]
#[serde(bound(deserialize = "'de: 'a"))]
pub enum OwnerError<'a> {
    ///Owner is not set for this service
    #[serde(rename = "OwnerNotFound")]
    OwnerNotFound(std::option::Option<String>),
}

impl std::fmt::Display for OwnerError<'_> {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Self::OwnerNotFound(msg) => {
                write!(f, "OwnerNotFound")?;
                if let Some(msg) = msg {
                    write!(f, ": {}", msg)?;
                }
                Ok(())
            }
            Self::Unknown(err) => write!(f, "Unknown error: {:?}", err),
        }
    }
}

impl jacquard_common::IntoStatic for OwnerError<'_> {
    type Output = OwnerError<'static>;
    fn into_static(self) -> Self::Output {
        match self {
            OwnerError::OwnerNotFound(v) => OwnerError::OwnerNotFound(v.into_static()),
            OwnerError::Unknown(v) => OwnerError::Unknown(v.into_static()),
        }
    }
}

/// XRPC request marker type
#[derive(
    Debug,
    Clone,
    Copy,
    PartialEq,
    Eq,
    serde::Serialize,
    serde::Deserialize,
    jacquard_derive::IntoStatic
)]
pub struct Owner;
///Response type for
///sh.tangled.owner
pub struct OwnerResponse;
impl jacquard_common::xrpc::XrpcResp for OwnerResponse {
    const NSID: &'static str = "sh.tangled.owner";
    const ENCODING: &'static str = "application/json";
    type Output<'de> = OwnerOutput<'de>;
    type Err<'de> = OwnerError<'de>;
}

impl<'de> jacquard_common::xrpc::XrpcRequest<'de> for Owner {
    const NSID: &'static str = "sh.tangled.owner";
    const METHOD: jacquard_common::xrpc::XrpcMethod = jacquard_common::xrpc::XrpcMethod::Query;
    type Response = OwnerResponse;
}

///Endpoint type for
///sh.tangled.owner
pub struct OwnerRequest;
impl jacquard_common::xrpc::XrpcEndpoint for OwnerRequest {
    const PATH: &'static str = "/xrpc/sh.tangled.owner";
    const METHOD: jacquard_common::xrpc::XrpcMethod = jacquard_common::xrpc::XrpcMethod::Query;
    type Request<'de> = Owner;
    type Response = OwnerResponse;
}