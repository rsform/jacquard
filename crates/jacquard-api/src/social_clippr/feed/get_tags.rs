// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: social.clippr.feed.getTags
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    bon::Builder,
    jacquard_derive::IntoStatic
)]
#[builder(start_fn = new)]
#[serde(rename_all = "camelCase")]
pub struct GetTags<'a> {
    #[serde(borrow)]
    pub uris: Vec<jacquard_common::types::string::AtUri<'a>>,
}

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
pub struct GetTagsOutput<'a> {
    /// An array of hydrated tag views
    #[serde(borrow)]
    pub tags: Vec<crate::social_clippr::feed::TagView<'a>>,
}

///Response type for
///social.clippr.feed.getTags
pub struct GetTagsResponse;
impl jacquard_common::xrpc::XrpcResp for GetTagsResponse {
    const NSID: &'static str = "social.clippr.feed.getTags";
    const ENCODING: &'static str = "application/json";
    type Output<'de> = GetTagsOutput<'de>;
    type Err<'de> = jacquard_common::xrpc::GenericError<'de>;
}

impl<'a> jacquard_common::xrpc::XrpcRequest for GetTags<'a> {
    const NSID: &'static str = "social.clippr.feed.getTags";
    const METHOD: jacquard_common::xrpc::XrpcMethod = jacquard_common::xrpc::XrpcMethod::Query;
    type Response = GetTagsResponse;
}

///Endpoint type for
///social.clippr.feed.getTags
pub struct GetTagsRequest;
impl jacquard_common::xrpc::XrpcEndpoint for GetTagsRequest {
    const PATH: &'static str = "/xrpc/social.clippr.feed.getTags";
    const METHOD: jacquard_common::xrpc::XrpcMethod = jacquard_common::xrpc::XrpcMethod::Query;
    type Request<'de> = GetTags<'de>;
    type Response = GetTagsResponse;
}