// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: social.clippr.feed.clip
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

/// Record containing a bookmarked item, or 'clip'.
#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic,
    bon::Builder
)]
#[serde(rename_all = "camelCase")]
pub struct Clip<'a> {
    /// Client-declared timestamp when the bookmark is created
    pub created_at: jacquard_common::types::string::Datetime,
    /// A description of the bookmark's content. This should be ripped from the URL metadata and be static for all records using the URL.
    #[serde(borrow)]
    #[builder(into)]
    pub description: jacquard_common::CowStr<'a>,
    /// Indicates human language of the given URL
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    pub languages: Option<Vec<jacquard_common::types::string::Language>>,
    /// User-written notes for the bookmark. Public and personal.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub notes: Option<jacquard_common::CowStr<'a>>,
    /// An array of tags. A format of solely alphanumeric characters and dashes should be used.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub tags: Option<Vec<crate::com_atproto::repo::strong_ref::StrongRef<'a>>>,
    /// The title of the bookmark. If left empty, reuse the URL.
    #[serde(borrow)]
    #[builder(into)]
    pub title: jacquard_common::CowStr<'a>,
    /// Whether the bookmark can be used for feed indexing and aggregation
    pub unlisted: bool,
    /// Whether the bookmark has been read by the user
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    pub unread: Option<bool>,
    /// The URL of the bookmark. Cannot be left empty or be modified after creation.
    #[serde(borrow)]
    pub url: jacquard_common::types::string::Uri<'a>,
}

/// Typed wrapper for GetRecord response with this collection's record type.
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
pub struct ClipGetRecordOutput<'a> {
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub cid: std::option::Option<jacquard_common::types::string::Cid<'a>>,
    #[serde(borrow)]
    pub uri: jacquard_common::types::string::AtUri<'a>,
    #[serde(borrow)]
    pub value: Clip<'a>,
}

/// Marker type for deserializing records from this collection.
pub struct ClipRecord;
impl jacquard_common::xrpc::XrpcResp for ClipRecord {
    const NSID: &'static str = "social.clippr.feed.clip";
    const ENCODING: &'static str = "application/json";
    type Output<'de> = ClipGetRecordOutput<'de>;
    type Err<'de> = jacquard_common::types::collection::RecordError<'de>;
}

impl jacquard_common::types::collection::Collection for Clip<'_> {
    const NSID: &'static str = "social.clippr.feed.clip";
    type Record = ClipRecord;
}

impl From<ClipGetRecordOutput<'_>> for Clip<'_> {
    fn from(output: ClipGetRecordOutput<'_>) -> Self {
        use jacquard_common::IntoStatic;
        output.value.into_static()
    }
}