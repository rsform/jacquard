// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: network.slices.slice.defs
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

pub mod clear_slice_records;
pub mod create_o_auth_client;
pub mod delete_o_auth_client;
pub mod get_actors;
pub mod get_jetstream_logs;
pub mod get_jetstream_status;
pub mod get_job_logs;
pub mod get_job_status;
pub mod get_o_auth_clients;
pub mod get_slice_records;
pub mod get_sparklines;
pub mod get_sync_summary;
pub mod start_sync;
pub mod stats;
pub mod sync_user_collections;
pub mod update_o_auth_client;

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
pub struct Slice<'a> {
    ///When the slice was created
    pub created_at: jacquard_common::types::string::Datetime,
    ///Primary domain namespace for this slice (e.g. social.grain)
    #[serde(borrow)]
    pub domain: jacquard_common::CowStr<'a>,
    ///Name of the slice
    #[serde(borrow)]
    pub name: jacquard_common::CowStr<'a>,
}

impl jacquard_common::types::collection::Collection for Slice<'_> {
    const NSID: &'static str = "network.slices.slice";
}

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
pub struct SliceView<'a> {
    #[serde(borrow)]
    pub cid: jacquard_common::types::string::Cid<'a>,
    pub created_at: jacquard_common::types::string::Datetime,
    ///Profile of the slice creator
    #[serde(borrow)]
    pub creator: crate::network_slices::actor::ProfileViewBasic<'a>,
    ///Primary domain namespace for this slice (e.g. social.grain)
    #[serde(borrow)]
    pub domain: jacquard_common::CowStr<'a>,
    ///Total number of unique indexed actors in this slice
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub indexed_actor_count: std::option::Option<i64>,
    ///Number of collections with indexed records
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub indexed_collection_count: std::option::Option<i64>,
    ///Total number of indexed records in this slice
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub indexed_record_count: std::option::Option<i64>,
    ///Display name of the slice
    #[serde(borrow)]
    pub name: jacquard_common::CowStr<'a>,
    ///Recent activity sparkline data points for the last 24 hours
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub sparkline: std::option::Option<
        Vec<crate::network_slices::slice::SparklinePoint<'a>>,
    >,
    #[serde(borrow)]
    pub uri: jacquard_common::types::string::AtUri<'a>,
    ///Total number of waitlist invites for this slice
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub waitlist_invite_count: std::option::Option<i64>,
    ///Total number of waitlist requests for this slice
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub waitlist_request_count: std::option::Option<i64>,
}

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
pub struct SparklinePoint<'a> {
    pub count: i64,
    pub timestamp: jacquard_common::types::string::Datetime,
}