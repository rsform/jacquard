// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: network.slices.lexicon
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
pub struct Lexicon<'a> {
    ///When the lexicon was created
    pub created_at: jacquard_common::types::string::Datetime,
    ///The lexicon schema definitions as JSON
    #[serde(borrow)]
    pub definitions: jacquard_common::CowStr<'a>,
    ///Human-readable description of the lexicon
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub description: std::option::Option<jacquard_common::CowStr<'a>>,
    ///Whether this lexicon should be excluded from sync operations
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub excluded_from_sync: std::option::Option<bool>,
    ///Namespaced identifier for the lexicon
    #[serde(borrow)]
    pub nsid: jacquard_common::CowStr<'a>,
    ///AT-URI reference to the slice this lexicon belongs to
    #[serde(borrow)]
    pub slice: jacquard_common::types::string::AtUri<'a>,
    ///When the lexicon was last updated
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub updated_at: std::option::Option<jacquard_common::types::string::Datetime>,
}

impl jacquard_common::types::collection::Collection for Lexicon<'_> {
    const NSID: &'static str = "network.slices.lexicon";
}