// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: network.slices.slice.getJetstreamStatus
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    bon::Builder,
    jacquard_derive::IntoStatic
)]
#[builder(start_fn = new)]
#[serde(rename_all = "camelCase")]
pub struct GetJetstreamStatus {}
#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
pub struct GetJetstreamStatusOutput<'a> {
    /// Whether Jetstream is currently connected and receiving events
    pub connected: bool,
}

///Response type for
///network.slices.slice.getJetstreamStatus
pub struct GetJetstreamStatusResponse;
impl jacquard_common::xrpc::XrpcResp for GetJetstreamStatusResponse {
    const NSID: &'static str = "network.slices.slice.getJetstreamStatus";
    const ENCODING: &'static str = "application/json";
    type Output<'de> = GetJetstreamStatusOutput<'de>;
    type Err<'de> = jacquard_common::xrpc::GenericError<'de>;
}

impl jacquard_common::xrpc::XrpcRequest for GetJetstreamStatus {
    const NSID: &'static str = "network.slices.slice.getJetstreamStatus";
    const METHOD: jacquard_common::xrpc::XrpcMethod = jacquard_common::xrpc::XrpcMethod::Query;
    type Response = GetJetstreamStatusResponse;
}

///Endpoint type for
///network.slices.slice.getJetstreamStatus
pub struct GetJetstreamStatusRequest;
impl jacquard_common::xrpc::XrpcEndpoint for GetJetstreamStatusRequest {
    const PATH: &'static str = "/xrpc/network.slices.slice.getJetstreamStatus";
    const METHOD: jacquard_common::xrpc::XrpcMethod = jacquard_common::xrpc::XrpcMethod::Query;
    type Request<'de> = GetJetstreamStatus;
    type Response = GetJetstreamStatusResponse;
}