// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: network.slices.slice.getSparklines
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    bon::Builder,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
#[builder(start_fn = new)]
pub struct GetSparklines<'a> {
    ///Time range to fetch data for
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    #[builder(into)]
    pub duration: std::option::Option<jacquard_common::CowStr<'a>>,
    ///Time interval for data points
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    #[builder(into)]
    pub interval: std::option::Option<jacquard_common::CowStr<'a>>,
    ///Array of slice AT-URIs to get sparkline data for
    #[serde(borrow)]
    pub slices: Vec<jacquard_common::CowStr<'a>>,
    #[serde(flatten)]
    #[serde(borrow)]
    #[builder(default)]
    pub extra_data: ::std::collections::BTreeMap<
        ::jacquard_common::smol_str::SmolStr,
        ::jacquard_common::types::value::Data<'a>,
    >,
}

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
pub struct GetSparklinesOutput<'a> {
    ///Array of slice sparkline data entries
    #[serde(borrow)]
    pub sparklines: Vec<jacquard_common::types::value::Data<'a>>,
}

///Response type for
///network.slices.slice.getSparklines
pub struct GetSparklinesResponse;
impl jacquard_common::xrpc::XrpcResp for GetSparklinesResponse {
    const NSID: &'static str = "network.slices.slice.getSparklines";
    const ENCODING: &'static str = "application/json";
    type Output<'de> = GetSparklinesOutput<'de>;
    type Err<'de> = jacquard_common::xrpc::GenericError<'de>;
}

impl<'a> jacquard_common::xrpc::XrpcRequest for GetSparklines<'a> {
    const NSID: &'static str = "network.slices.slice.getSparklines";
    const METHOD: jacquard_common::xrpc::XrpcMethod = jacquard_common::xrpc::XrpcMethod::Procedure(
        "application/json",
    );
    type Response = GetSparklinesResponse;
}

///Endpoint type for
///network.slices.slice.getSparklines
pub struct GetSparklinesRequest;
impl jacquard_common::xrpc::XrpcEndpoint for GetSparklinesRequest {
    const PATH: &'static str = "/xrpc/network.slices.slice.getSparklines";
    const METHOD: jacquard_common::xrpc::XrpcMethod = jacquard_common::xrpc::XrpcMethod::Procedure(
        "application/json",
    );
    type Request<'de> = GetSparklines<'de>;
    type Response = GetSparklinesResponse;
}

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
pub struct SparklineEntry<'a> {
    ///Array of sparkline data points
    #[serde(borrow)]
    pub points: Vec<crate::network_slices::slice::SparklinePoint<'a>>,
    ///AT-URI of the slice
    #[serde(borrow)]
    pub slice_uri: jacquard_common::CowStr<'a>,
}