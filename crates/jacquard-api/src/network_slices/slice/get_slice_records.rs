// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: network.slices.slice.getSliceRecords
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic,
    bon::Builder
)]
#[serde(rename_all = "camelCase")]
pub struct IndexedRecord<'a> {
    /// Content identifier of the record
    #[serde(borrow)]
    pub cid: jacquard_common::types::string::Cid<'a>,
    /// NSID of the collection this record belongs to
    #[serde(borrow)]
    pub collection: jacquard_common::types::string::Nsid<'a>,
    /// DID of the record creator
    #[serde(borrow)]
    pub did: jacquard_common::types::string::Did<'a>,
    /// When this record was indexed
    pub indexed_at: jacquard_common::types::string::Datetime,
    /// AT-URI of the record
    #[serde(borrow)]
    pub uri: jacquard_common::types::string::AtUri<'a>,
    /// The record value/content
    #[serde(borrow)]
    pub value: jacquard_common::types::value::Data<'a>,
}

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    bon::Builder,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
#[builder(start_fn = new)]
pub struct GetSliceRecords<'a> {
    /// Pagination cursor from previous response
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub cursor: Option<jacquard_common::CowStr<'a>>,
    /// Maximum number of records to return
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    pub limit: Option<i64>,
    /// AT-URI of the slice to query
    #[serde(borrow)]
    #[builder(into)]
    pub slice: jacquard_common::CowStr<'a>,
    /// Sorting configuration for result ordering
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub sort_by: Option<jacquard_common::types::value::Data<'a>>,
    /// Flexible filtering conditions for querying records
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub r#where: Option<jacquard_common::types::value::Data<'a>>,
    #[serde(flatten)]
    #[serde(borrow)]
    #[builder(default)]
    pub extra_data: ::std::collections::BTreeMap<
        ::jacquard_common::smol_str::SmolStr,
        ::jacquard_common::types::value::Data<'a>,
    >,
}

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
pub struct GetSliceRecordsOutput<'a> {
    /// Pagination cursor for next page
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub cursor: std::option::Option<jacquard_common::CowStr<'a>>,
    #[serde(borrow)]
    pub records: Vec<jacquard_common::types::value::Data<'a>>,
}

///Response type for
///network.slices.slice.getSliceRecords
pub struct GetSliceRecordsResponse;
impl jacquard_common::xrpc::XrpcResp for GetSliceRecordsResponse {
    const NSID: &'static str = "network.slices.slice.getSliceRecords";
    const ENCODING: &'static str = "application/json";
    type Output<'de> = GetSliceRecordsOutput<'de>;
    type Err<'de> = jacquard_common::xrpc::GenericError<'de>;
}

impl<'a> jacquard_common::xrpc::XrpcRequest for GetSliceRecords<'a> {
    const NSID: &'static str = "network.slices.slice.getSliceRecords";
    const METHOD: jacquard_common::xrpc::XrpcMethod = jacquard_common::xrpc::XrpcMethod::Procedure(
        "application/json",
    );
    type Response = GetSliceRecordsResponse;
}

///Endpoint type for
///network.slices.slice.getSliceRecords
pub struct GetSliceRecordsRequest;
impl jacquard_common::xrpc::XrpcEndpoint for GetSliceRecordsRequest {
    const PATH: &'static str = "/xrpc/network.slices.slice.getSliceRecords";
    const METHOD: jacquard_common::xrpc::XrpcMethod = jacquard_common::xrpc::XrpcMethod::Procedure(
        "application/json",
    );
    type Request<'de> = GetSliceRecords<'de>;
    type Response = GetSliceRecordsResponse;
}