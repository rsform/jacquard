// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: network.slices.slice.getJobStatus
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
pub struct JobStatus<'a> {
    ///When the job completed
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub completed_at: std::option::Option<jacquard_common::types::string::Datetime>,
    ///When the job was created
    pub created_at: jacquard_common::types::string::Datetime,
    ///Error message if job failed
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub error: std::option::Option<jacquard_common::CowStr<'a>>,
    ///UUID of the job
    #[serde(borrow)]
    pub job_id: jacquard_common::CowStr<'a>,
    ///Job result if completed successfully
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub result: std::option::Option<
        crate::network_slices::slice::get_job_status::SyncJobResult<'a>,
    >,
    ///Number of times the job has been retried
    pub retry_count: i64,
    ///When the job started executing
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub started_at: std::option::Option<jacquard_common::types::string::Datetime>,
    ///Current status of the job
    #[serde(borrow)]
    pub status: jacquard_common::CowStr<'a>,
}

#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    bon::Builder,
    jacquard_derive::IntoStatic
)]
#[builder(start_fn = new)]
#[serde(rename_all = "camelCase")]
pub struct GetJobStatus<'a> {
    #[serde(borrow)]
    #[builder(into)]
    pub job_id: jacquard_common::CowStr<'a>,
}

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
pub struct GetJobStatusOutput<'a> {
    #[serde(flatten)]
    #[serde(borrow)]
    pub value: jacquard_common::types::value::Data<'a>,
}

///Response type for
///network.slices.slice.getJobStatus
pub struct GetJobStatusResponse;
impl jacquard_common::xrpc::XrpcResp for GetJobStatusResponse {
    const NSID: &'static str = "network.slices.slice.getJobStatus";
    const ENCODING: &'static str = "application/json";
    type Output<'de> = GetJobStatusOutput<'de>;
    type Err<'de> = jacquard_common::xrpc::GenericError<'de>;
}

impl<'de> jacquard_common::xrpc::XrpcRequest<'de> for GetJobStatus<'de> {
    const NSID: &'static str = "network.slices.slice.getJobStatus";
    const METHOD: jacquard_common::xrpc::XrpcMethod = jacquard_common::xrpc::XrpcMethod::Query;
    type Response = GetJobStatusResponse;
}

///Endpoint type for
///network.slices.slice.getJobStatus
pub struct GetJobStatusRequest;
impl jacquard_common::xrpc::XrpcEndpoint for GetJobStatusRequest {
    const PATH: &'static str = "/xrpc/network.slices.slice.getJobStatus";
    const METHOD: jacquard_common::xrpc::XrpcMethod = jacquard_common::xrpc::XrpcMethod::Query;
    type Request<'de> = GetJobStatus<'de>;
    type Response = GetJobStatusResponse;
}

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
pub struct SyncJobResult<'a> {
    ///List of collection NSIDs that were synced
    #[serde(borrow)]
    pub collections_synced: Vec<jacquard_common::types::string::Nsid<'a>>,
    ///Human-readable message about the job completion
    #[serde(borrow)]
    pub message: jacquard_common::CowStr<'a>,
    ///Number of repositories processed
    pub repos_processed: i64,
    ///Whether the sync job completed successfully
    pub success: bool,
    ///Total number of records synced
    pub total_records: i64,
}