// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: network.slices.slice.getOAuthClients
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    bon::Builder,
    jacquard_derive::IntoStatic
)]
#[builder(start_fn = new)]
#[serde(rename_all = "camelCase")]
pub struct GetOAuthClients<'a> {
    #[serde(borrow)]
    #[builder(into)]
    pub slice: jacquard_common::CowStr<'a>,
}

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
pub struct GetOAuthClientsOutput<'a> {
    #[serde(borrow)]
    pub clients: Vec<jacquard_common::types::value::Data<'a>>,
}

/// Response type for
///network.slices.slice.getOAuthClients
pub struct GetOAuthClientsResponse;
impl jacquard_common::xrpc::XrpcResp for GetOAuthClientsResponse {
    const NSID: &'static str = "network.slices.slice.getOAuthClients";
    const ENCODING: &'static str = "application/json";
    type Output<'de> = GetOAuthClientsOutput<'de>;
    type Err<'de> = jacquard_common::xrpc::GenericError<'de>;
}

impl<'a> jacquard_common::xrpc::XrpcRequest for GetOAuthClients<'a> {
    const NSID: &'static str = "network.slices.slice.getOAuthClients";
    const METHOD: jacquard_common::xrpc::XrpcMethod = jacquard_common::xrpc::XrpcMethod::Query;
    type Response = GetOAuthClientsResponse;
}

/// Endpoint type for
///network.slices.slice.getOAuthClients
pub struct GetOAuthClientsRequest;
impl jacquard_common::xrpc::XrpcEndpoint for GetOAuthClientsRequest {
    const PATH: &'static str = "/xrpc/network.slices.slice.getOAuthClients";
    const METHOD: jacquard_common::xrpc::XrpcMethod = jacquard_common::xrpc::XrpcMethod::Query;
    type Request<'de> = GetOAuthClients<'de>;
    type Response = GetOAuthClientsResponse;
}

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic,
    bon::Builder
)]
#[serde(rename_all = "camelCase")]
pub struct OauthClientDetails<'a> {
    /// OAuth client ID
    #[serde(borrow)]
    #[builder(into)]
    pub client_id: jacquard_common::CowStr<'a>,
    /// Human-readable name of the OAuth client
    #[serde(borrow)]
    #[builder(into)]
    pub client_name: jacquard_common::CowStr<'a>,
    /// OAuth client secret (only returned on creation)
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub client_secret: Option<jacquard_common::CowStr<'a>>,
    /// URI of the client application
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub client_uri: Option<jacquard_common::types::string::Uri<'a>>,
    /// When the OAuth client was created
    pub created_at: jacquard_common::types::string::Datetime,
    /// DID of the user who created this client
    #[serde(borrow)]
    pub created_by_did: jacquard_common::types::string::Did<'a>,
    /// Allowed OAuth grant types
    #[serde(borrow)]
    pub grant_types: Vec<jacquard_common::CowStr<'a>>,
    /// URI of the client logo
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub logo_uri: Option<jacquard_common::types::string::Uri<'a>>,
    /// URI of the privacy policy
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub policy_uri: Option<jacquard_common::types::string::Uri<'a>>,
    /// Allowed redirect URIs for OAuth flow
    #[serde(borrow)]
    pub redirect_uris: Vec<jacquard_common::types::string::Uri<'a>>,
    /// Allowed OAuth response types
    #[serde(borrow)]
    pub response_types: Vec<jacquard_common::CowStr<'a>>,
    /// OAuth scope
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub scope: Option<jacquard_common::CowStr<'a>>,
    /// URI of the terms of service
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub tos_uri: Option<jacquard_common::types::string::Uri<'a>>,
}