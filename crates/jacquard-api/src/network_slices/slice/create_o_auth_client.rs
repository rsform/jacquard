// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: network.slices.slice.createOAuthClient
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    bon::Builder,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
#[builder(start_fn = new)]
pub struct CreateOAuthClient<'a> {
    ///Human-readable name of the OAuth client
    #[serde(borrow)]
    #[builder(into)]
    pub client_name: jacquard_common::CowStr<'a>,
    ///URI of the client application
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub client_uri: std::option::Option<jacquard_common::types::string::Uri<'a>>,
    ///OAuth grant types
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub grant_types: std::option::Option<Vec<jacquard_common::CowStr<'a>>>,
    ///URI of the client logo
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub logo_uri: std::option::Option<jacquard_common::types::string::Uri<'a>>,
    ///URI of the privacy policy
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub policy_uri: std::option::Option<jacquard_common::types::string::Uri<'a>>,
    ///Allowed redirect URIs for OAuth flow (must use HTTP or HTTPS)
    #[serde(borrow)]
    pub redirect_uris: Vec<jacquard_common::types::string::Uri<'a>>,
    ///OAuth response types
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub response_types: std::option::Option<Vec<jacquard_common::CowStr<'a>>>,
    ///OAuth scope
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    #[builder(into)]
    pub scope: std::option::Option<jacquard_common::CowStr<'a>>,
    ///AT-URI of the slice to register the OAuth client for
    #[serde(borrow)]
    #[builder(into)]
    pub slice_uri: jacquard_common::CowStr<'a>,
    ///URI of the terms of service
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub tos_uri: std::option::Option<jacquard_common::types::string::Uri<'a>>,
    #[serde(flatten)]
    #[serde(borrow)]
    #[builder(default)]
    pub extra_data: ::std::collections::BTreeMap<
        ::jacquard_common::smol_str::SmolStr,
        ::jacquard_common::types::value::Data<'a>,
    >,
}

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
pub struct CreateOAuthClientOutput<'a> {
    #[serde(flatten)]
    #[serde(borrow)]
    pub value: crate::network_slices::slice::get_o_auth_clients::OauthClientDetails<'a>,
}

///Response type for
///network.slices.slice.createOAuthClient
pub struct CreateOAuthClientResponse;
impl jacquard_common::xrpc::XrpcResp for CreateOAuthClientResponse {
    const NSID: &'static str = "network.slices.slice.createOAuthClient";
    const ENCODING: &'static str = "application/json";
    type Output<'de> = CreateOAuthClientOutput<'de>;
    type Err<'de> = jacquard_common::xrpc::GenericError<'de>;
}

impl<'de> jacquard_common::xrpc::XrpcRequest<'de> for CreateOAuthClient<'de> {
    const NSID: &'static str = "network.slices.slice.createOAuthClient";
    const METHOD: jacquard_common::xrpc::XrpcMethod = jacquard_common::xrpc::XrpcMethod::Procedure(
        "application/json",
    );
    type Response = CreateOAuthClientResponse;
}