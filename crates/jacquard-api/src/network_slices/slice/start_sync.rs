// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: network.slices.slice.startSync
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    bon::Builder,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
#[builder(start_fn = new)]
pub struct StartSync<'a> {
    ///List of collection NSIDs to sync (primary collections matching slice domain)
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub collections: std::option::Option<Vec<jacquard_common::types::string::Nsid<'a>>>,
    ///List of external collection NSIDs to sync (collections outside slice domain)
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub external_collections: std::option::Option<
        Vec<jacquard_common::types::string::Nsid<'a>>,
    >,
    ///Maximum number of records to sync per repository
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub limit_per_repo: std::option::Option<i64>,
    ///List of specific repository DIDs to sync from
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub repos: std::option::Option<Vec<jacquard_common::types::string::Did<'a>>>,
    ///Skip lexicon validation during sync
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub skip_validation: std::option::Option<bool>,
    ///AT-URI of the slice to sync data into
    #[serde(borrow)]
    #[builder(into)]
    pub slice: jacquard_common::CowStr<'a>,
    #[serde(flatten)]
    #[serde(borrow)]
    #[builder(default)]
    pub extra_data: ::std::collections::BTreeMap<
        ::jacquard_common::smol_str::SmolStr,
        ::jacquard_common::types::value::Data<'a>,
    >,
}

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
pub struct StartSyncOutput<'a> {
    ///UUID of the enqueued sync job
    #[serde(borrow)]
    pub job_id: jacquard_common::CowStr<'a>,
    ///Success message confirming job enqueue
    #[serde(borrow)]
    pub message: jacquard_common::CowStr<'a>,
}

///Response type for
///network.slices.slice.startSync
pub struct StartSyncResponse;
impl jacquard_common::xrpc::XrpcResp for StartSyncResponse {
    const NSID: &'static str = "network.slices.slice.startSync";
    const ENCODING: &'static str = "application/json";
    type Output<'de> = StartSyncOutput<'de>;
    type Err<'de> = jacquard_common::xrpc::GenericError<'de>;
}

impl<'de> jacquard_common::xrpc::XrpcRequest<'de> for StartSync<'de> {
    const NSID: &'static str = "network.slices.slice.startSync";
    const METHOD: jacquard_common::xrpc::XrpcMethod = jacquard_common::xrpc::XrpcMethod::Procedure(
        "application/json",
    );
    type Response = StartSyncResponse;
}

///Endpoint type for
///network.slices.slice.startSync
pub struct StartSyncRequest;
impl jacquard_common::xrpc::XrpcEndpoint for StartSyncRequest {
    const PATH: &'static str = "/xrpc/network.slices.slice.startSync";
    const METHOD: jacquard_common::xrpc::XrpcMethod = jacquard_common::xrpc::XrpcMethod::Procedure(
        "application/json",
    );
    type Request<'de> = StartSync<'de>;
    type Response = StartSyncResponse;
}