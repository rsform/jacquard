// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: network.slices.slice.updateOAuthClient
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic,
    Default
)]
#[serde(rename_all = "camelCase")]
pub struct UpdateOAuthClient<'a> {
    /// OAuth client ID to update
    #[serde(borrow)]
    pub client_id: jacquard_common::CowStr<'a>,
    /// New human-readable name of the OAuth client
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub client_name: std::option::Option<jacquard_common::CowStr<'a>>,
    /// New URI of the client application
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub client_uri: std::option::Option<jacquard_common::types::string::Uri<'a>>,
    /// New URI of the client logo
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub logo_uri: std::option::Option<jacquard_common::types::string::Uri<'a>>,
    /// New URI of the privacy policy
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub policy_uri: std::option::Option<jacquard_common::types::string::Uri<'a>>,
    /// New allowed redirect URIs for OAuth flow
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub redirect_uris: std::option::Option<Vec<jacquard_common::types::string::Uri<'a>>>,
    /// New OAuth scope
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub scope: std::option::Option<jacquard_common::CowStr<'a>>,
    /// New URI of the terms of service
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub tos_uri: std::option::Option<jacquard_common::types::string::Uri<'a>>,
}

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
pub struct UpdateOAuthClientOutput<'a> {
    #[serde(flatten)]
    #[serde(borrow)]
    pub value: crate::network_slices::slice::get_o_auth_clients::OauthClientDetails<'a>,
}

/// Response type for
///network.slices.slice.updateOAuthClient
pub struct UpdateOAuthClientResponse;
impl jacquard_common::xrpc::XrpcResp for UpdateOAuthClientResponse {
    const NSID: &'static str = "network.slices.slice.updateOAuthClient";
    const ENCODING: &'static str = "application/json";
    type Output<'de> = UpdateOAuthClientOutput<'de>;
    type Err<'de> = jacquard_common::xrpc::GenericError<'de>;
}

impl<'a> jacquard_common::xrpc::XrpcRequest for UpdateOAuthClient<'a> {
    const NSID: &'static str = "network.slices.slice.updateOAuthClient";
    const METHOD: jacquard_common::xrpc::XrpcMethod = jacquard_common::xrpc::XrpcMethod::Procedure(
        "application/json",
    );
    type Response = UpdateOAuthClientResponse;
}

/// Endpoint type for
///network.slices.slice.updateOAuthClient
pub struct UpdateOAuthClientRequest;
impl jacquard_common::xrpc::XrpcEndpoint for UpdateOAuthClientRequest {
    const PATH: &'static str = "/xrpc/network.slices.slice.updateOAuthClient";
    const METHOD: jacquard_common::xrpc::XrpcMethod = jacquard_common::xrpc::XrpcMethod::Procedure(
        "application/json",
    );
    type Request<'de> = UpdateOAuthClient<'de>;
    type Response = UpdateOAuthClientResponse;
}