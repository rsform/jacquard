// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: network.slices.slice.getActors
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic,
    bon::Builder
)]
#[serde(rename_all = "camelCase")]
pub struct Actor<'a> {
    /// Decentralized identifier of the actor
    #[serde(borrow)]
    pub did: jacquard_common::types::string::Did<'a>,
    /// Human-readable handle of the actor
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub handle: Option<jacquard_common::types::string::Handle<'a>>,
    /// When this actor was indexed
    pub indexed_at: jacquard_common::types::string::Datetime,
    /// AT-URI of the slice this actor is indexed in
    #[serde(borrow)]
    #[builder(into)]
    pub slice_uri: jacquard_common::CowStr<'a>,
}

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic,
    Default
)]
#[serde(rename_all = "camelCase")]
pub struct GetActors<'a> {
    /// Pagination cursor from previous response
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub cursor: std::option::Option<jacquard_common::CowStr<'a>>,
    /// Maximum number of actors to return
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub limit: std::option::Option<i64>,
    /// AT-URI of the slice to query
    #[serde(borrow)]
    pub slice: jacquard_common::CowStr<'a>,
    /// Flexible filtering conditions for querying actors
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub r#where: std::option::Option<jacquard_common::types::value::Data<'a>>,
}

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
pub struct GetActorsOutput<'a> {
    #[serde(borrow)]
    pub actors: Vec<jacquard_common::types::value::Data<'a>>,
    /// Pagination cursor for next page
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub cursor: std::option::Option<jacquard_common::CowStr<'a>>,
}

///Response type for
///network.slices.slice.getActors
pub struct GetActorsResponse;
impl jacquard_common::xrpc::XrpcResp for GetActorsResponse {
    const NSID: &'static str = "network.slices.slice.getActors";
    const ENCODING: &'static str = "application/json";
    type Output<'de> = GetActorsOutput<'de>;
    type Err<'de> = jacquard_common::xrpc::GenericError<'de>;
}

impl<'a> jacquard_common::xrpc::XrpcRequest for GetActors<'a> {
    const NSID: &'static str = "network.slices.slice.getActors";
    const METHOD: jacquard_common::xrpc::XrpcMethod = jacquard_common::xrpc::XrpcMethod::Procedure(
        "application/json",
    );
    type Response = GetActorsResponse;
}

///Endpoint type for
///network.slices.slice.getActors
pub struct GetActorsRequest;
impl jacquard_common::xrpc::XrpcEndpoint for GetActorsRequest {
    const PATH: &'static str = "/xrpc/network.slices.slice.getActors";
    const METHOD: jacquard_common::xrpc::XrpcMethod = jacquard_common::xrpc::XrpcMethod::Procedure(
        "application/json",
    );
    type Request<'de> = GetActors<'de>;
    type Response = GetActorsResponse;
}