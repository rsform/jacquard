// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: network.slices.slice.getJobLogs
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic,
    bon::Builder
)]
#[serde(rename_all = "camelCase")]
pub struct LogEntry<'a> {
    /// When the log entry was created
    pub created_at: jacquard_common::types::string::Datetime,
    /// Log entry ID
    pub id: i64,
    /// UUID of related job if applicable
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub job_id: Option<jacquard_common::CowStr<'a>>,
    /// Log level
    #[serde(borrow)]
    #[builder(into)]
    pub level: jacquard_common::CowStr<'a>,
    /// Type of log entry
    #[serde(borrow)]
    #[builder(into)]
    pub log_type: jacquard_common::CowStr<'a>,
    /// Log message
    #[serde(borrow)]
    #[builder(into)]
    pub message: jacquard_common::CowStr<'a>,
    /// Additional metadata associated with the log entry
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub metadata: Option<jacquard_common::types::value::Data<'a>>,
    /// AT-URI of related slice if applicable
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub slice_uri: Option<jacquard_common::CowStr<'a>>,
    /// DID of related user if applicable
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub user_did: Option<jacquard_common::types::string::Did<'a>>,
}

#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    bon::Builder,
    jacquard_derive::IntoStatic
)]
#[builder(start_fn = new)]
#[serde(rename_all = "camelCase")]
pub struct GetJobLogs<'a> {
    #[serde(borrow)]
    #[builder(into)]
    pub job_id: jacquard_common::CowStr<'a>,
    ///(default: 100, min: 1, max: 1000)
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub limit: std::option::Option<i64>,
}

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
pub struct GetJobLogsOutput<'a> {
    #[serde(borrow)]
    pub logs: Vec<jacquard_common::types::value::Data<'a>>,
}

///Response type for
///network.slices.slice.getJobLogs
pub struct GetJobLogsResponse;
impl jacquard_common::xrpc::XrpcResp for GetJobLogsResponse {
    const NSID: &'static str = "network.slices.slice.getJobLogs";
    const ENCODING: &'static str = "application/json";
    type Output<'de> = GetJobLogsOutput<'de>;
    type Err<'de> = jacquard_common::xrpc::GenericError<'de>;
}

impl<'a> jacquard_common::xrpc::XrpcRequest for GetJobLogs<'a> {
    const NSID: &'static str = "network.slices.slice.getJobLogs";
    const METHOD: jacquard_common::xrpc::XrpcMethod = jacquard_common::xrpc::XrpcMethod::Query;
    type Response = GetJobLogsResponse;
}

///Endpoint type for
///network.slices.slice.getJobLogs
pub struct GetJobLogsRequest;
impl jacquard_common::xrpc::XrpcEndpoint for GetJobLogsRequest {
    const PATH: &'static str = "/xrpc/network.slices.slice.getJobLogs";
    const METHOD: jacquard_common::xrpc::XrpcMethod = jacquard_common::xrpc::XrpcMethod::Query;
    type Request<'de> = GetJobLogs<'de>;
    type Response = GetJobLogsResponse;
}