// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: network.slices.slice.getSyncSummary
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
pub struct CollectionSummary<'a> {
    #[serde(borrow)]
    pub collection: jacquard_common::CowStr<'a>,
    pub estimated_repos: i64,
    pub is_external: bool,
}

#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    bon::Builder,
    jacquard_derive::IntoStatic
)]
#[builder(start_fn = new)]
#[serde(rename_all = "camelCase")]
pub struct GetSyncSummary<'a> {
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub collections: std::option::Option<Vec<jacquard_common::CowStr<'a>>>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub external_collections: std::option::Option<Vec<jacquard_common::CowStr<'a>>>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub repos: std::option::Option<Vec<jacquard_common::CowStr<'a>>>,
    #[serde(borrow)]
    #[builder(into)]
    pub slice: jacquard_common::CowStr<'a>,
}

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
pub struct GetSyncSummaryOutput<'a> {
    ///The actual limit applied (user-specified or default)
    pub applied_limit: i64,
    ///Number of repositories after applying limit
    pub capped_repos: i64,
    #[serde(borrow)]
    pub collections_summary: Vec<jacquard_common::types::value::Data<'a>>,
    ///Total number of repositories that would be synced
    pub total_repos: i64,
    ///Whether the sync would be limited by maxRepos
    pub would_be_capped: bool,
}

///Response type for
///network.slices.slice.getSyncSummary
pub struct GetSyncSummaryResponse;
impl jacquard_common::xrpc::XrpcResp for GetSyncSummaryResponse {
    const NSID: &'static str = "network.slices.slice.getSyncSummary";
    const ENCODING: &'static str = "application/json";
    type Output<'de> = GetSyncSummaryOutput<'de>;
    type Err<'de> = jacquard_common::xrpc::GenericError<'de>;
}

impl<'de> jacquard_common::xrpc::XrpcRequest<'de> for GetSyncSummary<'de> {
    const NSID: &'static str = "network.slices.slice.getSyncSummary";
    const METHOD: jacquard_common::xrpc::XrpcMethod = jacquard_common::xrpc::XrpcMethod::Query;
    type Response = GetSyncSummaryResponse;
}