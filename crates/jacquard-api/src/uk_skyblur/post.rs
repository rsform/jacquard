// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: uk.skyblur.post
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

pub mod decrypt_by_cid;
pub mod encrypt;
pub mod get_post;

///Record containing a Skyblur post.
#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
pub struct Post<'a> {
    ///The post additional contents.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub additional: std::option::Option<jacquard_common::CowStr<'a>>,
    ///Created date assigned by client
    pub created_at: jacquard_common::types::string::Datetime,
    ///Encrypted post body. It shoud be decrypted by the client with AES-256.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub encrypt_body: std::option::Option<jacquard_common::types::blob::Blob<'a>>,
    ///The post main contents. Blurred text must be enclosed in brackets [].
    #[serde(borrow)]
    pub text: jacquard_common::CowStr<'a>,
    #[serde(borrow)]
    pub uri: jacquard_common::types::string::AtUri<'a>,
    ///For 'password', the text only contains blurred text, and additional is always empty. The unblurred text and additional are included in the encryptBody.
    #[serde(borrow)]
    pub visibility: jacquard_common::CowStr<'a>,
}

impl jacquard_common::types::collection::Collection for Post<'_> {
    const NSID: &'static str = "uk.skyblur.post";
}