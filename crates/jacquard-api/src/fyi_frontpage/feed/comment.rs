// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: fyi.frontpage.feed.comment
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

/// Record containing a Frontpage comment.
#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic,
    bon::Builder
)]
#[serde(rename_all = "camelCase")]
pub struct Comment<'a> {
    /// The content of the comment. Note, there are additional constraints placed on the total size of the content within the Frontpage AppView that are not possible to express in lexicon. Generally a comment can have a maximum length of 10,000 graphemes, the Frontpage AppView will enforce this limit.
    #[serde(borrow)]
    pub blocks: Vec<crate::fyi_frontpage::richtext::block::Block<'a>>,
    /// Client-declared timestamp when this comment was originally created.
    pub created_at: jacquard_common::types::string::Datetime,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub parent: Option<crate::com_atproto::repo::strong_ref::StrongRef<'a>>,
    #[serde(borrow)]
    pub post: crate::com_atproto::repo::strong_ref::StrongRef<'a>,
}

impl<'a> Comment<'a> {
    pub fn uri(
        uri: impl Into<jacquard_common::CowStr<'a>>,
    ) -> Result<
        jacquard_common::types::uri::RecordUri<'a, CommentRecord>,
        jacquard_common::types::uri::UriError,
    > {
        jacquard_common::types::uri::RecordUri::try_from_uri(
            jacquard_common::types::string::AtUri::new_cow(uri.into())?,
        )
    }
}

/// Typed wrapper for GetRecord response with this collection's record type.
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
pub struct CommentGetRecordOutput<'a> {
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub cid: std::option::Option<jacquard_common::types::string::Cid<'a>>,
    #[serde(borrow)]
    pub uri: jacquard_common::types::string::AtUri<'a>,
    #[serde(borrow)]
    pub value: Comment<'a>,
}

impl From<CommentGetRecordOutput<'_>> for Comment<'_> {
    fn from(output: CommentGetRecordOutput<'_>) -> Self {
        use jacquard_common::IntoStatic;
        output.value.into_static()
    }
}

impl jacquard_common::types::collection::Collection for Comment<'_> {
    const NSID: &'static str = "fyi.frontpage.feed.comment";
    type Record = CommentRecord;
}

/// Marker type for deserializing records from this collection.
#[derive(Debug, serde::Serialize, serde::Deserialize)]
pub struct CommentRecord;
impl jacquard_common::xrpc::XrpcResp for CommentRecord {
    const NSID: &'static str = "fyi.frontpage.feed.comment";
    const ENCODING: &'static str = "application/json";
    type Output<'de> = CommentGetRecordOutput<'de>;
    type Err<'de> = jacquard_common::types::collection::RecordError<'de>;
}

impl jacquard_common::types::collection::Collection for CommentRecord {
    const NSID: &'static str = "fyi.frontpage.feed.comment";
    type Record = CommentRecord;
}