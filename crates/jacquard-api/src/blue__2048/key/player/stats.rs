// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: blue.2048.key.player.stats
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

/// A record that holds a did:key for verifying a players stats. This is intended to be written at a verification authorities repo
#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic,
    bon::Builder
)]
#[serde(rename_all = "camelCase")]
pub struct Stats<'a> {
    pub created_at: jacquard_common::types::string::Datetime,
    /// A did:key that is used to verify an at://2048 authority has verified this players stats to a certain degree
    #[serde(borrow)]
    pub key: crate::blue__2048::key::Key<'a>,
}

impl<'a> Stats<'a> {
    pub fn uri(
        uri: impl Into<jacquard_common::CowStr<'a>>,
    ) -> Result<
        jacquard_common::types::uri::RecordUri<'a, StatsRecord>,
        jacquard_common::types::uri::UriError,
    > {
        jacquard_common::types::uri::RecordUri::try_from_uri(
            jacquard_common::types::string::AtUri::new_cow(uri.into())?,
        )
    }
}

/// Typed wrapper for GetRecord response with this collection's record type.
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
pub struct StatsGetRecordOutput<'a> {
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub cid: std::option::Option<jacquard_common::types::string::Cid<'a>>,
    #[serde(borrow)]
    pub uri: jacquard_common::types::string::AtUri<'a>,
    #[serde(borrow)]
    pub value: Stats<'a>,
}

impl From<StatsGetRecordOutput<'_>> for Stats<'_> {
    fn from(output: StatsGetRecordOutput<'_>) -> Self {
        use jacquard_common::IntoStatic;
        output.value.into_static()
    }
}

impl jacquard_common::types::collection::Collection for Stats<'_> {
    const NSID: &'static str = "blue.2048.key.player.stats";
    type Record = StatsRecord;
}

/// Marker type for deserializing records from this collection.
#[derive(Debug, serde::Serialize, serde::Deserialize)]
pub struct StatsRecord;
impl jacquard_common::xrpc::XrpcResp for StatsRecord {
    const NSID: &'static str = "blue.2048.key.player.stats";
    const ENCODING: &'static str = "application/json";
    type Output<'de> = StatsGetRecordOutput<'de>;
    type Err<'de> = jacquard_common::types::collection::RecordError<'de>;
}

impl jacquard_common::types::collection::Collection for StatsRecord {
    const NSID: &'static str = "blue.2048.key.player.stats";
    type Record = StatsRecord;
}