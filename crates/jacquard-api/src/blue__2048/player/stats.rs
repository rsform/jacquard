// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: blue.2048.player.stats
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

///A declaration of a at://2048 player's stats over the course of their playtime
#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
pub struct Stats<'a> {
    ///Average score across all games
    pub average_score: i64,
    pub created_at: jacquard_common::types::string::Datetime,
    ///Total numbers of games the user has played
    pub games_played: i64,
    ///The highest number block the player has fround. example 128, 256, etc
    pub highest_number_block: i64,
    ///The highest score the user has gotten in a game
    pub highest_score: i64,
    ///The smallest number of moves to get the 2048 block
    pub least_moves_to_find_twenty_forty_eight: i64,
    ///The sync status of this record with the users AT Protocol repo.
    #[serde(borrow)]
    pub sync_status: crate::blue__2048::SyncStatus<'a>,
    ///Times the 2048 block has been found also count as wins
    pub times_twenty_forty_eight_been_found: i64,
    ///Total score across all games
    pub total_score: i64,
}

/// Typed wrapper for GetRecord response with this collection's record type.
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
pub struct StatsGetRecordOutput<'a> {
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub cid: std::option::Option<jacquard_common::types::string::Cid<'a>>,
    #[serde(borrow)]
    pub uri: jacquard_common::types::string::AtUri<'a>,
    #[serde(borrow)]
    pub value: Stats<'a>,
}

/// Marker type for deserializing records from this collection.
pub struct StatsRecord;
impl jacquard_common::xrpc::XrpcResp for StatsRecord {
    const NSID: &'static str = "blue.2048.player.stats";
    const ENCODING: &'static str = "application/json";
    type Output<'de> = StatsGetRecordOutput<'de>;
    type Err<'de> = jacquard_common::types::collection::RecordError<'de>;
}

impl jacquard_common::types::collection::Collection for Stats<'_> {
    const NSID: &'static str = "blue.2048.player.stats";
    type Record = StatsRecord;
}

impl From<StatsGetRecordOutput<'_>> for Stats<'static> {
    fn from(output: StatsGetRecordOutput<'_>) -> Self {
        use jacquard_common::IntoStatic;
        output.value.into_static()
    }
}