// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: blog.pckt.publication
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

///Record declaring a publication
#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
pub struct Publication<'a> {
    ///Base URL path for the publication ex https://blog.pckt.blog
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub base_path: std::option::Option<jacquard_common::types::string::Uri<'a>>,
    ///Timestamp when the publication was first created
    pub created_at: jacquard_common::types::string::Datetime,
    ///Publication description
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub description: std::option::Option<jacquard_common::CowStr<'a>>,
    ///Extension objects (open union) for additional features
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub extensions: std::option::Option<Vec<jacquard_common::types::value::Data<'a>>>,
    ///Publication icon/avatar image
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub icon: std::option::Option<jacquard_common::types::blob::Blob<'a>>,
    ///Publication name/title
    #[serde(borrow)]
    pub name: jacquard_common::CowStr<'a>,
    ///Theme configuration as an open union; accepts blog.pckt.theme and future types.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub theme: std::option::Option<PublicationRecordTheme<'a>>,
    ///Timestamp when the publication was last updated (optional)
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub updated_at: std::option::Option<jacquard_common::types::string::Datetime>,
}

#[jacquard_derive::open_union]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(tag = "$type")]
#[serde(bound(deserialize = "'de: 'a"))]
pub enum PublicationRecordTheme<'a> {
    #[serde(rename = "blog.pckt.theme")]
    Theme(Box<crate::blog_pckt::theme::Theme<'a>>),
}

impl jacquard_common::types::collection::Collection for Publication<'_> {
    const NSID: &'static str = "blog.pckt.publication";
}