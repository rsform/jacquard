// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: tools.smokesignal.blahg.content.post
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
pub struct Attachment<'a> {
    ///Alt text description of the content, for accessibility.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub alt: std::option::Option<jacquard_common::CowStr<'a>>,
    #[serde(borrow)]
    pub content: jacquard_common::types::blob::Blob<'a>,
}

///A blagh post
#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
pub struct Post<'a> {
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub attachments: std::option::Option<
        Vec<crate::tools_smokesignal::blahg::content::post::Attachment<'a>>,
    >,
    ///The content of the post
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub content: std::option::Option<jacquard_common::types::blob::Blob<'a>>,
    ///Indicates human language of text content.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub langs: std::option::Option<Vec<jacquard_common::types::string::Language>>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub published_at: std::option::Option<jacquard_common::types::string::Datetime>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub title: std::option::Option<jacquard_common::CowStr<'a>>,
}

impl jacquard_common::types::collection::Collection for Post<'_> {
    const NSID: &'static str = "tools.smokesignal.blahg.content.post";
}