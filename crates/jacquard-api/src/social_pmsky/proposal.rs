// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: social.pmsky.proposal
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
pub struct Proposal<'a> {
    ///The persistent, anonymous identifier for the user creating the proposal.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub aid: std::option::Option<jacquard_common::CowStr<'a>>,
    ///Optionally, CID specifying the specific version of 'uri' resource this proposal applies to.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub cid: std::option::Option<jacquard_common::types::string::Cid<'a>>,
    ///Timestamp when this proposal was created.
    pub cts: jacquard_common::types::string::Datetime,
    ///For 'label' proposals where 'val' is 'needs-context', the full text of any proposed annotation (e.g. community note) to be shown below the post.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub note: std::option::Option<jacquard_common::CowStr<'a>>,
    ///An optional array of predefined reasons justifying the moderation action.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub reasons: std::option::Option<Vec<jacquard_common::CowStr<'a>>>,
    ///Signature of dag-cbor encoded proposal.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub sig: std::option::Option<bytes::Bytes>,
    ///DID of the actor who created this proposal.
    #[serde(borrow)]
    pub src: jacquard_common::types::string::Did<'a>,
    ///The type of moderation action being proposed. Currently expected values are 'allowed_user' or 'label'
    #[serde(borrow)]
    pub typ: jacquard_common::CowStr<'a>,
    ///AT URI of the record, repository (account), or other resource that this proposal applies to.
    #[serde(borrow)]
    pub uri: jacquard_common::types::string::Uri<'a>,
    ///For 'label' proposals, the short string name of the value of the proposed label.
    #[serde(borrow)]
    pub val: jacquard_common::CowStr<'a>,
    ///The AT Protocol version of the proposal object.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub ver: std::option::Option<i64>,
}

/// Typed wrapper for GetRecord response with this collection's record type.
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
pub struct ProposalGetRecordOutput<'a> {
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub cid: std::option::Option<jacquard_common::types::string::Cid<'a>>,
    #[serde(borrow)]
    pub uri: jacquard_common::types::string::AtUri<'a>,
    #[serde(borrow)]
    pub value: Proposal<'a>,
}

/// Marker type for deserializing records from this collection.
pub struct ProposalRecord;
impl jacquard_common::xrpc::XrpcResp for ProposalRecord {
    const NSID: &'static str = "social.pmsky.proposal";
    const ENCODING: &'static str = "application/json";
    type Output<'de> = ProposalGetRecordOutput<'de>;
    type Err<'de> = jacquard_common::types::collection::RecordError<'de>;
}

impl jacquard_common::types::collection::Collection for Proposal<'_> {
    const NSID: &'static str = "social.pmsky.proposal";
    type Record = ProposalRecord;
}

impl From<ProposalGetRecordOutput<'_>> for Proposal<'_> {
    fn from(output: ProposalGetRecordOutput<'_>) -> Self {
        use jacquard_common::IntoStatic;
        output.value.into_static()
    }
}