// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: net.altq.aqfile
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

/// Cryptographic checksum for integrity verification.
#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic,
    Default
)]
#[serde(rename_all = "camelCase")]
pub struct Checksum<'a> {
    /// Hash algorithm name.
    #[serde(borrow)]
    pub algo: jacquard_common::CowStr<'a>,
    /// Hex or base64 encoded digest produced by the algorithm.
    #[serde(borrow)]
    pub hash: jacquard_common::CowStr<'a>,
}

/// File metadata describing the uploaded blob.
#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic,
    bon::Builder
)]
#[serde(rename_all = "camelCase")]
pub struct File<'a> {
    /// MIME type, e.g. 'video/mp4'.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub mime_type: Option<jacquard_common::CowStr<'a>>,
    /// Client-side last-modified timestamp.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    pub modified_at: Option<jacquard_common::types::string::Datetime>,
    /// User-visible filename.
    #[serde(borrow)]
    #[builder(into)]
    pub name: jacquard_common::CowStr<'a>,
    /// File size in bytes.
    pub size: i64,
}

/// A record representing an uploaded file blob with metadata.
#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic,
    bon::Builder
)]
#[serde(rename_all = "camelCase")]
pub struct Aqfile<'a> {
    /// Handle or DID of the account to attribute this upload to.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub attribution: Option<jacquard_common::types::ident::AtIdentifier<'a>>,
    /// The uploaded blob reference. Note: Individual PDS instances may enforce lower size limits.
    #[serde(borrow)]
    pub blob: jacquard_common::types::blob::Blob<'a>,
    /// Optional cryptographic checksum for integrity verification.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub checksum: Option<crate::net_altq::aqfile::Checksum<'a>>,
    /// Timestamp when this record was created.
    pub created_at: jacquard_common::types::string::Datetime,
    /// Metadata about the file.
    #[serde(borrow)]
    pub file: crate::net_altq::aqfile::File<'a>,
}

/// Typed wrapper for GetRecord response with this collection's record type.
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
pub struct AqfileGetRecordOutput<'a> {
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub cid: std::option::Option<jacquard_common::types::string::Cid<'a>>,
    #[serde(borrow)]
    pub uri: jacquard_common::types::string::AtUri<'a>,
    #[serde(borrow)]
    pub value: Aqfile<'a>,
}

/// Marker type for deserializing records from this collection.
pub struct AqfileRecord;
impl jacquard_common::xrpc::XrpcResp for AqfileRecord {
    const NSID: &'static str = "net.altq.aqfile";
    const ENCODING: &'static str = "application/json";
    type Output<'de> = AqfileGetRecordOutput<'de>;
    type Err<'de> = jacquard_common::types::collection::RecordError<'de>;
}

impl jacquard_common::types::collection::Collection for Aqfile<'_> {
    const NSID: &'static str = "net.altq.aqfile";
    type Record = AqfileRecord;
}

impl From<AqfileGetRecordOutput<'_>> for Aqfile<'_> {
    fn from(output: AqfileGetRecordOutput<'_>) -> Self {
        use jacquard_common::IntoStatic;
        output.value.into_static()
    }
}