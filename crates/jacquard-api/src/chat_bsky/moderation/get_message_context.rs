// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: chat.bsky.moderation.getMessageContext
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    bon::Builder
)]
#[builder(start_fn = new)]
#[serde(rename_all = "camelCase")]
pub struct GetMessageContext<'a> {
    ///(default: 5)
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub after: std::option::Option<i64>,
    ///(default: 5)
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub before: std::option::Option<i64>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    #[builder(into)]
    pub convo_id: std::option::Option<jacquard_common::CowStr<'a>>,
    #[serde(borrow)]
    #[builder(into)]
    pub message_id: jacquard_common::CowStr<'a>,
}

impl jacquard_common::IntoStatic for GetMessageContext<'_> {
    type Output = GetMessageContext<'static>;
    fn into_static(self) -> Self::Output {
        GetMessageContext {
            after: self.after.into_static(),
            before: self.before.into_static(),
            convo_id: self.convo_id.into_static(),
            message_id: self.message_id.into_static(),
        }
    }
}

#[jacquard_derive::lexicon]
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct GetMessageContextOutput<'a> {
    #[serde(borrow)]
    pub messages: Vec<jacquard_common::types::value::Data<'a>>,
}

impl jacquard_common::IntoStatic for GetMessageContextOutput<'_> {
    type Output = GetMessageContextOutput<'static>;
    fn into_static(self) -> Self::Output {
        GetMessageContextOutput {
            messages: self.messages.into_static(),
            extra_data: self.extra_data.into_static(),
        }
    }
}

///Response type for
///chat.bsky.moderation.getMessageContext
pub struct GetMessageContextResponse;
impl jacquard_common::xrpc::XrpcResp for GetMessageContextResponse {
    const NSID: &'static str = "chat.bsky.moderation.getMessageContext";
    const ENCODING: &'static str = "application/json";
    type Output<'de> = GetMessageContextOutput<'de>;
    type Err<'de> = jacquard_common::xrpc::GenericError<'de>;
}

impl<'de> jacquard_common::xrpc::XrpcRequest<'de> for GetMessageContext<'de> {
    const NSID: &'static str = "chat.bsky.moderation.getMessageContext";
    const METHOD: jacquard_common::xrpc::XrpcMethod = jacquard_common::xrpc::XrpcMethod::Query;
    type Response = GetMessageContextResponse;
}