// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: chat.bsky.actor.exportAccountData
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

#[jacquard_derive::lexicon]
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct ExportAccountDataOutput<'a> {}
impl jacquard_common::IntoStatic for ExportAccountDataOutput<'_> {
    type Output = ExportAccountDataOutput<'static>;
    fn into_static(self) -> Self::Output {
        ExportAccountDataOutput {
            extra_data: self.extra_data.into_static(),
        }
    }
}

/// XRPC request marker type
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize, serde::Deserialize)]
pub struct ExportAccountData;
///Response type for
///chat.bsky.actor.exportAccountData
pub struct ExportAccountDataResponse;
impl<'de> jacquard_common::types::xrpc::XrpcResp<'de> for ExportAccountDataResponse {
    const ENCODING: &'static str = "application/jsonl";
    type Output = ExportAccountDataOutput<'de>;
    type Err = jacquard_common::types::xrpc::GenericError<'de>;
}

impl<'de> jacquard_common::types::xrpc::XrpcRequest<'de> for ExportAccountData {
    const NSID: &'static str = "chat.bsky.actor.exportAccountData";
    const METHOD: jacquard_common::types::xrpc::XrpcMethod =
        jacquard_common::types::xrpc::XrpcMethod::Query;
    type Response<'de1> = ExportAccountDataResponse;
}
