// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: chat.bsky.convo.getLog
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq, bon::Builder)]
#[builder(start_fn = new)]
#[serde(rename_all = "camelCase")]
pub struct GetLog<'a> {
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    #[builder(into)]
    pub cursor: std::option::Option<jacquard_common::CowStr<'a>>,
}

impl jacquard_common::IntoStatic for GetLog<'_> {
    type Output = GetLog<'static>;
    fn into_static(self) -> Self::Output {
        GetLog {
            cursor: self.cursor.into_static(),
        }
    }
}

#[jacquard_derive::lexicon]
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct GetLogOutput<'a> {
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub cursor: std::option::Option<jacquard_common::CowStr<'a>>,
    #[serde(borrow)]
    pub logs: Vec<jacquard_common::types::value::Data<'a>>,
}

impl jacquard_common::IntoStatic for GetLogOutput<'_> {
    type Output = GetLogOutput<'static>;
    fn into_static(self) -> Self::Output {
        GetLogOutput {
            cursor: self.cursor.into_static(),
            logs: self.logs.into_static(),
            extra_data: self.extra_data.into_static(),
        }
    }
}

///Response type for
///chat.bsky.convo.getLog
pub struct GetLogResponse;
impl<'de> jacquard_common::types::xrpc::XrpcResp<'de> for GetLogResponse {
    const ENCODING: &'static str = "application/json";
    type Output = GetLogOutput<'de>;
    type Err = jacquard_common::types::xrpc::GenericError<'de>;
}

impl<'de> jacquard_common::types::xrpc::XrpcRequest<'de> for GetLog<'de> {
    const NSID: &'static str = "chat.bsky.convo.getLog";
    const METHOD: jacquard_common::types::xrpc::XrpcMethod =
        jacquard_common::types::xrpc::XrpcMethod::Query;
    type Response<'de1> = GetLogResponse;
}
