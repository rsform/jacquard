// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: chat.bsky.convo.getConvo
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    bon::Builder
)]
#[builder(start_fn = new)]
#[serde(rename_all = "camelCase")]
pub struct GetConvo<'a> {
    #[serde(borrow)]
    #[builder(into)]
    pub convo_id: jacquard_common::CowStr<'a>,
}

impl jacquard_common::IntoStatic for GetConvo<'_> {
    type Output = GetConvo<'static>;
    fn into_static(self) -> Self::Output {
        GetConvo {
            convo_id: self.convo_id.into_static(),
        }
    }
}

#[jacquard_derive::lexicon]
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct GetConvoOutput<'a> {
    #[serde(borrow)]
    pub convo: crate::chat_bsky::convo::ConvoView<'a>,
}

impl jacquard_common::IntoStatic for GetConvoOutput<'_> {
    type Output = GetConvoOutput<'static>;
    fn into_static(self) -> Self::Output {
        GetConvoOutput {
            convo: self.convo.into_static(),
            extra_data: self.extra_data.into_static(),
        }
    }
}

///Response type for
///chat.bsky.convo.getConvo
pub struct GetConvoResponse;
impl jacquard_common::xrpc::XrpcResp for GetConvoResponse {
    const NSID: &'static str = "chat.bsky.convo.getConvo";
    const ENCODING: &'static str = "application/json";
    type Output<'de> = GetConvoOutput<'de>;
    type Err<'de> = jacquard_common::xrpc::GenericError<'de>;
}

impl<'de> jacquard_common::xrpc::XrpcRequest<'de> for GetConvo<'de> {
    const NSID: &'static str = "chat.bsky.convo.getConvo";
    const METHOD: jacquard_common::xrpc::XrpcMethod = jacquard_common::xrpc::XrpcMethod::Query;
    type Response = GetConvoResponse;
}