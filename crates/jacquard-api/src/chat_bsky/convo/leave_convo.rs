// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: chat.bsky.convo.leaveConvo
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    bon::Builder
)]
#[serde(rename_all = "camelCase")]
#[builder(start_fn = new)]
pub struct LeaveConvo<'a> {
    #[serde(borrow)]
    #[builder(into)]
    pub convo_id: jacquard_common::CowStr<'a>,
    #[serde(flatten)]
    #[serde(borrow)]
    #[builder(default)]
    pub extra_data: ::std::collections::BTreeMap<
        ::jacquard_common::smol_str::SmolStr,
        ::jacquard_common::types::value::Data<'a>,
    >,
}

impl jacquard_common::IntoStatic for LeaveConvo<'_> {
    type Output = LeaveConvo<'static>;
    fn into_static(self) -> Self::Output {
        LeaveConvo {
            convo_id: self.convo_id.into_static(),
            extra_data: self.extra_data.into_static(),
        }
    }
}

#[jacquard_derive::lexicon]
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct LeaveConvoOutput<'a> {
    #[serde(borrow)]
    pub convo_id: jacquard_common::CowStr<'a>,
    #[serde(borrow)]
    pub rev: jacquard_common::CowStr<'a>,
}

impl jacquard_common::IntoStatic for LeaveConvoOutput<'_> {
    type Output = LeaveConvoOutput<'static>;
    fn into_static(self) -> Self::Output {
        LeaveConvoOutput {
            convo_id: self.convo_id.into_static(),
            rev: self.rev.into_static(),
            extra_data: self.extra_data.into_static(),
        }
    }
}

///Response type for
///chat.bsky.convo.leaveConvo
pub struct LeaveConvoResponse;
impl jacquard_common::xrpc::XrpcResp for LeaveConvoResponse {
    const NSID: &'static str = "chat.bsky.convo.leaveConvo";
    const ENCODING: &'static str = "application/json";
    type Output<'de> = LeaveConvoOutput<'de>;
    type Err<'de> = jacquard_common::xrpc::GenericError<'de>;
}

impl<'de> jacquard_common::xrpc::XrpcRequest<'de> for LeaveConvo<'de> {
    const NSID: &'static str = "chat.bsky.convo.leaveConvo";
    const METHOD: jacquard_common::xrpc::XrpcMethod = jacquard_common::xrpc::XrpcMethod::Procedure(
        "application/json",
    );
    type Response = LeaveConvoResponse;
}