// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: chat.bsky.convo.removeReaction
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

#[jacquard_derive::lexicon]
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq, bon::Builder)]
#[serde(rename_all = "camelCase")]
#[builder(start_fn = new)]
pub struct RemoveReaction<'a> {
    #[serde(borrow)]
    #[builder(into)]
    pub convo_id: jacquard_common::CowStr<'a>,
    #[serde(borrow)]
    #[builder(into)]
    pub message_id: jacquard_common::CowStr<'a>,
    #[serde(borrow)]
    #[builder(into)]
    pub value: jacquard_common::CowStr<'a>,
    #[serde(flatten)]
    #[serde(borrow)]
    #[builder(default)]
    pub extra_data: ::std::collections::BTreeMap<
        ::jacquard_common::smol_str::SmolStr,
        ::jacquard_common::types::value::Data<'a>,
    >,
}

impl jacquard_common::IntoStatic for RemoveReaction<'_> {
    type Output = RemoveReaction<'static>;
    fn into_static(self) -> Self::Output {
        RemoveReaction {
            convo_id: self.convo_id.into_static(),
            message_id: self.message_id.into_static(),
            value: self.value.into_static(),
            extra_data: self.extra_data.into_static(),
        }
    }
}

#[jacquard_derive::lexicon]
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct RemoveReactionOutput<'a> {
    #[serde(borrow)]
    pub message: crate::chat_bsky::convo::MessageView<'a>,
}

impl jacquard_common::IntoStatic for RemoveReactionOutput<'_> {
    type Output = RemoveReactionOutput<'static>;
    fn into_static(self) -> Self::Output {
        RemoveReactionOutput {
            message: self.message.into_static(),
            extra_data: self.extra_data.into_static(),
        }
    }
}

#[jacquard_derive::open_union]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    thiserror::Error,
    miette::Diagnostic,
)]
#[serde(tag = "error", content = "message")]
#[serde(bound(deserialize = "'de: 'a"))]
pub enum RemoveReactionError<'a> {
    ///Indicates that the message has been deleted and reactions can no longer be added/removed.
    #[serde(rename = "ReactionMessageDeleted")]
    ReactionMessageDeleted(std::option::Option<String>),
    ///Indicates the value for the reaction is not acceptable. In general, this means it is not an emoji.
    #[serde(rename = "ReactionInvalidValue")]
    ReactionInvalidValue(std::option::Option<String>),
}

impl std::fmt::Display for RemoveReactionError<'_> {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Self::ReactionMessageDeleted(msg) => {
                write!(f, "ReactionMessageDeleted")?;
                if let Some(msg) = msg {
                    write!(f, ": {}", msg)?;
                }
                Ok(())
            }
            Self::ReactionInvalidValue(msg) => {
                write!(f, "ReactionInvalidValue")?;
                if let Some(msg) = msg {
                    write!(f, ": {}", msg)?;
                }
                Ok(())
            }
            Self::Unknown(err) => write!(f, "Unknown error: {:?}", err),
        }
    }
}

impl jacquard_common::IntoStatic for RemoveReactionError<'_> {
    type Output = RemoveReactionError<'static>;
    fn into_static(self) -> Self::Output {
        match self {
            RemoveReactionError::ReactionMessageDeleted(v) => {
                RemoveReactionError::ReactionMessageDeleted(v.into_static())
            }
            RemoveReactionError::ReactionInvalidValue(v) => {
                RemoveReactionError::ReactionInvalidValue(v.into_static())
            }
            RemoveReactionError::Unknown(v) => RemoveReactionError::Unknown(v.into_static()),
        }
    }
}

///Response type for
///chat.bsky.convo.removeReaction
pub struct RemoveReactionResponse;
impl<'de> jacquard_common::types::xrpc::XrpcResp<'de> for RemoveReactionResponse {
    const ENCODING: &'static str = "application/json";
    type Output = RemoveReactionOutput<'de>;
    type Err = RemoveReactionError<'de>;
}

impl<'de> jacquard_common::types::xrpc::XrpcRequest<'de> for RemoveReaction<'de> {
    const NSID: &'static str = "chat.bsky.convo.removeReaction";
    const METHOD: jacquard_common::types::xrpc::XrpcMethod =
        jacquard_common::types::xrpc::XrpcMethod::Procedure("application/json");
    type Response<'de1> = RemoveReactionResponse;
}
