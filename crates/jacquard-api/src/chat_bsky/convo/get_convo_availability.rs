// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: chat.bsky.convo.getConvoAvailability
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    bon::Builder,
    jacquard_derive::IntoStatic
)]
#[builder(start_fn = new)]
#[serde(rename_all = "camelCase")]
pub struct GetConvoAvailability<'a> {
    #[serde(borrow)]
    pub members: Vec<jacquard_common::types::string::Did<'a>>,
}

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
pub struct GetConvoAvailabilityOutput<'a> {
    pub can_chat: bool,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub convo: std::option::Option<crate::chat_bsky::convo::ConvoView<'a>>,
}

///Response type for
///chat.bsky.convo.getConvoAvailability
pub struct GetConvoAvailabilityResponse;
impl jacquard_common::xrpc::XrpcResp for GetConvoAvailabilityResponse {
    const NSID: &'static str = "chat.bsky.convo.getConvoAvailability";
    const ENCODING: &'static str = "application/json";
    type Output<'de> = GetConvoAvailabilityOutput<'de>;
    type Err<'de> = jacquard_common::xrpc::GenericError<'de>;
}

impl<'de> jacquard_common::xrpc::XrpcRequest<'de> for GetConvoAvailability<'de> {
    const NSID: &'static str = "chat.bsky.convo.getConvoAvailability";
    const METHOD: jacquard_common::xrpc::XrpcMethod = jacquard_common::xrpc::XrpcMethod::Query;
    type Response = GetConvoAvailabilityResponse;
}

///Endpoint type for
///chat.bsky.convo.getConvoAvailability
pub struct GetConvoAvailabilityRequest;
impl jacquard_common::xrpc::XrpcEndpoint for GetConvoAvailabilityRequest {
    const PATH: &'static str = "/xrpc/chat.bsky.convo.getConvoAvailability";
    const METHOD: jacquard_common::xrpc::XrpcMethod = jacquard_common::xrpc::XrpcMethod::Query;
    type Request<'de> = GetConvoAvailability<'de>;
    type Response = GetConvoAvailabilityResponse;
}