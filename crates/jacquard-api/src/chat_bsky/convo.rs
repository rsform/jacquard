// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: chat.bsky.convo.defs
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

pub mod accept_convo;
pub mod add_reaction;
pub mod delete_message_for_self;
pub mod get_convo;
pub mod get_convo_availability;
pub mod get_convo_for_members;
pub mod get_log;
pub mod get_messages;
pub mod leave_convo;
pub mod list_convos;
pub mod mute_convo;
pub mod remove_reaction;
pub mod send_message;
pub mod send_message_batch;
pub mod unmute_convo;
pub mod update_all_read;
pub mod update_read;

#[jacquard_derive::lexicon]
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct ConvoView<'a> {
    #[serde(borrow)]
    pub id: jacquard_common::CowStr<'a>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub last_message: std::option::Option<ConvoViewRecordLastMessage<'a>>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub last_reaction: std::option::Option<ConvoViewRecordLastReaction<'a>>,
    #[serde(borrow)]
    pub members: Vec<crate::chat_bsky::actor::ProfileViewBasic<'a>>,
    pub muted: bool,
    #[serde(borrow)]
    pub rev: jacquard_common::CowStr<'a>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub status: std::option::Option<jacquard_common::CowStr<'a>>,
    pub unread_count: i64,
}

#[jacquard_derive::open_union]
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(tag = "$type")]
#[serde(bound(deserialize = "'de: 'a"))]
pub enum ConvoViewRecordLastMessage<'a> {}
impl jacquard_common::IntoStatic for ConvoViewRecordLastMessage<'_> {
    type Output = ConvoViewRecordLastMessage<'static>;
    fn into_static(self) -> Self::Output {
        match self {
            ConvoViewRecordLastMessage::Unknown(v) => {
                ConvoViewRecordLastMessage::Unknown(v.into_static())
            }
        }
    }
}

#[jacquard_derive::open_union]
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(tag = "$type")]
#[serde(bound(deserialize = "'de: 'a"))]
pub enum ConvoViewRecordLastReaction<'a> {}
impl jacquard_common::IntoStatic for ConvoViewRecordLastReaction<'_> {
    type Output = ConvoViewRecordLastReaction<'static>;
    fn into_static(self) -> Self::Output {
        match self {
            ConvoViewRecordLastReaction::Unknown(v) => {
                ConvoViewRecordLastReaction::Unknown(v.into_static())
            }
        }
    }
}

impl jacquard_common::IntoStatic for ConvoView<'_> {
    type Output = ConvoView<'static>;
    fn into_static(self) -> Self::Output {
        ConvoView {
            id: self.id.into_static(),
            last_message: self.last_message.into_static(),
            last_reaction: self.last_reaction.into_static(),
            members: self.members.into_static(),
            muted: self.muted.into_static(),
            rev: self.rev.into_static(),
            status: self.status.into_static(),
            unread_count: self.unread_count.into_static(),
            extra_data: self.extra_data.into_static(),
        }
    }
}

#[jacquard_derive::lexicon]
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct DeletedMessageView<'a> {
    #[serde(borrow)]
    pub id: jacquard_common::CowStr<'a>,
    #[serde(borrow)]
    pub rev: jacquard_common::CowStr<'a>,
    #[serde(borrow)]
    pub sender: crate::chat_bsky::convo::MessageViewSender<'a>,
    pub sent_at: jacquard_common::types::string::Datetime,
}

impl jacquard_common::IntoStatic for DeletedMessageView<'_> {
    type Output = DeletedMessageView<'static>;
    fn into_static(self) -> Self::Output {
        DeletedMessageView {
            id: self.id.into_static(),
            rev: self.rev.into_static(),
            sender: self.sender.into_static(),
            sent_at: self.sent_at.into_static(),
            extra_data: self.extra_data.into_static(),
        }
    }
}

#[jacquard_derive::lexicon]
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct LogAcceptConvo<'a> {
    #[serde(borrow)]
    pub convo_id: jacquard_common::CowStr<'a>,
    #[serde(borrow)]
    pub rev: jacquard_common::CowStr<'a>,
}

impl jacquard_common::IntoStatic for LogAcceptConvo<'_> {
    type Output = LogAcceptConvo<'static>;
    fn into_static(self) -> Self::Output {
        LogAcceptConvo {
            convo_id: self.convo_id.into_static(),
            rev: self.rev.into_static(),
            extra_data: self.extra_data.into_static(),
        }
    }
}

#[jacquard_derive::lexicon]
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct LogAddReaction<'a> {
    #[serde(borrow)]
    pub convo_id: jacquard_common::CowStr<'a>,
    #[serde(borrow)]
    pub message: LogAddReactionRecordMessage<'a>,
    #[serde(borrow)]
    pub reaction: crate::chat_bsky::convo::ReactionView<'a>,
    #[serde(borrow)]
    pub rev: jacquard_common::CowStr<'a>,
}

#[jacquard_derive::open_union]
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(tag = "$type")]
#[serde(bound(deserialize = "'de: 'a"))]
pub enum LogAddReactionRecordMessage<'a> {}
impl jacquard_common::IntoStatic for LogAddReactionRecordMessage<'_> {
    type Output = LogAddReactionRecordMessage<'static>;
    fn into_static(self) -> Self::Output {
        match self {
            LogAddReactionRecordMessage::Unknown(v) => {
                LogAddReactionRecordMessage::Unknown(v.into_static())
            }
        }
    }
}

impl jacquard_common::IntoStatic for LogAddReaction<'_> {
    type Output = LogAddReaction<'static>;
    fn into_static(self) -> Self::Output {
        LogAddReaction {
            convo_id: self.convo_id.into_static(),
            message: self.message.into_static(),
            reaction: self.reaction.into_static(),
            rev: self.rev.into_static(),
            extra_data: self.extra_data.into_static(),
        }
    }
}

#[jacquard_derive::lexicon]
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct LogBeginConvo<'a> {
    #[serde(borrow)]
    pub convo_id: jacquard_common::CowStr<'a>,
    #[serde(borrow)]
    pub rev: jacquard_common::CowStr<'a>,
}

impl jacquard_common::IntoStatic for LogBeginConvo<'_> {
    type Output = LogBeginConvo<'static>;
    fn into_static(self) -> Self::Output {
        LogBeginConvo {
            convo_id: self.convo_id.into_static(),
            rev: self.rev.into_static(),
            extra_data: self.extra_data.into_static(),
        }
    }
}

#[jacquard_derive::lexicon]
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct LogCreateMessage<'a> {
    #[serde(borrow)]
    pub convo_id: jacquard_common::CowStr<'a>,
    #[serde(borrow)]
    pub message: LogCreateMessageRecordMessage<'a>,
    #[serde(borrow)]
    pub rev: jacquard_common::CowStr<'a>,
}

#[jacquard_derive::open_union]
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(tag = "$type")]
#[serde(bound(deserialize = "'de: 'a"))]
pub enum LogCreateMessageRecordMessage<'a> {}
impl jacquard_common::IntoStatic for LogCreateMessageRecordMessage<'_> {
    type Output = LogCreateMessageRecordMessage<'static>;
    fn into_static(self) -> Self::Output {
        match self {
            LogCreateMessageRecordMessage::Unknown(v) => {
                LogCreateMessageRecordMessage::Unknown(v.into_static())
            }
        }
    }
}

impl jacquard_common::IntoStatic for LogCreateMessage<'_> {
    type Output = LogCreateMessage<'static>;
    fn into_static(self) -> Self::Output {
        LogCreateMessage {
            convo_id: self.convo_id.into_static(),
            message: self.message.into_static(),
            rev: self.rev.into_static(),
            extra_data: self.extra_data.into_static(),
        }
    }
}

#[jacquard_derive::lexicon]
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct LogDeleteMessage<'a> {
    #[serde(borrow)]
    pub convo_id: jacquard_common::CowStr<'a>,
    #[serde(borrow)]
    pub message: LogDeleteMessageRecordMessage<'a>,
    #[serde(borrow)]
    pub rev: jacquard_common::CowStr<'a>,
}

#[jacquard_derive::open_union]
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(tag = "$type")]
#[serde(bound(deserialize = "'de: 'a"))]
pub enum LogDeleteMessageRecordMessage<'a> {}
impl jacquard_common::IntoStatic for LogDeleteMessageRecordMessage<'_> {
    type Output = LogDeleteMessageRecordMessage<'static>;
    fn into_static(self) -> Self::Output {
        match self {
            LogDeleteMessageRecordMessage::Unknown(v) => {
                LogDeleteMessageRecordMessage::Unknown(v.into_static())
            }
        }
    }
}

impl jacquard_common::IntoStatic for LogDeleteMessage<'_> {
    type Output = LogDeleteMessage<'static>;
    fn into_static(self) -> Self::Output {
        LogDeleteMessage {
            convo_id: self.convo_id.into_static(),
            message: self.message.into_static(),
            rev: self.rev.into_static(),
            extra_data: self.extra_data.into_static(),
        }
    }
}

#[jacquard_derive::lexicon]
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct LogLeaveConvo<'a> {
    #[serde(borrow)]
    pub convo_id: jacquard_common::CowStr<'a>,
    #[serde(borrow)]
    pub rev: jacquard_common::CowStr<'a>,
}

impl jacquard_common::IntoStatic for LogLeaveConvo<'_> {
    type Output = LogLeaveConvo<'static>;
    fn into_static(self) -> Self::Output {
        LogLeaveConvo {
            convo_id: self.convo_id.into_static(),
            rev: self.rev.into_static(),
            extra_data: self.extra_data.into_static(),
        }
    }
}

#[jacquard_derive::lexicon]
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct LogMuteConvo<'a> {
    #[serde(borrow)]
    pub convo_id: jacquard_common::CowStr<'a>,
    #[serde(borrow)]
    pub rev: jacquard_common::CowStr<'a>,
}

impl jacquard_common::IntoStatic for LogMuteConvo<'_> {
    type Output = LogMuteConvo<'static>;
    fn into_static(self) -> Self::Output {
        LogMuteConvo {
            convo_id: self.convo_id.into_static(),
            rev: self.rev.into_static(),
            extra_data: self.extra_data.into_static(),
        }
    }
}

#[jacquard_derive::lexicon]
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct LogReadMessage<'a> {
    #[serde(borrow)]
    pub convo_id: jacquard_common::CowStr<'a>,
    #[serde(borrow)]
    pub message: LogReadMessageRecordMessage<'a>,
    #[serde(borrow)]
    pub rev: jacquard_common::CowStr<'a>,
}

#[jacquard_derive::open_union]
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(tag = "$type")]
#[serde(bound(deserialize = "'de: 'a"))]
pub enum LogReadMessageRecordMessage<'a> {}
impl jacquard_common::IntoStatic for LogReadMessageRecordMessage<'_> {
    type Output = LogReadMessageRecordMessage<'static>;
    fn into_static(self) -> Self::Output {
        match self {
            LogReadMessageRecordMessage::Unknown(v) => {
                LogReadMessageRecordMessage::Unknown(v.into_static())
            }
        }
    }
}

impl jacquard_common::IntoStatic for LogReadMessage<'_> {
    type Output = LogReadMessage<'static>;
    fn into_static(self) -> Self::Output {
        LogReadMessage {
            convo_id: self.convo_id.into_static(),
            message: self.message.into_static(),
            rev: self.rev.into_static(),
            extra_data: self.extra_data.into_static(),
        }
    }
}

#[jacquard_derive::lexicon]
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct LogRemoveReaction<'a> {
    #[serde(borrow)]
    pub convo_id: jacquard_common::CowStr<'a>,
    #[serde(borrow)]
    pub message: LogRemoveReactionRecordMessage<'a>,
    #[serde(borrow)]
    pub reaction: crate::chat_bsky::convo::ReactionView<'a>,
    #[serde(borrow)]
    pub rev: jacquard_common::CowStr<'a>,
}

#[jacquard_derive::open_union]
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(tag = "$type")]
#[serde(bound(deserialize = "'de: 'a"))]
pub enum LogRemoveReactionRecordMessage<'a> {}
impl jacquard_common::IntoStatic for LogRemoveReactionRecordMessage<'_> {
    type Output = LogRemoveReactionRecordMessage<'static>;
    fn into_static(self) -> Self::Output {
        match self {
            LogRemoveReactionRecordMessage::Unknown(v) => {
                LogRemoveReactionRecordMessage::Unknown(v.into_static())
            }
        }
    }
}

impl jacquard_common::IntoStatic for LogRemoveReaction<'_> {
    type Output = LogRemoveReaction<'static>;
    fn into_static(self) -> Self::Output {
        LogRemoveReaction {
            convo_id: self.convo_id.into_static(),
            message: self.message.into_static(),
            reaction: self.reaction.into_static(),
            rev: self.rev.into_static(),
            extra_data: self.extra_data.into_static(),
        }
    }
}

#[jacquard_derive::lexicon]
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct LogUnmuteConvo<'a> {
    #[serde(borrow)]
    pub convo_id: jacquard_common::CowStr<'a>,
    #[serde(borrow)]
    pub rev: jacquard_common::CowStr<'a>,
}

impl jacquard_common::IntoStatic for LogUnmuteConvo<'_> {
    type Output = LogUnmuteConvo<'static>;
    fn into_static(self) -> Self::Output {
        LogUnmuteConvo {
            convo_id: self.convo_id.into_static(),
            rev: self.rev.into_static(),
            extra_data: self.extra_data.into_static(),
        }
    }
}

#[jacquard_derive::lexicon]
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct MessageAndReactionView<'a> {
    #[serde(borrow)]
    pub message: crate::chat_bsky::convo::MessageView<'a>,
    #[serde(borrow)]
    pub reaction: crate::chat_bsky::convo::ReactionView<'a>,
}

impl jacquard_common::IntoStatic for MessageAndReactionView<'_> {
    type Output = MessageAndReactionView<'static>;
    fn into_static(self) -> Self::Output {
        MessageAndReactionView {
            message: self.message.into_static(),
            reaction: self.reaction.into_static(),
            extra_data: self.extra_data.into_static(),
        }
    }
}

#[jacquard_derive::lexicon]
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct MessageInput<'a> {
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub embed: std::option::Option<MessageInputRecordEmbed<'a>>,
    ///Annotations of text (mentions, URLs, hashtags, etc)
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub facets: std::option::Option<Vec<crate::app_bsky::richtext::facet::Facet<'a>>>,
    #[serde(borrow)]
    pub text: jacquard_common::CowStr<'a>,
}

#[jacquard_derive::open_union]
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(tag = "$type")]
#[serde(bound(deserialize = "'de: 'a"))]
pub enum MessageInputRecordEmbed<'a> {
    #[serde(rename = "app.bsky.embed.record")]
    Record(Box<crate::app_bsky::embed::record::Record<'a>>),
}

impl jacquard_common::IntoStatic for MessageInputRecordEmbed<'_> {
    type Output = MessageInputRecordEmbed<'static>;
    fn into_static(self) -> Self::Output {
        match self {
            MessageInputRecordEmbed::Record(v) => {
                MessageInputRecordEmbed::Record(v.into_static())
            }
            MessageInputRecordEmbed::Unknown(v) => {
                MessageInputRecordEmbed::Unknown(v.into_static())
            }
        }
    }
}

impl jacquard_common::IntoStatic for MessageInput<'_> {
    type Output = MessageInput<'static>;
    fn into_static(self) -> Self::Output {
        MessageInput {
            embed: self.embed.into_static(),
            facets: self.facets.into_static(),
            text: self.text.into_static(),
            extra_data: self.extra_data.into_static(),
        }
    }
}

#[jacquard_derive::lexicon]
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct MessageRef<'a> {
    #[serde(borrow)]
    pub convo_id: jacquard_common::CowStr<'a>,
    #[serde(borrow)]
    pub did: jacquard_common::types::string::Did<'a>,
    #[serde(borrow)]
    pub message_id: jacquard_common::CowStr<'a>,
}

impl jacquard_common::IntoStatic for MessageRef<'_> {
    type Output = MessageRef<'static>;
    fn into_static(self) -> Self::Output {
        MessageRef {
            convo_id: self.convo_id.into_static(),
            did: self.did.into_static(),
            message_id: self.message_id.into_static(),
            extra_data: self.extra_data.into_static(),
        }
    }
}

#[jacquard_derive::lexicon]
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct MessageView<'a> {
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub embed: std::option::Option<MessageViewRecordEmbed<'a>>,
    ///Annotations of text (mentions, URLs, hashtags, etc)
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub facets: std::option::Option<Vec<crate::app_bsky::richtext::facet::Facet<'a>>>,
    #[serde(borrow)]
    pub id: jacquard_common::CowStr<'a>,
    ///Reactions to this message, in ascending order of creation time.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub reactions: std::option::Option<Vec<crate::chat_bsky::convo::ReactionView<'a>>>,
    #[serde(borrow)]
    pub rev: jacquard_common::CowStr<'a>,
    #[serde(borrow)]
    pub sender: crate::chat_bsky::convo::MessageViewSender<'a>,
    pub sent_at: jacquard_common::types::string::Datetime,
    #[serde(borrow)]
    pub text: jacquard_common::CowStr<'a>,
}

#[jacquard_derive::open_union]
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(tag = "$type")]
#[serde(bound(deserialize = "'de: 'a"))]
pub enum MessageViewRecordEmbed<'a> {
    #[serde(rename = "app.bsky.embed.record#view")]
    RecordView(Box<crate::app_bsky::embed::record::View<'a>>),
}

impl jacquard_common::IntoStatic for MessageViewRecordEmbed<'_> {
    type Output = MessageViewRecordEmbed<'static>;
    fn into_static(self) -> Self::Output {
        match self {
            MessageViewRecordEmbed::RecordView(v) => {
                MessageViewRecordEmbed::RecordView(v.into_static())
            }
            MessageViewRecordEmbed::Unknown(v) => {
                MessageViewRecordEmbed::Unknown(v.into_static())
            }
        }
    }
}

impl jacquard_common::IntoStatic for MessageView<'_> {
    type Output = MessageView<'static>;
    fn into_static(self) -> Self::Output {
        MessageView {
            embed: self.embed.into_static(),
            facets: self.facets.into_static(),
            id: self.id.into_static(),
            reactions: self.reactions.into_static(),
            rev: self.rev.into_static(),
            sender: self.sender.into_static(),
            sent_at: self.sent_at.into_static(),
            text: self.text.into_static(),
            extra_data: self.extra_data.into_static(),
        }
    }
}

#[jacquard_derive::lexicon]
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct MessageViewSender<'a> {
    #[serde(borrow)]
    pub did: jacquard_common::types::string::Did<'a>,
}

impl jacquard_common::IntoStatic for MessageViewSender<'_> {
    type Output = MessageViewSender<'static>;
    fn into_static(self) -> Self::Output {
        MessageViewSender {
            did: self.did.into_static(),
            extra_data: self.extra_data.into_static(),
        }
    }
}

#[jacquard_derive::lexicon]
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct ReactionView<'a> {
    pub created_at: jacquard_common::types::string::Datetime,
    #[serde(borrow)]
    pub sender: crate::chat_bsky::convo::ReactionViewSender<'a>,
    #[serde(borrow)]
    pub value: jacquard_common::CowStr<'a>,
}

impl jacquard_common::IntoStatic for ReactionView<'_> {
    type Output = ReactionView<'static>;
    fn into_static(self) -> Self::Output {
        ReactionView {
            created_at: self.created_at.into_static(),
            sender: self.sender.into_static(),
            value: self.value.into_static(),
            extra_data: self.extra_data.into_static(),
        }
    }
}

#[jacquard_derive::lexicon]
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct ReactionViewSender<'a> {
    #[serde(borrow)]
    pub did: jacquard_common::types::string::Did<'a>,
}

impl jacquard_common::IntoStatic for ReactionViewSender<'_> {
    type Output = ReactionViewSender<'static>;
    fn into_static(self) -> Self::Output {
        ReactionViewSender {
            did: self.did.into_static(),
            extra_data: self.extra_data.into_static(),
        }
    }
}