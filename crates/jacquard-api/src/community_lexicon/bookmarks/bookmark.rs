// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: community.lexicon.bookmarks.bookmark
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

/// Record bookmarking a link to come back to later.
#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic,
    bon::Builder
)]
#[serde(rename_all = "camelCase")]
pub struct Bookmark<'a> {
    pub created_at: jacquard_common::types::string::Datetime,
    #[serde(borrow)]
    pub subject: jacquard_common::types::string::Uri<'a>,
    /// Tags for content the bookmark may be related to, for example 'news' or 'funny videos'
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub tags: Option<Vec<jacquard_common::CowStr<'a>>>,
}

/// Typed wrapper for GetRecord response with this collection's record type.
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
pub struct BookmarkGetRecordOutput<'a> {
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub cid: std::option::Option<jacquard_common::types::string::Cid<'a>>,
    #[serde(borrow)]
    pub uri: jacquard_common::types::string::AtUri<'a>,
    #[serde(borrow)]
    pub value: Bookmark<'a>,
}

/// Marker type for deserializing records from this collection.
pub struct BookmarkRecord;
impl jacquard_common::xrpc::XrpcResp for BookmarkRecord {
    const NSID: &'static str = "community.lexicon.bookmarks.bookmark";
    const ENCODING: &'static str = "application/json";
    type Output<'de> = BookmarkGetRecordOutput<'de>;
    type Err<'de> = jacquard_common::types::collection::RecordError<'de>;
}

impl jacquard_common::types::collection::Collection for Bookmark<'_> {
    const NSID: &'static str = "community.lexicon.bookmarks.bookmark";
    type Record = BookmarkRecord;
}

impl From<BookmarkGetRecordOutput<'_>> for Bookmark<'_> {
    fn from(output: BookmarkGetRecordOutput<'_>) -> Self {
        use jacquard_common::IntoStatic;
        output.value.into_static()
    }
}