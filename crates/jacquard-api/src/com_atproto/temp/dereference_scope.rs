// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: com.atproto.temp.dereferenceScope
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    bon::Builder
)]
#[builder(start_fn = new)]
#[serde(rename_all = "camelCase")]
pub struct DereferenceScope<'a> {
    #[serde(borrow)]
    #[builder(into)]
    pub scope: jacquard_common::CowStr<'a>,
}

impl jacquard_common::IntoStatic for DereferenceScope<'_> {
    type Output = DereferenceScope<'static>;
    fn into_static(self) -> Self::Output {
        DereferenceScope {
            scope: self.scope.into_static(),
        }
    }
}

#[jacquard_derive::lexicon]
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct DereferenceScopeOutput<'a> {
    ///The full oauth permission scope
    #[serde(borrow)]
    pub scope: jacquard_common::CowStr<'a>,
}

impl jacquard_common::IntoStatic for DereferenceScopeOutput<'_> {
    type Output = DereferenceScopeOutput<'static>;
    fn into_static(self) -> Self::Output {
        DereferenceScopeOutput {
            scope: self.scope.into_static(),
            extra_data: self.extra_data.into_static(),
        }
    }
}

#[jacquard_derive::open_union]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    thiserror::Error,
    miette::Diagnostic
)]
#[serde(tag = "error", content = "message")]
#[serde(bound(deserialize = "'de: 'a"))]
pub enum DereferenceScopeError<'a> {
    ///An invalid scope reference was provided.
    #[serde(rename = "InvalidScopeReference")]
    InvalidScopeReference(std::option::Option<String>),
}

impl std::fmt::Display for DereferenceScopeError<'_> {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Self::InvalidScopeReference(msg) => {
                write!(f, "InvalidScopeReference")?;
                if let Some(msg) = msg {
                    write!(f, ": {}", msg)?;
                }
                Ok(())
            }
            Self::Unknown(err) => write!(f, "Unknown error: {:?}", err),
        }
    }
}

impl jacquard_common::IntoStatic for DereferenceScopeError<'_> {
    type Output = DereferenceScopeError<'static>;
    fn into_static(self) -> Self::Output {
        match self {
            DereferenceScopeError::InvalidScopeReference(v) => {
                DereferenceScopeError::InvalidScopeReference(v.into_static())
            }
            DereferenceScopeError::Unknown(v) => {
                DereferenceScopeError::Unknown(v.into_static())
            }
        }
    }
}

///Response type for
///com.atproto.temp.dereferenceScope
pub struct DereferenceScopeResponse;
impl jacquard_common::xrpc::XrpcResp for DereferenceScopeResponse {
    const NSID: &'static str = "com.atproto.temp.dereferenceScope";
    const ENCODING: &'static str = "application/json";
    type Output<'de> = DereferenceScopeOutput<'de>;
    type Err<'de> = DereferenceScopeError<'de>;
}

impl<'de> jacquard_common::xrpc::XrpcRequest<'de> for DereferenceScope<'de> {
    const NSID: &'static str = "com.atproto.temp.dereferenceScope";
    const METHOD: jacquard_common::xrpc::XrpcMethod = jacquard_common::xrpc::XrpcMethod::Query;
    type Response = DereferenceScopeResponse;
}