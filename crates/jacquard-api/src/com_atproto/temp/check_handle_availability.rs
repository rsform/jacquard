// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: com.atproto.temp.checkHandleAvailability
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    bon::Builder
)]
#[builder(start_fn = new)]
#[serde(rename_all = "camelCase")]
pub struct CheckHandleAvailability<'a> {
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub birth_date: std::option::Option<jacquard_common::types::string::Datetime>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    #[builder(into)]
    pub email: std::option::Option<jacquard_common::CowStr<'a>>,
    #[serde(borrow)]
    pub handle: jacquard_common::types::string::Handle<'a>,
}

impl jacquard_common::IntoStatic for CheckHandleAvailability<'_> {
    type Output = CheckHandleAvailability<'static>;
    fn into_static(self) -> Self::Output {
        CheckHandleAvailability {
            birth_date: self.birth_date.into_static(),
            email: self.email.into_static(),
            handle: self.handle.into_static(),
        }
    }
}

#[jacquard_derive::lexicon]
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct CheckHandleAvailabilityOutput<'a> {
    ///Echo of the input handle.
    #[serde(borrow)]
    pub handle: jacquard_common::types::string::Handle<'a>,
    #[serde(borrow)]
    pub result: CheckHandleAvailabilityOutputRecordResult<'a>,
}

#[jacquard_derive::open_union]
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(tag = "$type")]
#[serde(bound(deserialize = "'de: 'a"))]
pub enum CheckHandleAvailabilityOutputRecordResult<'a> {}
impl jacquard_common::IntoStatic for CheckHandleAvailabilityOutputRecordResult<'_> {
    type Output = CheckHandleAvailabilityOutputRecordResult<'static>;
    fn into_static(self) -> Self::Output {
        match self {
            CheckHandleAvailabilityOutputRecordResult::Unknown(v) => {
                CheckHandleAvailabilityOutputRecordResult::Unknown(v.into_static())
            }
        }
    }
}

impl jacquard_common::IntoStatic for CheckHandleAvailabilityOutput<'_> {
    type Output = CheckHandleAvailabilityOutput<'static>;
    fn into_static(self) -> Self::Output {
        CheckHandleAvailabilityOutput {
            handle: self.handle.into_static(),
            result: self.result.into_static(),
            extra_data: self.extra_data.into_static(),
        }
    }
}

#[jacquard_derive::open_union]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    thiserror::Error,
    miette::Diagnostic
)]
#[serde(tag = "error", content = "message")]
#[serde(bound(deserialize = "'de: 'a"))]
pub enum CheckHandleAvailabilityError<'a> {
    ///An invalid email was provided.
    #[serde(rename = "InvalidEmail")]
    InvalidEmail(std::option::Option<String>),
}

impl std::fmt::Display for CheckHandleAvailabilityError<'_> {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Self::InvalidEmail(msg) => {
                write!(f, "InvalidEmail")?;
                if let Some(msg) = msg {
                    write!(f, ": {}", msg)?;
                }
                Ok(())
            }
            Self::Unknown(err) => write!(f, "Unknown error: {:?}", err),
        }
    }
}

impl jacquard_common::IntoStatic for CheckHandleAvailabilityError<'_> {
    type Output = CheckHandleAvailabilityError<'static>;
    fn into_static(self) -> Self::Output {
        match self {
            CheckHandleAvailabilityError::InvalidEmail(v) => {
                CheckHandleAvailabilityError::InvalidEmail(v.into_static())
            }
            CheckHandleAvailabilityError::Unknown(v) => {
                CheckHandleAvailabilityError::Unknown(v.into_static())
            }
        }
    }
}

///Response type for
///com.atproto.temp.checkHandleAvailability
pub struct CheckHandleAvailabilityResponse;
impl jacquard_common::xrpc::XrpcResp for CheckHandleAvailabilityResponse {
    const NSID: &'static str = "com.atproto.temp.checkHandleAvailability";
    const ENCODING: &'static str = "application/json";
    type Output<'de> = CheckHandleAvailabilityOutput<'de>;
    type Err<'de> = CheckHandleAvailabilityError<'de>;
}

impl<'de> jacquard_common::xrpc::XrpcRequest<'de> for CheckHandleAvailability<'de> {
    const NSID: &'static str = "com.atproto.temp.checkHandleAvailability";
    const METHOD: jacquard_common::xrpc::XrpcMethod = jacquard_common::xrpc::XrpcMethod::Query;
    type Response = CheckHandleAvailabilityResponse;
}

///Indicates the provided handle is available.
#[jacquard_derive::lexicon]
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct ResultAvailable<'a> {}
impl jacquard_common::IntoStatic for ResultAvailable<'_> {
    type Output = ResultAvailable<'static>;
    fn into_static(self) -> Self::Output {
        ResultAvailable {
            extra_data: self.extra_data.into_static(),
        }
    }
}

///Indicates the provided handle is unavailable and gives suggestions of available handles.
#[jacquard_derive::lexicon]
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct ResultUnavailable<'a> {
    ///List of suggested handles based on the provided inputs.
    #[serde(borrow)]
    pub suggestions: Vec<
        crate::com_atproto::temp::check_handle_availability::Suggestion<'a>,
    >,
}

impl jacquard_common::IntoStatic for ResultUnavailable<'_> {
    type Output = ResultUnavailable<'static>;
    fn into_static(self) -> Self::Output {
        ResultUnavailable {
            suggestions: self.suggestions.into_static(),
            extra_data: self.extra_data.into_static(),
        }
    }
}

#[jacquard_derive::lexicon]
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct Suggestion<'a> {
    #[serde(borrow)]
    pub handle: jacquard_common::types::string::Handle<'a>,
    ///Method used to build this suggestion. Should be considered opaque to clients. Can be used for metrics.
    #[serde(borrow)]
    pub method: jacquard_common::CowStr<'a>,
}

impl jacquard_common::IntoStatic for Suggestion<'_> {
    type Output = Suggestion<'static>;
    fn into_static(self) -> Self::Output {
        Suggestion {
            handle: self.handle.into_static(),
            method: self.method.into_static(),
            extra_data: self.extra_data.into_static(),
        }
    }
}