// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: com.atproto.temp.addReservedHandle
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

#[jacquard_derive::lexicon]
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq, bon::Builder)]
#[serde(rename_all = "camelCase")]
#[builder(start_fn = new)]
pub struct AddReservedHandle<'a> {
    #[serde(borrow)]
    #[builder(into)]
    pub handle: jacquard_common::CowStr<'a>,
    #[serde(flatten)]
    #[serde(borrow)]
    #[builder(default)]
    pub extra_data: ::std::collections::BTreeMap<
        ::jacquard_common::smol_str::SmolStr,
        ::jacquard_common::types::value::Data<'a>,
    >,
}

impl jacquard_common::IntoStatic for AddReservedHandle<'_> {
    type Output = AddReservedHandle<'static>;
    fn into_static(self) -> Self::Output {
        AddReservedHandle {
            handle: self.handle.into_static(),
            extra_data: self.extra_data.into_static(),
        }
    }
}

#[jacquard_derive::lexicon]
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct AddReservedHandleOutput<'a> {}
impl jacquard_common::IntoStatic for AddReservedHandleOutput<'_> {
    type Output = AddReservedHandleOutput<'static>;
    fn into_static(self) -> Self::Output {
        AddReservedHandleOutput {
            extra_data: self.extra_data.into_static(),
        }
    }
}

///Response type for
///com.atproto.temp.addReservedHandle
pub struct AddReservedHandleResponse;
impl<'de> jacquard_common::types::xrpc::XrpcResp<'de> for AddReservedHandleResponse {
    const ENCODING: &'static str = "application/json";
    type Output = AddReservedHandleOutput<'de>;
    type Err = jacquard_common::types::xrpc::GenericError<'de>;
}

impl<'de> jacquard_common::types::xrpc::XrpcRequest<'de> for AddReservedHandle<'de> {
    const NSID: &'static str = "com.atproto.temp.addReservedHandle";
    const METHOD: jacquard_common::types::xrpc::XrpcMethod =
        jacquard_common::types::xrpc::XrpcMethod::Procedure("application/json");
    type Response<'de1> = AddReservedHandleResponse;
}
