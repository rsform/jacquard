// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: com.atproto.server.listAppPasswords
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
pub struct AppPassword<'a> {
    pub created_at: jacquard_common::types::string::Datetime,
    #[serde(borrow)]
    pub name: jacquard_common::CowStr<'a>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub privileged: std::option::Option<bool>,
}

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
pub struct ListAppPasswordsOutput<'a> {
    #[serde(borrow)]
    pub passwords: Vec<jacquard_common::types::value::Data<'a>>,
}

#[jacquard_derive::open_union]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    thiserror::Error,
    miette::Diagnostic,
    jacquard_derive::IntoStatic
)]
#[serde(tag = "error", content = "message")]
#[serde(bound(deserialize = "'de: 'a"))]
pub enum ListAppPasswordsError<'a> {
    #[serde(rename = "AccountTakedown")]
    AccountTakedown(std::option::Option<String>),
}

impl std::fmt::Display for ListAppPasswordsError<'_> {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Self::AccountTakedown(msg) => {
                write!(f, "AccountTakedown")?;
                if let Some(msg) = msg {
                    write!(f, ": {}", msg)?;
                }
                Ok(())
            }
            Self::Unknown(err) => write!(f, "Unknown error: {:?}", err),
        }
    }
}

/// XRPC request marker type
#[derive(
    Debug,
    Clone,
    Copy,
    PartialEq,
    Eq,
    serde::Serialize,
    serde::Deserialize,
    jacquard_derive::IntoStatic
)]
pub struct ListAppPasswords;
///Response type for
///com.atproto.server.listAppPasswords
pub struct ListAppPasswordsResponse;
impl jacquard_common::xrpc::XrpcResp for ListAppPasswordsResponse {
    const NSID: &'static str = "com.atproto.server.listAppPasswords";
    const ENCODING: &'static str = "application/json";
    type Output<'de> = ListAppPasswordsOutput<'de>;
    type Err<'de> = ListAppPasswordsError<'de>;
}

impl<'de> jacquard_common::xrpc::XrpcRequest<'de> for ListAppPasswords {
    const NSID: &'static str = "com.atproto.server.listAppPasswords";
    const METHOD: jacquard_common::xrpc::XrpcMethod = jacquard_common::xrpc::XrpcMethod::Query;
    type Response = ListAppPasswordsResponse;
}

///Endpoint type for
///com.atproto.server.listAppPasswords
pub struct ListAppPasswordsRequest;
impl jacquard_common::xrpc::XrpcEndpoint for ListAppPasswordsRequest {
    const PATH: &'static str = "/xrpc/com.atproto.server.listAppPasswords";
    const METHOD: jacquard_common::xrpc::XrpcMethod = jacquard_common::xrpc::XrpcMethod::Query;
    type Request<'de> = ListAppPasswords;
    type Response = ListAppPasswordsResponse;
}