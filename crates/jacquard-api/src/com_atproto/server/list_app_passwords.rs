// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: com.atproto.server.listAppPasswords
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

#[jacquard_derive::lexicon]
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct AppPassword<'a> {
    pub created_at: jacquard_common::types::string::Datetime,
    #[serde(borrow)]
    pub name: jacquard_common::CowStr<'a>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub privileged: std::option::Option<bool>,
}

impl jacquard_common::IntoStatic for AppPassword<'_> {
    type Output = AppPassword<'static>;
    fn into_static(self) -> Self::Output {
        AppPassword {
            created_at: self.created_at.into_static(),
            name: self.name.into_static(),
            privileged: self.privileged.into_static(),
            extra_data: self.extra_data.into_static(),
        }
    }
}

#[jacquard_derive::lexicon]
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct ListAppPasswordsOutput<'a> {
    #[serde(borrow)]
    pub passwords: Vec<jacquard_common::types::value::Data<'a>>,
}

impl jacquard_common::IntoStatic for ListAppPasswordsOutput<'_> {
    type Output = ListAppPasswordsOutput<'static>;
    fn into_static(self) -> Self::Output {
        ListAppPasswordsOutput {
            passwords: self.passwords.into_static(),
            extra_data: self.extra_data.into_static(),
        }
    }
}

#[jacquard_derive::open_union]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    thiserror::Error,
    miette::Diagnostic
)]
#[serde(tag = "error", content = "message")]
#[serde(bound(deserialize = "'de: 'a"))]
pub enum ListAppPasswordsError<'a> {
    #[serde(rename = "AccountTakedown")]
    AccountTakedown(std::option::Option<String>),
}

impl std::fmt::Display for ListAppPasswordsError<'_> {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Self::AccountTakedown(msg) => {
                write!(f, "AccountTakedown")?;
                if let Some(msg) = msg {
                    write!(f, ": {}", msg)?;
                }
                Ok(())
            }
            Self::Unknown(err) => write!(f, "Unknown error: {:?}", err),
        }
    }
}

impl jacquard_common::IntoStatic for ListAppPasswordsError<'_> {
    type Output = ListAppPasswordsError<'static>;
    fn into_static(self) -> Self::Output {
        match self {
            ListAppPasswordsError::AccountTakedown(v) => {
                ListAppPasswordsError::AccountTakedown(v.into_static())
            }
            ListAppPasswordsError::Unknown(v) => {
                ListAppPasswordsError::Unknown(v.into_static())
            }
        }
    }
}

/// XRPC request marker type
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct ListAppPasswords;
impl jacquard_common::types::xrpc::XrpcRequest for ListAppPasswords {
    const NSID: &'static str = "com.atproto.server.listAppPasswords";
    const METHOD: jacquard_common::types::xrpc::XrpcMethod = jacquard_common::types::xrpc::XrpcMethod::Query;
    const OUTPUT_ENCODING: &'static str = "application/json";
    type Output<'de> = ListAppPasswordsOutput<'de>;
    type Err<'de> = ListAppPasswordsError<'de>;
}