// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: com.atproto.server.confirmEmail
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

#[jacquard_derive::lexicon]
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq, bon::Builder)]
#[serde(rename_all = "camelCase")]
#[builder(start_fn = new)]
pub struct ConfirmEmail<'a> {
    #[serde(borrow)]
    #[builder(into)]
    pub email: jacquard_common::CowStr<'a>,
    #[serde(borrow)]
    #[builder(into)]
    pub token: jacquard_common::CowStr<'a>,
    #[serde(flatten)]
    #[serde(borrow)]
    #[builder(default)]
    pub extra_data: ::std::collections::BTreeMap<
        ::jacquard_common::smol_str::SmolStr,
        ::jacquard_common::types::value::Data<'a>,
    >,
}

impl jacquard_common::IntoStatic for ConfirmEmail<'_> {
    type Output = ConfirmEmail<'static>;
    fn into_static(self) -> Self::Output {
        ConfirmEmail {
            email: self.email.into_static(),
            token: self.token.into_static(),
            extra_data: self.extra_data.into_static(),
        }
    }
}

#[jacquard_derive::open_union]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    thiserror::Error,
    miette::Diagnostic,
)]
#[serde(tag = "error", content = "message")]
#[serde(bound(deserialize = "'de: 'a"))]
pub enum ConfirmEmailError<'a> {
    #[serde(rename = "AccountNotFound")]
    AccountNotFound(std::option::Option<String>),
    #[serde(rename = "ExpiredToken")]
    ExpiredToken(std::option::Option<String>),
    #[serde(rename = "InvalidToken")]
    InvalidToken(std::option::Option<String>),
    #[serde(rename = "InvalidEmail")]
    InvalidEmail(std::option::Option<String>),
}

impl std::fmt::Display for ConfirmEmailError<'_> {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Self::AccountNotFound(msg) => {
                write!(f, "AccountNotFound")?;
                if let Some(msg) = msg {
                    write!(f, ": {}", msg)?;
                }
                Ok(())
            }
            Self::ExpiredToken(msg) => {
                write!(f, "ExpiredToken")?;
                if let Some(msg) = msg {
                    write!(f, ": {}", msg)?;
                }
                Ok(())
            }
            Self::InvalidToken(msg) => {
                write!(f, "InvalidToken")?;
                if let Some(msg) = msg {
                    write!(f, ": {}", msg)?;
                }
                Ok(())
            }
            Self::InvalidEmail(msg) => {
                write!(f, "InvalidEmail")?;
                if let Some(msg) = msg {
                    write!(f, ": {}", msg)?;
                }
                Ok(())
            }
            Self::Unknown(err) => write!(f, "Unknown error: {:?}", err),
        }
    }
}

impl jacquard_common::IntoStatic for ConfirmEmailError<'_> {
    type Output = ConfirmEmailError<'static>;
    fn into_static(self) -> Self::Output {
        match self {
            ConfirmEmailError::AccountNotFound(v) => {
                ConfirmEmailError::AccountNotFound(v.into_static())
            }
            ConfirmEmailError::ExpiredToken(v) => ConfirmEmailError::ExpiredToken(v.into_static()),
            ConfirmEmailError::InvalidToken(v) => ConfirmEmailError::InvalidToken(v.into_static()),
            ConfirmEmailError::InvalidEmail(v) => ConfirmEmailError::InvalidEmail(v.into_static()),
            ConfirmEmailError::Unknown(v) => ConfirmEmailError::Unknown(v.into_static()),
        }
    }
}

///Response type for
///com.atproto.server.confirmEmail
pub struct ConfirmEmailResponse;
impl<'de> jacquard_common::types::xrpc::XrpcResp<'de> for ConfirmEmailResponse {
    const ENCODING: &'static str = "application/json";
    type Output = ();
    type Err = ConfirmEmailError<'de>;
}

impl<'de> jacquard_common::types::xrpc::XrpcRequest<'de> for ConfirmEmail<'de> {
    const NSID: &'static str = "com.atproto.server.confirmEmail";
    const METHOD: jacquard_common::types::xrpc::XrpcMethod =
        jacquard_common::types::xrpc::XrpcMethod::Procedure("application/json");
    type Response<'de1> = ConfirmEmailResponse;
}
