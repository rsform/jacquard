// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: com.atproto.server.checkAccountStatus
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

#[jacquard_derive::lexicon]
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct CheckAccountStatusOutput<'a> {
    pub activated: bool,
    pub expected_blobs: i64,
    pub imported_blobs: i64,
    pub indexed_records: i64,
    pub private_state_values: i64,
    pub repo_blocks: i64,
    #[serde(borrow)]
    pub repo_commit: jacquard_common::types::string::Cid<'a>,
    #[serde(borrow)]
    pub repo_rev: jacquard_common::CowStr<'a>,
    pub valid_did: bool,
}

impl jacquard_common::IntoStatic for CheckAccountStatusOutput<'_> {
    type Output = CheckAccountStatusOutput<'static>;
    fn into_static(self) -> Self::Output {
        CheckAccountStatusOutput {
            activated: self.activated.into_static(),
            expected_blobs: self.expected_blobs.into_static(),
            imported_blobs: self.imported_blobs.into_static(),
            indexed_records: self.indexed_records.into_static(),
            private_state_values: self.private_state_values.into_static(),
            repo_blocks: self.repo_blocks.into_static(),
            repo_commit: self.repo_commit.into_static(),
            repo_rev: self.repo_rev.into_static(),
            valid_did: self.valid_did.into_static(),
            extra_data: self.extra_data.into_static(),
        }
    }
}

/// XRPC request marker type
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize, serde::Deserialize)]
pub struct CheckAccountStatus;
///Response type for
///com.atproto.server.checkAccountStatus
pub struct CheckAccountStatusResponse;
impl jacquard_common::xrpc::XrpcResp for CheckAccountStatusResponse {
    const NSID: &'static str = "com.atproto.server.checkAccountStatus";
    const ENCODING: &'static str = "application/json";
    type Output<'de> = CheckAccountStatusOutput<'de>;
    type Err<'de> = jacquard_common::xrpc::GenericError<'de>;
}

impl<'de> jacquard_common::xrpc::XrpcRequest<'de> for CheckAccountStatus {
    const NSID: &'static str = "com.atproto.server.checkAccountStatus";
    const METHOD: jacquard_common::xrpc::XrpcMethod = jacquard_common::xrpc::XrpcMethod::Query;
    type Response = CheckAccountStatusResponse;
}