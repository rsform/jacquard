// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: com.atproto.server.createInviteCode
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

#[jacquard_derive::lexicon]
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq, bon::Builder)]
#[serde(rename_all = "camelCase")]
#[builder(start_fn = new)]
pub struct CreateInviteCode<'a> {
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub for_account: std::option::Option<jacquard_common::types::string::Did<'a>>,
    pub use_count: i64,
    #[serde(flatten)]
    #[serde(borrow)]
    #[builder(default)]
    pub extra_data: ::std::collections::BTreeMap<
        ::jacquard_common::smol_str::SmolStr,
        ::jacquard_common::types::value::Data<'a>,
    >,
}

impl jacquard_common::IntoStatic for CreateInviteCode<'_> {
    type Output = CreateInviteCode<'static>;
    fn into_static(self) -> Self::Output {
        CreateInviteCode {
            for_account: self.for_account.into_static(),
            use_count: self.use_count.into_static(),
            extra_data: self.extra_data.into_static(),
        }
    }
}

#[jacquard_derive::lexicon]
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct CreateInviteCodeOutput<'a> {
    #[serde(borrow)]
    pub code: jacquard_common::CowStr<'a>,
}

impl jacquard_common::IntoStatic for CreateInviteCodeOutput<'_> {
    type Output = CreateInviteCodeOutput<'static>;
    fn into_static(self) -> Self::Output {
        CreateInviteCodeOutput {
            code: self.code.into_static(),
            extra_data: self.extra_data.into_static(),
        }
    }
}

///Response type for
///com.atproto.server.createInviteCode
pub struct CreateInviteCodeResponse;
impl<'de> jacquard_common::types::xrpc::XrpcResp<'de> for CreateInviteCodeResponse {
    const ENCODING: &'static str = "application/json";
    type Output = CreateInviteCodeOutput<'de>;
    type Err = jacquard_common::types::xrpc::GenericError<'de>;
}

impl<'de> jacquard_common::types::xrpc::XrpcRequest<'de> for CreateInviteCode<'de> {
    const NSID: &'static str = "com.atproto.server.createInviteCode";
    const METHOD: jacquard_common::types::xrpc::XrpcMethod =
        jacquard_common::types::xrpc::XrpcMethod::Procedure("application/json");
    type Response<'de1> = CreateInviteCodeResponse;
}
