// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: com.atproto.server.createAppPassword
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

#[jacquard_derive::lexicon]
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct AppPassword<'a> {
    pub created_at: jacquard_common::types::string::Datetime,
    #[serde(borrow)]
    pub name: jacquard_common::CowStr<'a>,
    #[serde(borrow)]
    pub password: jacquard_common::CowStr<'a>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub privileged: std::option::Option<bool>,
}

impl jacquard_common::IntoStatic for AppPassword<'_> {
    type Output = AppPassword<'static>;
    fn into_static(self) -> Self::Output {
        AppPassword {
            created_at: self.created_at.into_static(),
            name: self.name.into_static(),
            password: self.password.into_static(),
            privileged: self.privileged.into_static(),
            extra_data: self.extra_data.into_static(),
        }
    }
}

#[jacquard_derive::lexicon]
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct CreateAppPassword<'a> {
    ///A short name for the App Password, to help distinguish them.
    #[serde(borrow)]
    pub name: jacquard_common::CowStr<'a>,
    ///If an app password has 'privileged' access to possibly sensitive account state. Meant for use with trusted clients.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub privileged: std::option::Option<bool>,
}

impl jacquard_common::IntoStatic for CreateAppPassword<'_> {
    type Output = CreateAppPassword<'static>;
    fn into_static(self) -> Self::Output {
        CreateAppPassword {
            name: self.name.into_static(),
            privileged: self.privileged.into_static(),
            extra_data: self.extra_data.into_static(),
        }
    }
}

#[jacquard_derive::lexicon]
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct CreateAppPasswordOutput<'a> {
    #[serde(flatten)]
    #[serde(borrow)]
    pub value: jacquard_common::types::value::Data<'a>,
}

impl jacquard_common::IntoStatic for CreateAppPasswordOutput<'_> {
    type Output = CreateAppPasswordOutput<'static>;
    fn into_static(self) -> Self::Output {
        CreateAppPasswordOutput {
            value: self.value.into_static(),
            extra_data: self.extra_data.into_static(),
        }
    }
}

#[jacquard_derive::open_union]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    thiserror::Error,
    miette::Diagnostic
)]
#[serde(tag = "error", content = "message")]
#[serde(bound(deserialize = "'de: 'a"))]
pub enum CreateAppPasswordError<'a> {
    #[serde(rename = "AccountTakedown")]
    AccountTakedown(std::option::Option<String>),
}

impl std::fmt::Display for CreateAppPasswordError<'_> {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Self::AccountTakedown(msg) => {
                write!(f, "AccountTakedown")?;
                if let Some(msg) = msg {
                    write!(f, ": {}", msg)?;
                }
                Ok(())
            }
            Self::Unknown(err) => write!(f, "Unknown error: {:?}", err),
        }
    }
}

impl jacquard_common::IntoStatic for CreateAppPasswordError<'_> {
    type Output = CreateAppPasswordError<'static>;
    fn into_static(self) -> Self::Output {
        match self {
            CreateAppPasswordError::AccountTakedown(v) => {
                CreateAppPasswordError::AccountTakedown(v.into_static())
            }
            CreateAppPasswordError::Unknown(v) => {
                CreateAppPasswordError::Unknown(v.into_static())
            }
        }
    }
}

impl jacquard_common::types::xrpc::XrpcRequest for CreateAppPassword<'_> {
    const NSID: &'static str = "com.atproto.server.createAppPassword";
    const METHOD: jacquard_common::types::xrpc::XrpcMethod = jacquard_common::types::xrpc::XrpcMethod::Procedure(
        "application/json",
    );
    const OUTPUT_ENCODING: &'static str = "application/json";
    type Output<'de> = CreateAppPasswordOutput<'de>;
    type Err<'de> = CreateAppPasswordError<'de>;
}