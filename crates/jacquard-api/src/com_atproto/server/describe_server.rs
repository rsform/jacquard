// @generated by jacquard-lexicon. DO NOT EDIT.
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

#[jacquard_derive::lexicon]
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct Contact<'a> {
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub email: std::option::Option<jacquard_common::CowStr<'a>>,
}

#[jacquard_derive::lexicon]
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct Links<'a> {
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub privacy_policy: std::option::Option<jacquard_common::types::string::Uri<'a>>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub terms_of_service: std::option::Option<jacquard_common::types::string::Uri<'a>>,
}

#[jacquard_derive::lexicon]
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct DescribeServerOutput<'a> {
    ///List of domain suffixes that can be used in account handles.
    #[serde(borrow)]
    pub available_user_domains: Vec<jacquard_common::CowStr<'a>>,
    ///Contact information
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub contact: std::option::Option<jacquard_common::types::value::Data<'a>>,
    #[serde(borrow)]
    pub did: jacquard_common::types::string::Did<'a>,
    ///If true, an invite code must be supplied to create an account on this instance.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub invite_code_required: std::option::Option<bool>,
    ///URLs of service policy documents.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub links: std::option::Option<jacquard_common::types::value::Data<'a>>,
    ///If true, a phone verification token must be supplied to create an account on this instance.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub phone_verification_required: std::option::Option<bool>,
}