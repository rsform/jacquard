// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: com.atproto.server.reserveSigningKey
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    bon::Builder
)]
#[serde(rename_all = "camelCase")]
#[builder(start_fn = new)]
pub struct ReserveSigningKey<'a> {
    ///The DID to reserve a key for.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub did: std::option::Option<jacquard_common::types::string::Did<'a>>,
    #[serde(flatten)]
    #[serde(borrow)]
    #[builder(default)]
    pub extra_data: ::std::collections::BTreeMap<
        ::jacquard_common::smol_str::SmolStr,
        ::jacquard_common::types::value::Data<'a>,
    >,
}

impl jacquard_common::IntoStatic for ReserveSigningKey<'_> {
    type Output = ReserveSigningKey<'static>;
    fn into_static(self) -> Self::Output {
        ReserveSigningKey {
            did: self.did.into_static(),
            extra_data: self.extra_data.into_static(),
        }
    }
}

#[jacquard_derive::lexicon]
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct ReserveSigningKeyOutput<'a> {
    ///The public key for the reserved signing key, in did:key serialization.
    #[serde(borrow)]
    pub signing_key: jacquard_common::CowStr<'a>,
}

impl jacquard_common::IntoStatic for ReserveSigningKeyOutput<'_> {
    type Output = ReserveSigningKeyOutput<'static>;
    fn into_static(self) -> Self::Output {
        ReserveSigningKeyOutput {
            signing_key: self.signing_key.into_static(),
            extra_data: self.extra_data.into_static(),
        }
    }
}

impl<'de> jacquard_common::types::xrpc::XrpcRequest<'de> for ReserveSigningKey<'de> {
    const NSID: &'static str = "com.atproto.server.reserveSigningKey";
    const METHOD: jacquard_common::types::xrpc::XrpcMethod = jacquard_common::types::xrpc::XrpcMethod::Procedure(
        "application/json",
    );
    const OUTPUT_ENCODING: &'static str = "application/json";
    type Output = ReserveSigningKeyOutput<'de>;
    type Err = jacquard_common::types::xrpc::GenericError<'de>;
}