// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: com.atproto.server.getSession
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

#[jacquard_derive::lexicon]
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct GetSessionOutput<'a> {
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub active: std::option::Option<bool>,
    #[serde(borrow)]
    pub did: jacquard_common::types::string::Did<'a>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub did_doc: std::option::Option<jacquard_common::types::value::Data<'a>>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub email: std::option::Option<jacquard_common::CowStr<'a>>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub email_auth_factor: std::option::Option<bool>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub email_confirmed: std::option::Option<bool>,
    #[serde(borrow)]
    pub handle: jacquard_common::types::string::Handle<'a>,
    ///If active=false, this optional field indicates a possible reason for why the account is not active. If active=false and no status is supplied, then the host makes no claim for why the repository is no longer being hosted.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub status: std::option::Option<jacquard_common::CowStr<'a>>,
}

impl jacquard_common::IntoStatic for GetSessionOutput<'_> {
    type Output = GetSessionOutput<'static>;
    fn into_static(self) -> Self::Output {
        GetSessionOutput {
            active: self.active.into_static(),
            did: self.did.into_static(),
            did_doc: self.did_doc.into_static(),
            email: self.email.into_static(),
            email_auth_factor: self.email_auth_factor.into_static(),
            email_confirmed: self.email_confirmed.into_static(),
            handle: self.handle.into_static(),
            status: self.status.into_static(),
            extra_data: self.extra_data.into_static(),
        }
    }
}

/// XRPC request marker type
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize, serde::Deserialize)]
pub struct GetSession;
///Response type for
///com.atproto.server.getSession
pub struct GetSessionResponse;
impl jacquard_common::xrpc::XrpcResp for GetSessionResponse {
    const NSID: &'static str = "com.atproto.server.getSession";
    const ENCODING: &'static str = "application/json";
    type Output<'de> = GetSessionOutput<'de>;
    type Err<'de> = jacquard_common::xrpc::GenericError<'de>;
}

impl<'de> jacquard_common::xrpc::XrpcRequest<'de> for GetSession {
    const NSID: &'static str = "com.atproto.server.getSession";
    const METHOD: jacquard_common::xrpc::XrpcMethod = jacquard_common::xrpc::XrpcMethod::Query;
    type Response = GetSessionResponse;
}