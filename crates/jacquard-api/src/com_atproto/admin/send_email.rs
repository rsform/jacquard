// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: com.atproto.admin.sendEmail
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

#[jacquard_derive::lexicon]
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct SendEmail<'a> {
    ///Additional comment by the sender that won't be used in the email itself but helpful to provide more context for moderators/reviewers
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub comment: std::option::Option<jacquard_common::CowStr<'a>>,
    #[serde(borrow)]
    pub content: jacquard_common::CowStr<'a>,
    #[serde(borrow)]
    pub recipient_did: jacquard_common::types::string::Did<'a>,
    #[serde(borrow)]
    pub sender_did: jacquard_common::types::string::Did<'a>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub subject: std::option::Option<jacquard_common::CowStr<'a>>,
}

impl jacquard_common::IntoStatic for SendEmail<'_> {
    type Output = SendEmail<'static>;
    fn into_static(self) -> Self::Output {
        SendEmail {
            comment: self.comment.into_static(),
            content: self.content.into_static(),
            recipient_did: self.recipient_did.into_static(),
            sender_did: self.sender_did.into_static(),
            subject: self.subject.into_static(),
            extra_data: self.extra_data.into_static(),
        }
    }
}

#[jacquard_derive::lexicon]
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct SendEmailOutput<'a> {
    pub sent: bool,
}

impl jacquard_common::IntoStatic for SendEmailOutput<'_> {
    type Output = SendEmailOutput<'static>;
    fn into_static(self) -> Self::Output {
        SendEmailOutput {
            sent: self.sent.into_static(),
            extra_data: self.extra_data.into_static(),
        }
    }
}

impl jacquard_common::types::xrpc::XrpcRequest for SendEmail<'_> {
    const NSID: &'static str = "com.atproto.admin.sendEmail";
    const METHOD: jacquard_common::types::xrpc::XrpcMethod = jacquard_common::types::xrpc::XrpcMethod::Procedure(
        "application/json",
    );
    const OUTPUT_ENCODING: &'static str = "application/json";
    type Output<'de> = SendEmailOutput<'de>;
    type Err<'de> = jacquard_common::types::xrpc::GenericError<'de>;
}