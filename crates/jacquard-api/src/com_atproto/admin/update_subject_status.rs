// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: com.atproto.admin.updateSubjectStatus
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

#[jacquard_derive::lexicon]
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq, bon::Builder)]
#[serde(rename_all = "camelCase")]
#[builder(start_fn = new)]
pub struct UpdateSubjectStatus<'a> {
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub deactivated: std::option::Option<crate::com_atproto::admin::StatusAttr<'a>>,
    #[serde(borrow)]
    pub subject: UpdateSubjectStatusRecordSubject<'a>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub takedown: std::option::Option<crate::com_atproto::admin::StatusAttr<'a>>,
    #[serde(flatten)]
    #[serde(borrow)]
    #[builder(default)]
    pub extra_data: ::std::collections::BTreeMap<
        ::jacquard_common::smol_str::SmolStr,
        ::jacquard_common::types::value::Data<'a>,
    >,
}

#[jacquard_derive::open_union]
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(tag = "$type")]
#[serde(bound(deserialize = "'de: 'a"))]
pub enum UpdateSubjectStatusRecordSubject<'a> {
    #[serde(rename = "com.atproto.admin.defs#repoRef")]
    DefsRepoRef(Box<crate::com_atproto::admin::RepoRef<'a>>),
    #[serde(rename = "com.atproto.repo.strongRef")]
    StrongRef(Box<crate::com_atproto::repo::strong_ref::StrongRef<'a>>),
    #[serde(rename = "com.atproto.admin.defs#repoBlobRef")]
    DefsRepoBlobRef(Box<crate::com_atproto::admin::RepoBlobRef<'a>>),
}

impl jacquard_common::IntoStatic for UpdateSubjectStatusRecordSubject<'_> {
    type Output = UpdateSubjectStatusRecordSubject<'static>;
    fn into_static(self) -> Self::Output {
        match self {
            UpdateSubjectStatusRecordSubject::DefsRepoRef(v) => {
                UpdateSubjectStatusRecordSubject::DefsRepoRef(v.into_static())
            }
            UpdateSubjectStatusRecordSubject::StrongRef(v) => {
                UpdateSubjectStatusRecordSubject::StrongRef(v.into_static())
            }
            UpdateSubjectStatusRecordSubject::DefsRepoBlobRef(v) => {
                UpdateSubjectStatusRecordSubject::DefsRepoBlobRef(v.into_static())
            }
            UpdateSubjectStatusRecordSubject::Unknown(v) => {
                UpdateSubjectStatusRecordSubject::Unknown(v.into_static())
            }
        }
    }
}

impl jacquard_common::IntoStatic for UpdateSubjectStatus<'_> {
    type Output = UpdateSubjectStatus<'static>;
    fn into_static(self) -> Self::Output {
        UpdateSubjectStatus {
            deactivated: self.deactivated.into_static(),
            subject: self.subject.into_static(),
            takedown: self.takedown.into_static(),
            extra_data: self.extra_data.into_static(),
        }
    }
}

#[jacquard_derive::lexicon]
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct UpdateSubjectStatusOutput<'a> {
    #[serde(borrow)]
    pub subject: UpdateSubjectStatusOutputRecordSubject<'a>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub takedown: std::option::Option<crate::com_atproto::admin::StatusAttr<'a>>,
}

#[jacquard_derive::open_union]
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(tag = "$type")]
#[serde(bound(deserialize = "'de: 'a"))]
pub enum UpdateSubjectStatusOutputRecordSubject<'a> {
    #[serde(rename = "com.atproto.admin.defs#repoRef")]
    DefsRepoRef(Box<crate::com_atproto::admin::RepoRef<'a>>),
    #[serde(rename = "com.atproto.repo.strongRef")]
    StrongRef(Box<crate::com_atproto::repo::strong_ref::StrongRef<'a>>),
    #[serde(rename = "com.atproto.admin.defs#repoBlobRef")]
    DefsRepoBlobRef(Box<crate::com_atproto::admin::RepoBlobRef<'a>>),
}

impl jacquard_common::IntoStatic for UpdateSubjectStatusOutputRecordSubject<'_> {
    type Output = UpdateSubjectStatusOutputRecordSubject<'static>;
    fn into_static(self) -> Self::Output {
        match self {
            UpdateSubjectStatusOutputRecordSubject::DefsRepoRef(v) => {
                UpdateSubjectStatusOutputRecordSubject::DefsRepoRef(v.into_static())
            }
            UpdateSubjectStatusOutputRecordSubject::StrongRef(v) => {
                UpdateSubjectStatusOutputRecordSubject::StrongRef(v.into_static())
            }
            UpdateSubjectStatusOutputRecordSubject::DefsRepoBlobRef(v) => {
                UpdateSubjectStatusOutputRecordSubject::DefsRepoBlobRef(v.into_static())
            }
            UpdateSubjectStatusOutputRecordSubject::Unknown(v) => {
                UpdateSubjectStatusOutputRecordSubject::Unknown(v.into_static())
            }
        }
    }
}

impl jacquard_common::IntoStatic for UpdateSubjectStatusOutput<'_> {
    type Output = UpdateSubjectStatusOutput<'static>;
    fn into_static(self) -> Self::Output {
        UpdateSubjectStatusOutput {
            subject: self.subject.into_static(),
            takedown: self.takedown.into_static(),
            extra_data: self.extra_data.into_static(),
        }
    }
}

///Response type for
///com.atproto.admin.updateSubjectStatus
pub struct UpdateSubjectStatusResponse;
impl<'de> jacquard_common::types::xrpc::XrpcResp<'de> for UpdateSubjectStatusResponse {
    const ENCODING: &'static str = "application/json";
    type Output = UpdateSubjectStatusOutput<'de>;
    type Err = jacquard_common::types::xrpc::GenericError<'de>;
}

impl<'de> jacquard_common::types::xrpc::XrpcRequest<'de> for UpdateSubjectStatus<'de> {
    const NSID: &'static str = "com.atproto.admin.updateSubjectStatus";
    const METHOD: jacquard_common::types::xrpc::XrpcMethod =
        jacquard_common::types::xrpc::XrpcMethod::Procedure("application/json");
    type Response<'de1> = UpdateSubjectStatusResponse;
}
