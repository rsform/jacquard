// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: com.atproto.admin.updateSubjectStatus
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    bon::Builder,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
#[builder(start_fn = new)]
pub struct UpdateSubjectStatus<'a> {
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub deactivated: std::option::Option<crate::com_atproto::admin::StatusAttr<'a>>,
    #[serde(borrow)]
    pub subject: UpdateSubjectStatusRecordSubject<'a>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub takedown: std::option::Option<crate::com_atproto::admin::StatusAttr<'a>>,
    #[serde(flatten)]
    #[serde(borrow)]
    #[builder(default)]
    pub extra_data: ::std::collections::BTreeMap<
        ::jacquard_common::smol_str::SmolStr,
        ::jacquard_common::types::value::Data<'a>,
    >,
}

#[jacquard_derive::open_union]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(tag = "$type")]
#[serde(bound(deserialize = "'de: 'a"))]
pub enum UpdateSubjectStatusRecordSubject<'a> {
    #[serde(rename = "com.atproto.admin.defs#repoRef")]
    DefsRepoRef(Box<crate::com_atproto::admin::RepoRef<'a>>),
    #[serde(rename = "com.atproto.repo.strongRef")]
    StrongRef(Box<crate::com_atproto::repo::strong_ref::StrongRef<'a>>),
    #[serde(rename = "com.atproto.admin.defs#repoBlobRef")]
    DefsRepoBlobRef(Box<crate::com_atproto::admin::RepoBlobRef<'a>>),
}

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
pub struct UpdateSubjectStatusOutput<'a> {
    #[serde(borrow)]
    pub subject: UpdateSubjectStatusOutputRecordSubject<'a>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub takedown: std::option::Option<crate::com_atproto::admin::StatusAttr<'a>>,
}

#[jacquard_derive::open_union]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(tag = "$type")]
#[serde(bound(deserialize = "'de: 'a"))]
pub enum UpdateSubjectStatusOutputRecordSubject<'a> {
    #[serde(rename = "com.atproto.admin.defs#repoRef")]
    DefsRepoRef(Box<crate::com_atproto::admin::RepoRef<'a>>),
    #[serde(rename = "com.atproto.repo.strongRef")]
    StrongRef(Box<crate::com_atproto::repo::strong_ref::StrongRef<'a>>),
    #[serde(rename = "com.atproto.admin.defs#repoBlobRef")]
    DefsRepoBlobRef(Box<crate::com_atproto::admin::RepoBlobRef<'a>>),
}

///Response type for
///com.atproto.admin.updateSubjectStatus
pub struct UpdateSubjectStatusResponse;
impl jacquard_common::xrpc::XrpcResp for UpdateSubjectStatusResponse {
    const NSID: &'static str = "com.atproto.admin.updateSubjectStatus";
    const ENCODING: &'static str = "application/json";
    type Output<'de> = UpdateSubjectStatusOutput<'de>;
    type Err<'de> = jacquard_common::xrpc::GenericError<'de>;
}

impl<'de> jacquard_common::xrpc::XrpcRequest<'de> for UpdateSubjectStatus<'de> {
    const NSID: &'static str = "com.atproto.admin.updateSubjectStatus";
    const METHOD: jacquard_common::xrpc::XrpcMethod = jacquard_common::xrpc::XrpcMethod::Procedure(
        "application/json",
    );
    type Response = UpdateSubjectStatusResponse;
}