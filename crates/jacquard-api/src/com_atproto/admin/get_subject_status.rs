// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: com.atproto.admin.getSubjectStatus
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq, bon::Builder)]
#[builder(start_fn = new)]
#[serde(rename_all = "camelCase")]
pub struct GetSubjectStatus<'a> {
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub blob: std::option::Option<jacquard_common::types::string::Cid<'a>>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub did: std::option::Option<jacquard_common::types::string::Did<'a>>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub uri: std::option::Option<jacquard_common::types::string::AtUri<'a>>,
}

impl jacquard_common::IntoStatic for GetSubjectStatus<'_> {
    type Output = GetSubjectStatus<'static>;
    fn into_static(self) -> Self::Output {
        GetSubjectStatus {
            blob: self.blob.into_static(),
            did: self.did.into_static(),
            uri: self.uri.into_static(),
        }
    }
}

#[jacquard_derive::lexicon]
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct GetSubjectStatusOutput<'a> {
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub deactivated: std::option::Option<crate::com_atproto::admin::StatusAttr<'a>>,
    #[serde(borrow)]
    pub subject: GetSubjectStatusOutputRecordSubject<'a>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub takedown: std::option::Option<crate::com_atproto::admin::StatusAttr<'a>>,
}

#[jacquard_derive::open_union]
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(tag = "$type")]
#[serde(bound(deserialize = "'de: 'a"))]
pub enum GetSubjectStatusOutputRecordSubject<'a> {
    #[serde(rename = "com.atproto.admin.defs#repoRef")]
    DefsRepoRef(Box<crate::com_atproto::admin::RepoRef<'a>>),
    #[serde(rename = "com.atproto.repo.strongRef")]
    StrongRef(Box<crate::com_atproto::repo::strong_ref::StrongRef<'a>>),
    #[serde(rename = "com.atproto.admin.defs#repoBlobRef")]
    DefsRepoBlobRef(Box<crate::com_atproto::admin::RepoBlobRef<'a>>),
}

impl jacquard_common::IntoStatic for GetSubjectStatusOutputRecordSubject<'_> {
    type Output = GetSubjectStatusOutputRecordSubject<'static>;
    fn into_static(self) -> Self::Output {
        match self {
            GetSubjectStatusOutputRecordSubject::DefsRepoRef(v) => {
                GetSubjectStatusOutputRecordSubject::DefsRepoRef(v.into_static())
            }
            GetSubjectStatusOutputRecordSubject::StrongRef(v) => {
                GetSubjectStatusOutputRecordSubject::StrongRef(v.into_static())
            }
            GetSubjectStatusOutputRecordSubject::DefsRepoBlobRef(v) => {
                GetSubjectStatusOutputRecordSubject::DefsRepoBlobRef(v.into_static())
            }
            GetSubjectStatusOutputRecordSubject::Unknown(v) => {
                GetSubjectStatusOutputRecordSubject::Unknown(v.into_static())
            }
        }
    }
}

impl jacquard_common::IntoStatic for GetSubjectStatusOutput<'_> {
    type Output = GetSubjectStatusOutput<'static>;
    fn into_static(self) -> Self::Output {
        GetSubjectStatusOutput {
            deactivated: self.deactivated.into_static(),
            subject: self.subject.into_static(),
            takedown: self.takedown.into_static(),
            extra_data: self.extra_data.into_static(),
        }
    }
}

///Response type for
///com.atproto.admin.getSubjectStatus
pub struct GetSubjectStatusResponse;
impl<'de> jacquard_common::types::xrpc::XrpcResp<'de> for GetSubjectStatusResponse {
    const ENCODING: &'static str = "application/json";
    type Output = GetSubjectStatusOutput<'de>;
    type Err = jacquard_common::types::xrpc::GenericError<'de>;
}

impl<'de> jacquard_common::types::xrpc::XrpcRequest<'de> for GetSubjectStatus<'de> {
    const NSID: &'static str = "com.atproto.admin.getSubjectStatus";
    const METHOD: jacquard_common::types::xrpc::XrpcMethod =
        jacquard_common::types::xrpc::XrpcMethod::Query;
    type Response<'de1> = GetSubjectStatusResponse;
}
