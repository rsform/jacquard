// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: com.atproto.admin.getAccountInfo
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq, bon::Builder)]
#[builder(start_fn = new)]
#[serde(rename_all = "camelCase")]
pub struct GetAccountInfo<'a> {
    #[serde(borrow)]
    pub did: jacquard_common::types::string::Did<'a>,
}

impl jacquard_common::IntoStatic for GetAccountInfo<'_> {
    type Output = GetAccountInfo<'static>;
    fn into_static(self) -> Self::Output {
        GetAccountInfo {
            did: self.did.into_static(),
        }
    }
}

#[jacquard_derive::lexicon]
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct GetAccountInfoOutput<'a> {
    #[serde(flatten)]
    #[serde(borrow)]
    pub value: crate::com_atproto::admin::AccountView<'a>,
}

impl jacquard_common::IntoStatic for GetAccountInfoOutput<'_> {
    type Output = GetAccountInfoOutput<'static>;
    fn into_static(self) -> Self::Output {
        GetAccountInfoOutput {
            value: self.value.into_static(),
            extra_data: self.extra_data.into_static(),
        }
    }
}

///Response type for
///com.atproto.admin.getAccountInfo
pub struct GetAccountInfoResponse;
impl<'de> jacquard_common::types::xrpc::XrpcResp<'de> for GetAccountInfoResponse {
    const ENCODING: &'static str = "application/json";
    type Output = GetAccountInfoOutput<'de>;
    type Err = jacquard_common::types::xrpc::GenericError<'de>;
}

impl<'de> jacquard_common::types::xrpc::XrpcRequest<'de> for GetAccountInfo<'de> {
    const NSID: &'static str = "com.atproto.admin.getAccountInfo";
    const METHOD: jacquard_common::types::xrpc::XrpcMethod =
        jacquard_common::types::xrpc::XrpcMethod::Query;
    type Response<'de1> = GetAccountInfoResponse;
}
