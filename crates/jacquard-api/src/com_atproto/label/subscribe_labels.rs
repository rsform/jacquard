// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: com.atproto.label.subscribeLabels
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic,
    Default
)]
#[serde(rename_all = "camelCase")]
pub struct Info<'a> {
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub message: std::option::Option<jacquard_common::CowStr<'a>>,
    #[serde(borrow)]
    pub name: jacquard_common::CowStr<'a>,
}

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic,
    bon::Builder
)]
#[serde(rename_all = "camelCase")]
pub struct Labels<'a> {
    #[serde(borrow)]
    pub labels: Vec<crate::com_atproto::label::Label<'a>>,
    pub seq: i64,
}

#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    bon::Builder,
    jacquard_derive::IntoStatic
)]
#[builder(start_fn = new)]
#[serde(rename_all = "camelCase")]
pub struct SubscribeLabels {
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub cursor: std::option::Option<i64>,
}

#[jacquard_derive::open_union]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(tag = "$type")]
#[serde(bound(deserialize = "'de: 'a"))]
pub enum SubscribeLabelsMessage<'a> {
    #[serde(rename = "#labels")]
    Labels(Box<crate::com_atproto::label::subscribe_labels::Labels<'a>>),
    #[serde(rename = "#info")]
    Info(Box<crate::com_atproto::label::subscribe_labels::Info<'a>>),
}

#[jacquard_derive::open_union]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    thiserror::Error,
    miette::Diagnostic,
    jacquard_derive::IntoStatic
)]
#[serde(tag = "error", content = "message")]
#[serde(bound(deserialize = "'de: 'a"))]
pub enum SubscribeLabelsError<'a> {
    #[serde(rename = "FutureCursor")]
    FutureCursor(std::option::Option<String>),
}

impl std::fmt::Display for SubscribeLabelsError<'_> {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Self::FutureCursor(msg) => {
                write!(f, "FutureCursor")?;
                if let Some(msg) = msg {
                    write!(f, ": {}", msg)?;
                }
                Ok(())
            }
            Self::Unknown(err) => write!(f, "Unknown error: {:?}", err),
        }
    }
}

///Stream response type for
///com.atproto.label.subscribeLabels
pub struct SubscribeLabelsStream;
impl jacquard_common::xrpc::SubscriptionResp for SubscribeLabelsStream {
    const NSID: &'static str = "com.atproto.label.subscribeLabels";
    const ENCODING: jacquard_common::xrpc::MessageEncoding = jacquard_common::xrpc::MessageEncoding::DagCbor;
    type Message<'de> = SubscribeLabelsMessage<'de>;
    type Error<'de> = SubscribeLabelsError<'de>;
}

impl jacquard_common::xrpc::XrpcSubscription for SubscribeLabels {
    const NSID: &'static str = "com.atproto.label.subscribeLabels";
    const ENCODING: jacquard_common::xrpc::MessageEncoding = jacquard_common::xrpc::MessageEncoding::DagCbor;
    type Stream = SubscribeLabelsStream;
}

pub struct SubscribeLabelsEndpoint;
impl jacquard_common::xrpc::SubscriptionEndpoint for SubscribeLabelsEndpoint {
    const PATH: &'static str = "/xrpc/com.atproto.label.subscribeLabels";
    const ENCODING: jacquard_common::xrpc::MessageEncoding = jacquard_common::xrpc::MessageEncoding::DagCbor;
    type Params<'de> = SubscribeLabels;
    type Stream = SubscribeLabelsStream;
}