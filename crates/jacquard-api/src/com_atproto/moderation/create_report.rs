// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: com.atproto.moderation.createReport
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

#[jacquard_derive::lexicon]
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct CreateReport<'a> {
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub mod_tool: std::option::Option<jacquard_common::types::value::Data<'a>>,
    ///Additional context about the content and violation.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub reason: std::option::Option<jacquard_common::CowStr<'a>>,
    ///Indicates the broad category of violation the report is for.
    #[serde(borrow)]
    pub reason_type: crate::com_atproto::moderation::ReasonType<'a>,
    #[serde(borrow)]
    pub subject: CreateReportRecordSubject<'a>,
}

#[jacquard_derive::open_union]
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(tag = "$type")]
#[serde(bound(deserialize = "'de: 'a"))]
pub enum CreateReportRecordSubject<'a> {
    #[serde(rename = "com.atproto.admin.defs#repoRef")]
    DefsRepoRef(Box<crate::com_atproto::admin::RepoRef<'a>>),
    #[serde(rename = "com.atproto.repo.strongRef")]
    StrongRef(Box<crate::com_atproto::repo::strong_ref::StrongRef<'a>>),
}

impl jacquard_common::IntoStatic for CreateReportRecordSubject<'_> {
    type Output = CreateReportRecordSubject<'static>;
    fn into_static(self) -> Self::Output {
        match self {
            CreateReportRecordSubject::DefsRepoRef(v) => {
                CreateReportRecordSubject::DefsRepoRef(v.into_static())
            }
            CreateReportRecordSubject::StrongRef(v) => {
                CreateReportRecordSubject::StrongRef(v.into_static())
            }
            CreateReportRecordSubject::Unknown(v) => {
                CreateReportRecordSubject::Unknown(v.into_static())
            }
        }
    }
}

impl jacquard_common::IntoStatic for CreateReport<'_> {
    type Output = CreateReport<'static>;
    fn into_static(self) -> Self::Output {
        CreateReport {
            mod_tool: self.mod_tool.into_static(),
            reason: self.reason.into_static(),
            reason_type: self.reason_type.into_static(),
            subject: self.subject.into_static(),
            extra_data: self.extra_data.into_static(),
        }
    }
}

#[jacquard_derive::lexicon]
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct CreateReportOutput<'a> {
    pub created_at: jacquard_common::types::string::Datetime,
    pub id: i64,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub reason: std::option::Option<jacquard_common::CowStr<'a>>,
    #[serde(borrow)]
    pub reason_type: crate::com_atproto::moderation::ReasonType<'a>,
    #[serde(borrow)]
    pub reported_by: jacquard_common::types::string::Did<'a>,
    #[serde(borrow)]
    pub subject: CreateReportOutputRecordSubject<'a>,
}

#[jacquard_derive::open_union]
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(tag = "$type")]
#[serde(bound(deserialize = "'de: 'a"))]
pub enum CreateReportOutputRecordSubject<'a> {
    #[serde(rename = "com.atproto.admin.defs#repoRef")]
    DefsRepoRef(Box<crate::com_atproto::admin::RepoRef<'a>>),
    #[serde(rename = "com.atproto.repo.strongRef")]
    StrongRef(Box<crate::com_atproto::repo::strong_ref::StrongRef<'a>>),
}

impl jacquard_common::IntoStatic for CreateReportOutputRecordSubject<'_> {
    type Output = CreateReportOutputRecordSubject<'static>;
    fn into_static(self) -> Self::Output {
        match self {
            CreateReportOutputRecordSubject::DefsRepoRef(v) => {
                CreateReportOutputRecordSubject::DefsRepoRef(v.into_static())
            }
            CreateReportOutputRecordSubject::StrongRef(v) => {
                CreateReportOutputRecordSubject::StrongRef(v.into_static())
            }
            CreateReportOutputRecordSubject::Unknown(v) => {
                CreateReportOutputRecordSubject::Unknown(v.into_static())
            }
        }
    }
}

impl jacquard_common::IntoStatic for CreateReportOutput<'_> {
    type Output = CreateReportOutput<'static>;
    fn into_static(self) -> Self::Output {
        CreateReportOutput {
            created_at: self.created_at.into_static(),
            id: self.id.into_static(),
            reason: self.reason.into_static(),
            reason_type: self.reason_type.into_static(),
            reported_by: self.reported_by.into_static(),
            subject: self.subject.into_static(),
            extra_data: self.extra_data.into_static(),
        }
    }
}

impl jacquard_common::types::xrpc::XrpcRequest for CreateReport<'_> {
    const NSID: &'static str = "com.atproto.moderation.createReport";
    const METHOD: jacquard_common::types::xrpc::XrpcMethod = jacquard_common::types::xrpc::XrpcMethod::Procedure(
        "application/json",
    );
    const OUTPUT_ENCODING: &'static str = "application/json";
    type Output<'de> = CreateReportOutput<'de>;
    type Err<'de> = jacquard_common::types::xrpc::GenericError<'de>;
}

///Moderation tool information for tracing the source of the action
#[jacquard_derive::lexicon]
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct ModTool<'a> {
    ///Additional arbitrary metadata about the source
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub meta: std::option::Option<jacquard_common::types::value::Data<'a>>,
    ///Name/identifier of the source (e.g., 'bsky-app/android', 'bsky-web/chrome')
    #[serde(borrow)]
    pub name: jacquard_common::CowStr<'a>,
}

impl jacquard_common::IntoStatic for ModTool<'_> {
    type Output = ModTool<'static>;
    fn into_static(self) -> Self::Output {
        ModTool {
            meta: self.meta.into_static(),
            name: self.name.into_static(),
            extra_data: self.extra_data.into_static(),
        }
    }
}