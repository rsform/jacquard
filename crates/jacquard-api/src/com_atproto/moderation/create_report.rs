// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: com.atproto.moderation.createReport
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    bon::Builder,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
#[builder(start_fn = new)]
pub struct CreateReport<'a> {
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub mod_tool: std::option::Option<jacquard_common::types::value::Data<'a>>,
    ///Additional context about the content and violation.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    #[builder(into)]
    pub reason: std::option::Option<jacquard_common::CowStr<'a>>,
    ///Indicates the broad category of violation the report is for.
    #[serde(borrow)]
    pub reason_type: crate::com_atproto::moderation::ReasonType<'a>,
    #[serde(borrow)]
    pub subject: CreateReportSubject<'a>,
    #[serde(flatten)]
    #[serde(borrow)]
    #[builder(default)]
    pub extra_data: ::std::collections::BTreeMap<
        ::jacquard_common::smol_str::SmolStr,
        ::jacquard_common::types::value::Data<'a>,
    >,
}

#[jacquard_derive::open_union]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(tag = "$type")]
#[serde(bound(deserialize = "'de: 'a"))]
pub enum CreateReportSubject<'a> {
    #[serde(rename = "com.atproto.admin.defs#repoRef")]
    RepoRef(Box<crate::com_atproto::admin::RepoRef<'a>>),
    #[serde(rename = "com.atproto.repo.strongRef")]
    StrongRef(Box<crate::com_atproto::repo::strong_ref::StrongRef<'a>>),
}

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
pub struct CreateReportOutput<'a> {
    pub created_at: jacquard_common::types::string::Datetime,
    pub id: i64,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub reason: std::option::Option<jacquard_common::CowStr<'a>>,
    #[serde(borrow)]
    pub reason_type: crate::com_atproto::moderation::ReasonType<'a>,
    #[serde(borrow)]
    pub reported_by: jacquard_common::types::string::Did<'a>,
    #[serde(borrow)]
    pub subject: CreateReportOutputSubject<'a>,
}

#[jacquard_derive::open_union]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(tag = "$type")]
#[serde(bound(deserialize = "'de: 'a"))]
pub enum CreateReportOutputSubject<'a> {
    #[serde(rename = "com.atproto.admin.defs#repoRef")]
    RepoRef(Box<crate::com_atproto::admin::RepoRef<'a>>),
    #[serde(rename = "com.atproto.repo.strongRef")]
    StrongRef(Box<crate::com_atproto::repo::strong_ref::StrongRef<'a>>),
}

///Response type for
///com.atproto.moderation.createReport
pub struct CreateReportResponse;
impl jacquard_common::xrpc::XrpcResp for CreateReportResponse {
    const NSID: &'static str = "com.atproto.moderation.createReport";
    const ENCODING: &'static str = "application/json";
    type Output<'de> = CreateReportOutput<'de>;
    type Err<'de> = jacquard_common::xrpc::GenericError<'de>;
}

impl<'de> jacquard_common::xrpc::XrpcRequest<'de> for CreateReport<'de> {
    const NSID: &'static str = "com.atproto.moderation.createReport";
    const METHOD: jacquard_common::xrpc::XrpcMethod = jacquard_common::xrpc::XrpcMethod::Procedure(
        "application/json",
    );
    type Response = CreateReportResponse;
}

///Endpoint type for
///com.atproto.moderation.createReport
pub struct CreateReportRequest;
impl jacquard_common::xrpc::XrpcEndpoint for CreateReportRequest {
    const PATH: &'static str = "/xrpc/com.atproto.moderation.createReport";
    const METHOD: jacquard_common::xrpc::XrpcMethod = jacquard_common::xrpc::XrpcMethod::Procedure(
        "application/json",
    );
    type Request<'de> = CreateReport<'de>;
    type Response = CreateReportResponse;
}

///Moderation tool information for tracing the source of the action
#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
pub struct ModTool<'a> {
    ///Additional arbitrary metadata about the source
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub meta: std::option::Option<jacquard_common::types::value::Data<'a>>,
    ///Name/identifier of the source (e.g., 'bsky-app/android', 'bsky-web/chrome')
    #[serde(borrow)]
    pub name: jacquard_common::CowStr<'a>,
}