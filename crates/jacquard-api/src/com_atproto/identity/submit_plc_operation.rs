// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: com.atproto.identity.submitPlcOperation
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    bon::Builder
)]
#[serde(rename_all = "camelCase")]
#[builder(start_fn = new)]
pub struct SubmitPlcOperation<'a> {
    #[serde(borrow)]
    pub operation: jacquard_common::types::value::Data<'a>,
    #[serde(flatten)]
    #[serde(borrow)]
    #[builder(default)]
    pub extra_data: ::std::collections::BTreeMap<
        ::jacquard_common::smol_str::SmolStr,
        ::jacquard_common::types::value::Data<'a>,
    >,
}

impl jacquard_common::IntoStatic for SubmitPlcOperation<'_> {
    type Output = SubmitPlcOperation<'static>;
    fn into_static(self) -> Self::Output {
        SubmitPlcOperation {
            operation: self.operation.into_static(),
            extra_data: self.extra_data.into_static(),
        }
    }
}

impl<'de> jacquard_common::types::xrpc::XrpcRequest<'de> for SubmitPlcOperation<'de> {
    const NSID: &'static str = "com.atproto.identity.submitPlcOperation";
    const METHOD: jacquard_common::types::xrpc::XrpcMethod = jacquard_common::types::xrpc::XrpcMethod::Procedure(
        "application/json",
    );
    const OUTPUT_ENCODING: &'static str = "application/json";
    type Output = ();
    type Err = jacquard_common::types::xrpc::GenericError<'de>;
}