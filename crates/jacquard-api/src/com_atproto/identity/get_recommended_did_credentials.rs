// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: com.atproto.identity.getRecommendedDidCredentials
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

#[jacquard_derive::lexicon]
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct GetRecommendedDidCredentialsOutput<'a> {
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub also_known_as: std::option::Option<Vec<jacquard_common::CowStr<'a>>>,
    ///Recommended rotation keys for PLC dids. Should be undefined (or ignored) for did:webs.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub rotation_keys: std::option::Option<Vec<jacquard_common::CowStr<'a>>>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub services: std::option::Option<jacquard_common::types::value::Data<'a>>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub verification_methods: std::option::Option<jacquard_common::types::value::Data<'a>>,
}

impl jacquard_common::IntoStatic for GetRecommendedDidCredentialsOutput<'_> {
    type Output = GetRecommendedDidCredentialsOutput<'static>;
    fn into_static(self) -> Self::Output {
        GetRecommendedDidCredentialsOutput {
            also_known_as: self.also_known_as.into_static(),
            rotation_keys: self.rotation_keys.into_static(),
            services: self.services.into_static(),
            verification_methods: self.verification_methods.into_static(),
            extra_data: self.extra_data.into_static(),
        }
    }
}

/// XRPC request marker type
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize, serde::Deserialize)]
pub struct GetRecommendedDidCredentials;
///Response type for
///com.atproto.identity.getRecommendedDidCredentials
pub struct GetRecommendedDidCredentialsResponse;
impl<'de> jacquard_common::types::xrpc::XrpcResp<'de> for GetRecommendedDidCredentialsResponse {
    const ENCODING: &'static str = "application/json";
    type Output = GetRecommendedDidCredentialsOutput<'de>;
    type Err = jacquard_common::types::xrpc::GenericError<'de>;
}

impl<'de> jacquard_common::types::xrpc::XrpcRequest<'de> for GetRecommendedDidCredentials {
    const NSID: &'static str = "com.atproto.identity.getRecommendedDidCredentials";
    const METHOD: jacquard_common::types::xrpc::XrpcMethod =
        jacquard_common::types::xrpc::XrpcMethod::Query;
    type Response<'de1> = GetRecommendedDidCredentialsResponse;
}
