// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: com.atproto.sync.getCheckout
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct GetCheckout<'a> {
    #[serde(borrow)]
    pub did: jacquard_common::types::string::Did<'a>,
}

impl jacquard_common::IntoStatic for GetCheckout<'_> {
    type Output = GetCheckout<'static>;
    fn into_static(self) -> Self::Output {
        GetCheckout {
            did: self.did.into_static(),
        }
    }
}

#[jacquard_derive::lexicon]
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct GetCheckoutOutput<'a> {}
impl jacquard_common::IntoStatic for GetCheckoutOutput<'_> {
    type Output = GetCheckoutOutput<'static>;
    fn into_static(self) -> Self::Output {
        GetCheckoutOutput {
            extra_data: self.extra_data.into_static(),
        }
    }
}

impl jacquard_common::types::xrpc::XrpcRequest for GetCheckout<'_> {
    const NSID: &'static str = "com.atproto.sync.getCheckout";
    const METHOD: jacquard_common::types::xrpc::XrpcMethod = jacquard_common::types::xrpc::XrpcMethod::Query;
    const OUTPUT_ENCODING: &'static str = "application/vnd.ipld.car";
    type Output<'de> = GetCheckoutOutput<'de>;
    type Err<'de> = jacquard_common::types::xrpc::GenericError<'de>;
}