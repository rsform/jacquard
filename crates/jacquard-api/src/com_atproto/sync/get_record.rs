// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: com.atproto.sync.getRecord
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    bon::Builder
)]
#[builder(start_fn = new)]
#[serde(rename_all = "camelCase")]
pub struct GetRecord<'a> {
    #[serde(borrow)]
    pub collection: jacquard_common::types::string::Nsid<'a>,
    #[serde(borrow)]
    pub did: jacquard_common::types::string::Did<'a>,
    #[serde(borrow)]
    pub rkey: jacquard_common::types::string::RecordKey<
        jacquard_common::types::string::Rkey<'a>,
    >,
}

impl jacquard_common::IntoStatic for GetRecord<'_> {
    type Output = GetRecord<'static>;
    fn into_static(self) -> Self::Output {
        GetRecord {
            collection: self.collection.into_static(),
            did: self.did.into_static(),
            rkey: self.rkey.into_static(),
        }
    }
}

#[jacquard_derive::lexicon]
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct GetRecordOutput<'a> {}
impl jacquard_common::IntoStatic for GetRecordOutput<'_> {
    type Output = GetRecordOutput<'static>;
    fn into_static(self) -> Self::Output {
        GetRecordOutput {
            extra_data: self.extra_data.into_static(),
        }
    }
}

#[jacquard_derive::open_union]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    thiserror::Error,
    miette::Diagnostic
)]
#[serde(tag = "error", content = "message")]
#[serde(bound(deserialize = "'de: 'a"))]
pub enum GetRecordError<'a> {
    #[serde(rename = "RecordNotFound")]
    RecordNotFound(std::option::Option<String>),
    #[serde(rename = "RepoNotFound")]
    RepoNotFound(std::option::Option<String>),
    #[serde(rename = "RepoTakendown")]
    RepoTakendown(std::option::Option<String>),
    #[serde(rename = "RepoSuspended")]
    RepoSuspended(std::option::Option<String>),
    #[serde(rename = "RepoDeactivated")]
    RepoDeactivated(std::option::Option<String>),
}

impl std::fmt::Display for GetRecordError<'_> {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Self::RecordNotFound(msg) => {
                write!(f, "RecordNotFound")?;
                if let Some(msg) = msg {
                    write!(f, ": {}", msg)?;
                }
                Ok(())
            }
            Self::RepoNotFound(msg) => {
                write!(f, "RepoNotFound")?;
                if let Some(msg) = msg {
                    write!(f, ": {}", msg)?;
                }
                Ok(())
            }
            Self::RepoTakendown(msg) => {
                write!(f, "RepoTakendown")?;
                if let Some(msg) = msg {
                    write!(f, ": {}", msg)?;
                }
                Ok(())
            }
            Self::RepoSuspended(msg) => {
                write!(f, "RepoSuspended")?;
                if let Some(msg) = msg {
                    write!(f, ": {}", msg)?;
                }
                Ok(())
            }
            Self::RepoDeactivated(msg) => {
                write!(f, "RepoDeactivated")?;
                if let Some(msg) = msg {
                    write!(f, ": {}", msg)?;
                }
                Ok(())
            }
            Self::Unknown(err) => write!(f, "Unknown error: {:?}", err),
        }
    }
}

impl jacquard_common::IntoStatic for GetRecordError<'_> {
    type Output = GetRecordError<'static>;
    fn into_static(self) -> Self::Output {
        match self {
            GetRecordError::RecordNotFound(v) => {
                GetRecordError::RecordNotFound(v.into_static())
            }
            GetRecordError::RepoNotFound(v) => {
                GetRecordError::RepoNotFound(v.into_static())
            }
            GetRecordError::RepoTakendown(v) => {
                GetRecordError::RepoTakendown(v.into_static())
            }
            GetRecordError::RepoSuspended(v) => {
                GetRecordError::RepoSuspended(v.into_static())
            }
            GetRecordError::RepoDeactivated(v) => {
                GetRecordError::RepoDeactivated(v.into_static())
            }
            GetRecordError::Unknown(v) => GetRecordError::Unknown(v.into_static()),
        }
    }
}

impl<'de> jacquard_common::types::xrpc::XrpcRequest<'de> for GetRecord<'de> {
    const NSID: &'static str = "com.atproto.sync.getRecord";
    const METHOD: jacquard_common::types::xrpc::XrpcMethod = jacquard_common::types::xrpc::XrpcMethod::Query;
    const OUTPUT_ENCODING: &'static str = "application/vnd.ipld.car";
    type Output = GetRecordOutput<'de>;
    type Err = GetRecordError<'de>;
}