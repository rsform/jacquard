// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: com.atproto.sync.getRepoStatus
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    bon::Builder
)]
#[builder(start_fn = new)]
#[serde(rename_all = "camelCase")]
pub struct GetRepoStatus<'a> {
    #[serde(borrow)]
    pub did: jacquard_common::types::string::Did<'a>,
}

impl jacquard_common::IntoStatic for GetRepoStatus<'_> {
    type Output = GetRepoStatus<'static>;
    fn into_static(self) -> Self::Output {
        GetRepoStatus {
            did: self.did.into_static(),
        }
    }
}

#[jacquard_derive::lexicon]
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct GetRepoStatusOutput<'a> {
    pub active: bool,
    #[serde(borrow)]
    pub did: jacquard_common::types::string::Did<'a>,
    ///Optional field, the current rev of the repo, if active=true
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub rev: std::option::Option<jacquard_common::types::string::Tid>,
    ///If active=false, this optional field indicates a possible reason for why the account is not active. If active=false and no status is supplied, then the host makes no claim for why the repository is no longer being hosted.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub status: std::option::Option<jacquard_common::CowStr<'a>>,
}

impl jacquard_common::IntoStatic for GetRepoStatusOutput<'_> {
    type Output = GetRepoStatusOutput<'static>;
    fn into_static(self) -> Self::Output {
        GetRepoStatusOutput {
            active: self.active.into_static(),
            did: self.did.into_static(),
            rev: self.rev.into_static(),
            status: self.status.into_static(),
            extra_data: self.extra_data.into_static(),
        }
    }
}

#[jacquard_derive::open_union]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    thiserror::Error,
    miette::Diagnostic
)]
#[serde(tag = "error", content = "message")]
#[serde(bound(deserialize = "'de: 'a"))]
pub enum GetRepoStatusError<'a> {
    #[serde(rename = "RepoNotFound")]
    RepoNotFound(std::option::Option<String>),
}

impl std::fmt::Display for GetRepoStatusError<'_> {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Self::RepoNotFound(msg) => {
                write!(f, "RepoNotFound")?;
                if let Some(msg) = msg {
                    write!(f, ": {}", msg)?;
                }
                Ok(())
            }
            Self::Unknown(err) => write!(f, "Unknown error: {:?}", err),
        }
    }
}

impl jacquard_common::IntoStatic for GetRepoStatusError<'_> {
    type Output = GetRepoStatusError<'static>;
    fn into_static(self) -> Self::Output {
        match self {
            GetRepoStatusError::RepoNotFound(v) => {
                GetRepoStatusError::RepoNotFound(v.into_static())
            }
            GetRepoStatusError::Unknown(v) => {
                GetRepoStatusError::Unknown(v.into_static())
            }
        }
    }
}

///Response type for
///com.atproto.sync.getRepoStatus
pub struct GetRepoStatusResponse;
impl jacquard_common::xrpc::XrpcResp for GetRepoStatusResponse {
    const NSID: &'static str = "com.atproto.sync.getRepoStatus";
    const ENCODING: &'static str = "application/json";
    type Output<'de> = GetRepoStatusOutput<'de>;
    type Err<'de> = GetRepoStatusError<'de>;
}

impl<'de> jacquard_common::xrpc::XrpcRequest<'de> for GetRepoStatus<'de> {
    const NSID: &'static str = "com.atproto.sync.getRepoStatus";
    const METHOD: jacquard_common::xrpc::XrpcMethod = jacquard_common::xrpc::XrpcMethod::Query;
    type Response = GetRepoStatusResponse;
}