// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: com.atproto.sync.subscribeRepos
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

/// Represents a change to an account's status on a host (eg, PDS or Relay). The semantics of this event are that the status is at the host which emitted the event, not necessarily that at the currently active PDS. Eg, a Relay takedown would emit a takedown with active=false, even if the PDS is still active.
#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic,
    bon::Builder
)]
#[serde(rename_all = "camelCase")]
pub struct Account<'a> {
    /// Indicates that the account has a repository which can be fetched from the host that emitted this event.
    pub active: bool,
    #[serde(borrow)]
    pub did: jacquard_common::types::string::Did<'a>,
    pub seq: i64,
    /// If active=false, this optional field indicates a reason for why the account is not active.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub status: Option<jacquard_common::CowStr<'a>>,
    pub time: jacquard_common::types::string::Datetime,
}

/// Represents an update of repository state. Note that empty commits are allowed, which include no repo data changes, but an update to rev and signature.
#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic,
    bon::Builder
)]
#[serde(rename_all = "camelCase")]
pub struct Commit<'a> {
    #[serde(borrow)]
    pub blobs: Vec<jacquard_common::types::cid::CidLink<'a>>,
    /// CAR file containing relevant blocks, as a diff since the previous repo state. The commit must be included as a block, and the commit block CID must be the first entry in the CAR header 'roots' list.
    pub blocks: bytes::Bytes,
    /// Repo commit object CID.
    #[serde(borrow)]
    pub commit: jacquard_common::types::cid::CidLink<'a>,
    #[serde(borrow)]
    pub ops: Vec<crate::com_atproto::sync::subscribe_repos::RepoOp<'a>>,
    /// The root CID of the MST tree for the previous commit from this repo (indicated by the 'since' revision field in this message). Corresponds to the 'data' field in the repo commit object. NOTE: this field is effectively required for the 'inductive' version of firehose.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub prev_data: Option<jacquard_common::types::cid::CidLink<'a>>,
    /// DEPRECATED -- unused
    pub rebase: bool,
    /// The repo this event comes from. Note that all other message types name this field 'did'.
    #[serde(borrow)]
    pub repo: jacquard_common::types::string::Did<'a>,
    /// The rev of the emitted commit. Note that this information is also in the commit object included in blocks, unless this is a tooBig event.
    pub rev: jacquard_common::types::string::Tid,
    /// The stream sequence number of this message.
    pub seq: i64,
    /// The rev of the last emitted commit from this repo (if any).
    pub since: jacquard_common::types::string::Tid,
    /// Timestamp of when this message was originally broadcast.
    pub time: jacquard_common::types::string::Datetime,
    /// DEPRECATED -- replaced by #sync event and data limits. Indicates that this commit contained too many ops, or data size was too large. Consumers will need to make a separate request to get missing data.
    pub too_big: bool,
}

/// Represents a change to an account's identity. Could be an updated handle, signing key, or pds hosting endpoint. Serves as a prod to all downstream services to refresh their identity cache.
#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic,
    bon::Builder
)]
#[serde(rename_all = "camelCase")]
pub struct Identity<'a> {
    #[serde(borrow)]
    pub did: jacquard_common::types::string::Did<'a>,
    /// The current handle for the account, or 'handle.invalid' if validation fails. This field is optional, might have been validated or passed-through from an upstream source. Semantics and behaviors for PDS vs Relay may evolve in the future; see atproto specs for more details.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub handle: Option<jacquard_common::types::string::Handle<'a>>,
    pub seq: i64,
    pub time: jacquard_common::types::string::Datetime,
}

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic,
    Default
)]
#[serde(rename_all = "camelCase")]
pub struct Info<'a> {
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub message: std::option::Option<jacquard_common::CowStr<'a>>,
    #[serde(borrow)]
    pub name: jacquard_common::CowStr<'a>,
}

#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    bon::Builder,
    jacquard_derive::IntoStatic
)]
#[builder(start_fn = new)]
#[serde(rename_all = "camelCase")]
pub struct SubscribeRepos {
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub cursor: std::option::Option<i64>,
}

#[jacquard_derive::open_union]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(tag = "$type")]
#[serde(bound(deserialize = "'de: 'a"))]
pub enum SubscribeReposMessage<'a> {
    #[serde(rename = "#commit")]
    Commit(Box<jacquard_common::types::value::Data<'a>>),
    #[serde(rename = "#sync")]
    Sync(Box<jacquard_common::types::value::Data<'a>>),
    #[serde(rename = "#identity")]
    Identity(Box<jacquard_common::types::value::Data<'a>>),
    #[serde(rename = "#account")]
    Account(Box<jacquard_common::types::value::Data<'a>>),
    #[serde(rename = "#info")]
    Info(Box<jacquard_common::types::value::Data<'a>>),
}

#[jacquard_derive::open_union]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    thiserror::Error,
    miette::Diagnostic,
    jacquard_derive::IntoStatic
)]
#[serde(tag = "error", content = "message")]
#[serde(bound(deserialize = "'de: 'a"))]
pub enum SubscribeReposError<'a> {
    #[serde(rename = "FutureCursor")]
    FutureCursor(std::option::Option<String>),
    /// If the consumer of the stream can not keep up with events, and a backlog gets too large, the server will drop the connection.
    #[serde(rename = "ConsumerTooSlow")]
    ConsumerTooSlow(std::option::Option<String>),
}

impl std::fmt::Display for SubscribeReposError<'_> {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Self::FutureCursor(msg) => {
                write!(f, "FutureCursor")?;
                if let Some(msg) = msg {
                    write!(f, ": {}", msg)?;
                }
                Ok(())
            }
            Self::ConsumerTooSlow(msg) => {
                write!(f, "ConsumerTooSlow")?;
                if let Some(msg) = msg {
                    write!(f, ": {}", msg)?;
                }
                Ok(())
            }
            Self::Unknown(err) => write!(f, "Unknown error: {:?}", err),
        }
    }
}

/// A repo operation, ie a mutation of a single record.
#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic,
    bon::Builder
)]
#[serde(rename_all = "camelCase")]
pub struct RepoOp<'a> {
    #[serde(borrow)]
    #[builder(into)]
    pub action: jacquard_common::CowStr<'a>,
    /// For creates and updates, the new record CID. For deletions, null.
    #[serde(borrow)]
    pub cid: jacquard_common::types::cid::CidLink<'a>,
    #[serde(borrow)]
    #[builder(into)]
    pub path: jacquard_common::CowStr<'a>,
    /// For updates and deletes, the previous record CID (required for inductive firehose). For creations, field should not be defined.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub prev: Option<jacquard_common::types::cid::CidLink<'a>>,
}

/// Updates the repo to a new state, without necessarily including that state on the firehose. Used to recover from broken commit streams, data loss incidents, or in situations where upstream host does not know recent state of the repository.
#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic,
    bon::Builder
)]
#[serde(rename_all = "camelCase")]
pub struct Sync<'a> {
    /// CAR file containing the commit, as a block. The CAR header must include the commit block CID as the first 'root'.
    pub blocks: bytes::Bytes,
    /// The account this repo event corresponds to. Must match that in the commit object.
    #[serde(borrow)]
    pub did: jacquard_common::types::string::Did<'a>,
    /// The rev of the commit. This value must match that in the commit object.
    #[serde(borrow)]
    #[builder(into)]
    pub rev: jacquard_common::CowStr<'a>,
    /// The stream sequence number of this message.
    pub seq: i64,
    /// Timestamp of when this message was originally broadcast.
    pub time: jacquard_common::types::string::Datetime,
}