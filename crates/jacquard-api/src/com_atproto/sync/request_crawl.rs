// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: com.atproto.sync.requestCrawl
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    bon::Builder
)]
#[serde(rename_all = "camelCase")]
#[builder(start_fn = new)]
pub struct RequestCrawl<'a> {
    ///Hostname of the current service (eg, PDS) that is requesting to be crawled.
    #[serde(borrow)]
    #[builder(into)]
    pub hostname: jacquard_common::CowStr<'a>,
    #[serde(flatten)]
    #[serde(borrow)]
    #[builder(default)]
    pub extra_data: ::std::collections::BTreeMap<
        ::jacquard_common::smol_str::SmolStr,
        ::jacquard_common::types::value::Data<'a>,
    >,
}

impl jacquard_common::IntoStatic for RequestCrawl<'_> {
    type Output = RequestCrawl<'static>;
    fn into_static(self) -> Self::Output {
        RequestCrawl {
            hostname: self.hostname.into_static(),
            extra_data: self.extra_data.into_static(),
        }
    }
}

#[jacquard_derive::open_union]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    thiserror::Error,
    miette::Diagnostic
)]
#[serde(tag = "error", content = "message")]
#[serde(bound(deserialize = "'de: 'a"))]
pub enum RequestCrawlError<'a> {
    #[serde(rename = "HostBanned")]
    HostBanned(std::option::Option<String>),
}

impl std::fmt::Display for RequestCrawlError<'_> {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Self::HostBanned(msg) => {
                write!(f, "HostBanned")?;
                if let Some(msg) = msg {
                    write!(f, ": {}", msg)?;
                }
                Ok(())
            }
            Self::Unknown(err) => write!(f, "Unknown error: {:?}", err),
        }
    }
}

impl jacquard_common::IntoStatic for RequestCrawlError<'_> {
    type Output = RequestCrawlError<'static>;
    fn into_static(self) -> Self::Output {
        match self {
            RequestCrawlError::HostBanned(v) => {
                RequestCrawlError::HostBanned(v.into_static())
            }
            RequestCrawlError::Unknown(v) => RequestCrawlError::Unknown(v.into_static()),
        }
    }
}

///Response type for
///com.atproto.sync.requestCrawl
pub struct RequestCrawlResponse;
impl jacquard_common::xrpc::XrpcResp for RequestCrawlResponse {
    const NSID: &'static str = "com.atproto.sync.requestCrawl";
    const ENCODING: &'static str = "application/json";
    type Output<'de> = ();
    type Err<'de> = RequestCrawlError<'de>;
}

impl<'de> jacquard_common::xrpc::XrpcRequest<'de> for RequestCrawl<'de> {
    const NSID: &'static str = "com.atproto.sync.requestCrawl";
    const METHOD: jacquard_common::xrpc::XrpcMethod = jacquard_common::xrpc::XrpcMethod::Procedure(
        "application/json",
    );
    type Response = RequestCrawlResponse;
}