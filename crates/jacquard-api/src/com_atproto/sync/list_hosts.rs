// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: com.atproto.sync.listHosts
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

#[jacquard_derive::lexicon]
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct Host<'a> {
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub account_count: std::option::Option<i64>,
    ///hostname of server; not a URL (no scheme)
    #[serde(borrow)]
    pub hostname: jacquard_common::CowStr<'a>,
    ///Recent repo stream event sequence number. May be delayed from actual stream processing (eg, persisted cursor not in-memory cursor).
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub seq: std::option::Option<i64>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub status: std::option::Option<crate::com_atproto::sync::HostStatus<'a>>,
}

#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq, Default)]
#[serde(rename_all = "camelCase")]
pub struct ListHosts<'a> {
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub cursor: std::option::Option<jacquard_common::CowStr<'a>>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub limit: std::option::Option<i64>,
}

impl Default for ListHosts<'_> {
    fn default() -> Self {
        Self {
            cursor: Default::default(),
            limit: Some(200i64),
        }
    }
}

#[jacquard_derive::lexicon]
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct ListHostsOutput<'a> {
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub cursor: std::option::Option<jacquard_common::CowStr<'a>>,
    ///Sort order is not formally specified. Recommended order is by time host was first seen by the server, with oldest first.
    #[serde(borrow)]
    pub hosts: Vec<jacquard_common::types::value::Data<'a>>,
}

impl jacquard_common::types::xrpc::XrpcRequest for ListHosts<'_> {
    const NSID: &'static str = "com.atproto.sync.listHosts";
    const METHOD: jacquard_common::types::xrpc::XrpcMethod = jacquard_common::types::xrpc::XrpcMethod::Query;
    const OUTPUT_ENCODING: &'static str = "application/json";
    type Output<'de> = ListHostsOutput<'de>;
    type Err<'de> = jacquard_common::types::xrpc::GenericError;
}