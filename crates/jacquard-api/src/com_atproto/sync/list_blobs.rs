// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: com.atproto.sync.listBlobs
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    bon::Builder,
    jacquard_derive::IntoStatic
)]
#[builder(start_fn = new)]
#[serde(rename_all = "camelCase")]
pub struct ListBlobs<'a> {
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    #[builder(into)]
    pub cursor: std::option::Option<jacquard_common::CowStr<'a>>,
    #[serde(borrow)]
    pub did: jacquard_common::types::string::Did<'a>,
    ///(default: 500, min: 1, max: 1000)
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub limit: std::option::Option<i64>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub since: std::option::Option<jacquard_common::types::string::Tid>,
}

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
pub struct ListBlobsOutput<'a> {
    #[serde(borrow)]
    pub cids: Vec<jacquard_common::types::string::Cid<'a>>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub cursor: std::option::Option<jacquard_common::CowStr<'a>>,
}

#[jacquard_derive::open_union]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    thiserror::Error,
    miette::Diagnostic
)]
#[serde(tag = "error", content = "message")]
#[serde(bound(deserialize = "'de: 'a"))]
pub enum ListBlobsError<'a> {
    #[serde(rename = "RepoNotFound")]
    RepoNotFound(std::option::Option<String>),
    #[serde(rename = "RepoTakendown")]
    RepoTakendown(std::option::Option<String>),
    #[serde(rename = "RepoSuspended")]
    RepoSuspended(std::option::Option<String>),
    #[serde(rename = "RepoDeactivated")]
    RepoDeactivated(std::option::Option<String>),
}

impl std::fmt::Display for ListBlobsError<'_> {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Self::RepoNotFound(msg) => {
                write!(f, "RepoNotFound")?;
                if let Some(msg) = msg {
                    write!(f, ": {}", msg)?;
                }
                Ok(())
            }
            Self::RepoTakendown(msg) => {
                write!(f, "RepoTakendown")?;
                if let Some(msg) = msg {
                    write!(f, ": {}", msg)?;
                }
                Ok(())
            }
            Self::RepoSuspended(msg) => {
                write!(f, "RepoSuspended")?;
                if let Some(msg) = msg {
                    write!(f, ": {}", msg)?;
                }
                Ok(())
            }
            Self::RepoDeactivated(msg) => {
                write!(f, "RepoDeactivated")?;
                if let Some(msg) = msg {
                    write!(f, ": {}", msg)?;
                }
                Ok(())
            }
            Self::Unknown(err) => write!(f, "Unknown error: {:?}", err),
        }
    }
}

impl jacquard_common::IntoStatic for ListBlobsError<'_> {
    type Output = ListBlobsError<'static>;
    fn into_static(self) -> Self::Output {
        match self {
            ListBlobsError::RepoNotFound(v) => {
                ListBlobsError::RepoNotFound(v.into_static())
            }
            ListBlobsError::RepoTakendown(v) => {
                ListBlobsError::RepoTakendown(v.into_static())
            }
            ListBlobsError::RepoSuspended(v) => {
                ListBlobsError::RepoSuspended(v.into_static())
            }
            ListBlobsError::RepoDeactivated(v) => {
                ListBlobsError::RepoDeactivated(v.into_static())
            }
            ListBlobsError::Unknown(v) => ListBlobsError::Unknown(v.into_static()),
        }
    }
}

///Response type for
///com.atproto.sync.listBlobs
pub struct ListBlobsResponse;
impl jacquard_common::xrpc::XrpcResp for ListBlobsResponse {
    const NSID: &'static str = "com.atproto.sync.listBlobs";
    const ENCODING: &'static str = "application/json";
    type Output<'de> = ListBlobsOutput<'de>;
    type Err<'de> = ListBlobsError<'de>;
}

impl<'de> jacquard_common::xrpc::XrpcRequest<'de> for ListBlobs<'de> {
    const NSID: &'static str = "com.atproto.sync.listBlobs";
    const METHOD: jacquard_common::xrpc::XrpcMethod = jacquard_common::xrpc::XrpcMethod::Query;
    type Response = ListBlobsResponse;
}