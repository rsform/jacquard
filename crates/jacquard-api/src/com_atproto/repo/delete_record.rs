// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: com.atproto.repo.deleteRecord
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    bon::Builder,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
#[builder(start_fn = new)]
pub struct DeleteRecord<'a> {
    ///The NSID of the record collection.
    #[serde(borrow)]
    pub collection: jacquard_common::types::string::Nsid<'a>,
    ///The handle or DID of the repo (aka, current account).
    #[serde(borrow)]
    pub repo: jacquard_common::types::ident::AtIdentifier<'a>,
    ///The Record Key.
    #[serde(borrow)]
    pub rkey: jacquard_common::types::string::RecordKey<
        jacquard_common::types::string::Rkey<'a>,
    >,
    ///Compare and swap with the previous commit by CID.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub swap_commit: std::option::Option<jacquard_common::types::string::Cid<'a>>,
    ///Compare and swap with the previous record by CID.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub swap_record: std::option::Option<jacquard_common::types::string::Cid<'a>>,
    #[serde(flatten)]
    #[serde(borrow)]
    #[builder(default)]
    pub extra_data: ::std::collections::BTreeMap<
        ::jacquard_common::smol_str::SmolStr,
        ::jacquard_common::types::value::Data<'a>,
    >,
}

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
pub struct DeleteRecordOutput<'a> {
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub commit: std::option::Option<crate::com_atproto::repo::CommitMeta<'a>>,
}

#[jacquard_derive::open_union]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    thiserror::Error,
    miette::Diagnostic
)]
#[serde(tag = "error", content = "message")]
#[serde(bound(deserialize = "'de: 'a"))]
pub enum DeleteRecordError<'a> {
    #[serde(rename = "InvalidSwap")]
    InvalidSwap(std::option::Option<String>),
}

impl std::fmt::Display for DeleteRecordError<'_> {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Self::InvalidSwap(msg) => {
                write!(f, "InvalidSwap")?;
                if let Some(msg) = msg {
                    write!(f, ": {}", msg)?;
                }
                Ok(())
            }
            Self::Unknown(err) => write!(f, "Unknown error: {:?}", err),
        }
    }
}

impl jacquard_common::IntoStatic for DeleteRecordError<'_> {
    type Output = DeleteRecordError<'static>;
    fn into_static(self) -> Self::Output {
        match self {
            DeleteRecordError::InvalidSwap(v) => {
                DeleteRecordError::InvalidSwap(v.into_static())
            }
            DeleteRecordError::Unknown(v) => DeleteRecordError::Unknown(v.into_static()),
        }
    }
}

///Response type for
///com.atproto.repo.deleteRecord
pub struct DeleteRecordResponse;
impl jacquard_common::xrpc::XrpcResp for DeleteRecordResponse {
    const NSID: &'static str = "com.atproto.repo.deleteRecord";
    const ENCODING: &'static str = "application/json";
    type Output<'de> = DeleteRecordOutput<'de>;
    type Err<'de> = DeleteRecordError<'de>;
}

impl<'de> jacquard_common::xrpc::XrpcRequest<'de> for DeleteRecord<'de> {
    const NSID: &'static str = "com.atproto.repo.deleteRecord";
    const METHOD: jacquard_common::xrpc::XrpcMethod = jacquard_common::xrpc::XrpcMethod::Procedure(
        "application/json",
    );
    type Response = DeleteRecordResponse;
}