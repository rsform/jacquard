// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: com.atproto.repo.uploadBlob
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq, bon::Builder)]
#[builder(start_fn = new)]
#[serde(rename_all = "camelCase")]
pub struct UploadBlob {
    pub body: bytes::Bytes,
}

impl jacquard_common::IntoStatic for UploadBlob {
    type Output = UploadBlob;
    fn into_static(self) -> Self::Output {
        self
    }
}

#[jacquard_derive::lexicon]
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct UploadBlobOutput<'a> {
    #[serde(borrow)]
    pub blob: jacquard_common::types::blob::Blob<'a>,
}

impl jacquard_common::IntoStatic for UploadBlobOutput<'_> {
    type Output = UploadBlobOutput<'static>;
    fn into_static(self) -> Self::Output {
        UploadBlobOutput {
            blob: self.blob.into_static(),
            extra_data: self.extra_data.into_static(),
        }
    }
}

///Response type for
///com.atproto.repo.uploadBlob
pub struct UploadBlobResponse;
impl<'de> jacquard_common::types::xrpc::XrpcResp<'de> for UploadBlobResponse {
    const ENCODING: &'static str = "application/json";
    type Output = UploadBlobOutput<'de>;
    type Err = jacquard_common::types::xrpc::GenericError<'de>;
}

impl<'de> jacquard_common::types::xrpc::XrpcRequest<'de> for UploadBlob {
    const NSID: &'static str = "com.atproto.repo.uploadBlob";
    const METHOD: jacquard_common::types::xrpc::XrpcMethod =
        jacquard_common::types::xrpc::XrpcMethod::Procedure("*/*");
    type Response<'de1> = UploadBlobResponse;
    fn encode_body(&self) -> Result<Vec<u8>, jacquard_common::types::xrpc::EncodeError> {
        Ok(self.body.to_vec())
    }
    fn decode_body(body: &'de [u8]) -> Result<Box<Self>, jacquard_common::error::DecodeError> {
        Ok(Box::new(Self {
            body: bytes::Bytes::copy_from_slice(body),
        }))
    }
}
