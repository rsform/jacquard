// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: com.atproto.repo.describeRepo
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq, bon::Builder)]
#[builder(start_fn = new)]
#[serde(rename_all = "camelCase")]
pub struct DescribeRepo<'a> {
    #[serde(borrow)]
    pub repo: jacquard_common::types::ident::AtIdentifier<'a>,
}

impl jacquard_common::IntoStatic for DescribeRepo<'_> {
    type Output = DescribeRepo<'static>;
    fn into_static(self) -> Self::Output {
        DescribeRepo {
            repo: self.repo.into_static(),
        }
    }
}

#[jacquard_derive::lexicon]
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct DescribeRepoOutput<'a> {
    ///List of all the collections (NSIDs) for which this repo contains at least one record.
    #[serde(borrow)]
    pub collections: Vec<jacquard_common::types::string::Nsid<'a>>,
    #[serde(borrow)]
    pub did: jacquard_common::types::string::Did<'a>,
    ///The complete DID document for this account.
    #[serde(borrow)]
    pub did_doc: jacquard_common::types::value::Data<'a>,
    #[serde(borrow)]
    pub handle: jacquard_common::types::string::Handle<'a>,
    ///Indicates if handle is currently valid (resolves bi-directionally)
    pub handle_is_correct: bool,
}

impl jacquard_common::IntoStatic for DescribeRepoOutput<'_> {
    type Output = DescribeRepoOutput<'static>;
    fn into_static(self) -> Self::Output {
        DescribeRepoOutput {
            collections: self.collections.into_static(),
            did: self.did.into_static(),
            did_doc: self.did_doc.into_static(),
            handle: self.handle.into_static(),
            handle_is_correct: self.handle_is_correct.into_static(),
            extra_data: self.extra_data.into_static(),
        }
    }
}

///Response type for
///com.atproto.repo.describeRepo
pub struct DescribeRepoResponse;
impl<'de> jacquard_common::types::xrpc::XrpcResp<'de> for DescribeRepoResponse {
    const ENCODING: &'static str = "application/json";
    type Output = DescribeRepoOutput<'de>;
    type Err = jacquard_common::types::xrpc::GenericError<'de>;
}

impl<'de> jacquard_common::types::xrpc::XrpcRequest<'de> for DescribeRepo<'de> {
    const NSID: &'static str = "com.atproto.repo.describeRepo";
    const METHOD: jacquard_common::types::xrpc::XrpcMethod =
        jacquard_common::types::xrpc::XrpcMethod::Query;
    type Response<'de1> = DescribeRepoResponse;
}
