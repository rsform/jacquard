// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: com.atproto.repo.describeRepo
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct DescribeRepo<'a> {
    #[serde(borrow)]
    pub repo: jacquard_common::types::ident::AtIdentifier<'a>,
}

#[jacquard_derive::lexicon]
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct DescribeRepoOutput<'a> {
    ///List of all the collections (NSIDs) for which this repo contains at least one record.
    #[serde(borrow)]
    pub collections: Vec<jacquard_common::types::string::Nsid<'a>>,
    #[serde(borrow)]
    pub did: jacquard_common::types::string::Did<'a>,
    ///The complete DID document for this account.
    #[serde(borrow)]
    pub did_doc: jacquard_common::types::value::Data<'a>,
    #[serde(borrow)]
    pub handle: jacquard_common::types::string::Handle<'a>,
    ///Indicates if handle is currently valid (resolves bi-directionally)
    pub handle_is_correct: bool,
}

impl jacquard_common::types::xrpc::XrpcRequest for DescribeRepo<'_> {
    const NSID: &'static str = "com.atproto.repo.describeRepo";
    const METHOD: jacquard_common::types::xrpc::XrpcMethod = jacquard_common::types::xrpc::XrpcMethod::Query;
    const OUTPUT_ENCODING: &'static str = "application/json";
    type Output<'de> = DescribeRepoOutput<'de>;
    type Err<'de> = jacquard_common::types::xrpc::GenericError;
}