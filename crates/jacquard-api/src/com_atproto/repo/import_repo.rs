// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: com.atproto.repo.importRepo
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    bon::Builder
)]
#[builder(start_fn = new)]
#[serde(rename_all = "camelCase")]
pub struct ImportRepo {
    pub body: bytes::Bytes,
}

impl jacquard_common::IntoStatic for ImportRepo {
    type Output = ImportRepo;
    fn into_static(self) -> Self::Output {
        self
    }
}

impl jacquard_common::types::xrpc::XrpcRequest for ImportRepo {
    const NSID: &'static str = "com.atproto.repo.importRepo";
    const METHOD: jacquard_common::types::xrpc::XrpcMethod = jacquard_common::types::xrpc::XrpcMethod::Procedure(
        "application/vnd.ipld.car",
    );
    const OUTPUT_ENCODING: &'static str = "application/json";
    type Output<'de> = ();
    type Err<'de> = jacquard_common::types::xrpc::GenericError<'de>;
    fn encode_body(&self) -> Result<Vec<u8>, jacquard_common::types::xrpc::EncodeError> {
        Ok(self.body.to_vec())
    }
}