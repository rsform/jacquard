// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: com.atproto.repo.importRepo
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    bon::Builder,
    jacquard_derive::IntoStatic
)]
#[builder(start_fn = new)]
#[serde(rename_all = "camelCase")]
pub struct ImportRepo {
    pub body: bytes::Bytes,
}

///Response type for
///com.atproto.repo.importRepo
pub struct ImportRepoResponse;
impl jacquard_common::xrpc::XrpcResp for ImportRepoResponse {
    const NSID: &'static str = "com.atproto.repo.importRepo";
    const ENCODING: &'static str = "application/json";
    type Output<'de> = ();
    type Err<'de> = jacquard_common::xrpc::GenericError<'de>;
}

impl<'de> jacquard_common::xrpc::XrpcRequest<'de> for ImportRepo {
    const NSID: &'static str = "com.atproto.repo.importRepo";
    const METHOD: jacquard_common::xrpc::XrpcMethod = jacquard_common::xrpc::XrpcMethod::Procedure(
        "application/vnd.ipld.car",
    );
    type Response = ImportRepoResponse;
    fn encode_body(&self) -> Result<Vec<u8>, jacquard_common::xrpc::EncodeError> {
        Ok(self.body.to_vec())
    }
    fn decode_body(
        body: &'de [u8],
    ) -> Result<Box<Self>, jacquard_common::error::DecodeError> {
        Ok(
            Box::new(Self {
                body: bytes::Bytes::copy_from_slice(body),
            }),
        )
    }
}

///Endpoint type for
///com.atproto.repo.importRepo
pub struct ImportRepoRequest;
impl jacquard_common::xrpc::XrpcEndpoint for ImportRepoRequest {
    const PATH: &'static str = "/xrpc/com.atproto.repo.importRepo";
    const METHOD: jacquard_common::xrpc::XrpcMethod = jacquard_common::xrpc::XrpcMethod::Procedure(
        "application/vnd.ipld.car",
    );
    type Request<'de> = ImportRepo;
    type Response = ImportRepoResponse;
}