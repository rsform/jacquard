// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: com.crabdance.nandi.post
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
pub struct Post<'a> {
    ///The main content of the blog post in markdown
    #[serde(borrow)]
    pub content: jacquard_common::CowStr<'a>,
    pub created_at: jacquard_common::types::string::Datetime,
    ///Whether the post is published or draft
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub published: std::option::Option<bool>,
    ///Optional summary/excerpt of the post
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub summary: std::option::Option<jacquard_common::CowStr<'a>>,
    ///Tags for categorizing the post
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub tags: std::option::Option<Vec<jacquard_common::CowStr<'a>>>,
    ///The title of the blog post
    #[serde(borrow)]
    pub title: jacquard_common::CowStr<'a>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub updated_at: std::option::Option<jacquard_common::types::string::Datetime>,
}

impl jacquard_common::types::collection::Collection for Post<'_> {
    const NSID: &'static str = "com.crabdance.nandi.post";
}