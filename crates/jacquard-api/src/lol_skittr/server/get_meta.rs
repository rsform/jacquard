// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: lol.skittr.server.getMeta
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
pub struct GetMetaOutput<'a> {
    #[serde(borrow)]
    pub software: jacquard_common::CowStr<'a>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub supported_extensions: std::option::Option<Vec<jacquard_common::CowStr<'a>>>,
    #[serde(borrow)]
    pub supported_lexicons: Vec<jacquard_common::CowStr<'a>>,
    #[serde(borrow)]
    pub version: jacquard_common::CowStr<'a>,
}

/// XRPC request marker type
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize, serde::Deserialize)]
pub struct GetMeta;
///Response type for
///lol.skittr.server.getMeta
pub struct GetMetaResponse;
impl jacquard_common::xrpc::XrpcResp for GetMetaResponse {
    const NSID: &'static str = "lol.skittr.server.getMeta";
    const ENCODING: &'static str = "application/json";
    type Output<'de> = GetMetaOutput<'de>;
    type Err<'de> = jacquard_common::xrpc::GenericError<'de>;
}

impl<'de> jacquard_common::xrpc::XrpcRequest<'de> for GetMeta {
    const NSID: &'static str = "lol.skittr.server.getMeta";
    const METHOD: jacquard_common::xrpc::XrpcMethod = jacquard_common::xrpc::XrpcMethod::Query;
    type Response = GetMetaResponse;
}