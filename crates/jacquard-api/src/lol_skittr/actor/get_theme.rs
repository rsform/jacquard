// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: lol.skittr.actor.getTheme
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    bon::Builder,
    jacquard_derive::IntoStatic
)]
#[builder(start_fn = new)]
#[serde(rename_all = "camelCase")]
pub struct GetTheme<'a> {
    #[serde(borrow)]
    pub actor: jacquard_common::types::ident::AtIdentifier<'a>,
}

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
pub struct GetThemeOutput<'a> {
    #[serde(flatten)]
    #[serde(borrow)]
    pub value: crate::lol_skittr::actor::theme::Theme<'a>,
}

///Response type for
///lol.skittr.actor.getTheme
pub struct GetThemeResponse;
impl jacquard_common::xrpc::XrpcResp for GetThemeResponse {
    const NSID: &'static str = "lol.skittr.actor.getTheme";
    const ENCODING: &'static str = "application/json";
    type Output<'de> = GetThemeOutput<'de>;
    type Err<'de> = jacquard_common::xrpc::GenericError<'de>;
}

impl<'de> jacquard_common::xrpc::XrpcRequest<'de> for GetTheme<'de> {
    const NSID: &'static str = "lol.skittr.actor.getTheme";
    const METHOD: jacquard_common::xrpc::XrpcMethod = jacquard_common::xrpc::XrpcMethod::Query;
    type Response = GetThemeResponse;
}