// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: place.atwork.getListings
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

///A job listing record with metadata for strong references
#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
pub struct ListingRecord<'a> {
    ///CID of the listing record
    #[serde(borrow)]
    pub cid: jacquard_common::types::string::Cid<'a>,
    ///AT-URI of the listing (at://did/place.atwork.listing/rkey)
    #[serde(borrow)]
    pub uri: jacquard_common::types::string::AtUri<'a>,
    ///The full job listing record
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub value: std::option::Option<crate::place_atwork::listing::Listing<'a>>,
}

#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    bon::Builder,
    jacquard_derive::IntoStatic
)]
#[builder(start_fn = new)]
#[serde(rename_all = "camelCase")]
pub struct GetListings<'a> {
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    #[builder(into)]
    pub identity: std::option::Option<jacquard_common::CowStr<'a>>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    #[builder(into)]
    pub tag: std::option::Option<jacquard_common::CowStr<'a>>,
}

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
pub struct GetListingsOutput<'a> {
    #[serde(borrow)]
    pub listings: Vec<jacquard_common::types::value::Data<'a>>,
}

///Response type for
///place.atwork.getListings
pub struct GetListingsResponse;
impl jacquard_common::xrpc::XrpcResp for GetListingsResponse {
    const NSID: &'static str = "place.atwork.getListings";
    const ENCODING: &'static str = "application/json";
    type Output<'de> = GetListingsOutput<'de>;
    type Err<'de> = jacquard_common::xrpc::GenericError<'de>;
}

impl<'a> jacquard_common::xrpc::XrpcRequest for GetListings<'a> {
    const NSID: &'static str = "place.atwork.getListings";
    const METHOD: jacquard_common::xrpc::XrpcMethod = jacquard_common::xrpc::XrpcMethod::Query;
    type Response = GetListingsResponse;
}

///Endpoint type for
///place.atwork.getListings
pub struct GetListingsRequest;
impl jacquard_common::xrpc::XrpcEndpoint for GetListingsRequest {
    const PATH: &'static str = "/xrpc/place.atwork.getListings";
    const METHOD: jacquard_common::xrpc::XrpcMethod = jacquard_common::xrpc::XrpcMethod::Query;
    type Request<'de> = GetListings<'de>;
    type Response = GetListingsResponse;
}