// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: place.atwork.getListing
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    bon::Builder,
    jacquard_derive::IntoStatic
)]
#[builder(start_fn = new)]
#[serde(rename_all = "camelCase")]
pub struct GetListing<'a> {
    #[serde(borrow)]
    pub repo: jacquard_common::types::ident::AtIdentifier<'a>,
    #[serde(borrow)]
    #[builder(into)]
    pub rkey: jacquard_common::CowStr<'a>,
}

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
pub struct GetListingOutput<'a> {
    ///CID of the listing record
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub cid: std::option::Option<jacquard_common::types::string::Cid<'a>>,
    ///AT-URI of the listing
    #[serde(borrow)]
    pub uri: jacquard_common::types::string::AtUri<'a>,
    ///The job listing record
    #[serde(borrow)]
    pub value: crate::place_atwork::listing::Listing<'a>,
}

#[jacquard_derive::open_union]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    thiserror::Error,
    miette::Diagnostic,
    jacquard_derive::IntoStatic
)]
#[serde(tag = "error", content = "message")]
#[serde(bound(deserialize = "'de: 'a"))]
pub enum GetListingError<'a> {
    ///The requested listing does not exist
    #[serde(rename = "ListingNotFound")]
    ListingNotFound(std::option::Option<String>),
    ///Failed to parse the listing data
    #[serde(rename = "ListingParseFailed")]
    ListingParseFailed(std::option::Option<String>),
    ///Failed to fetch the listing from storage
    #[serde(rename = "ListingFetchFailed")]
    ListingFetchFailed(std::option::Option<String>),
}

impl std::fmt::Display for GetListingError<'_> {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Self::ListingNotFound(msg) => {
                write!(f, "ListingNotFound")?;
                if let Some(msg) = msg {
                    write!(f, ": {}", msg)?;
                }
                Ok(())
            }
            Self::ListingParseFailed(msg) => {
                write!(f, "ListingParseFailed")?;
                if let Some(msg) = msg {
                    write!(f, ": {}", msg)?;
                }
                Ok(())
            }
            Self::ListingFetchFailed(msg) => {
                write!(f, "ListingFetchFailed")?;
                if let Some(msg) = msg {
                    write!(f, ": {}", msg)?;
                }
                Ok(())
            }
            Self::Unknown(err) => write!(f, "Unknown error: {:?}", err),
        }
    }
}

///Response type for
///place.atwork.getListing
pub struct GetListingResponse;
impl jacquard_common::xrpc::XrpcResp for GetListingResponse {
    const NSID: &'static str = "place.atwork.getListing";
    const ENCODING: &'static str = "application/json";
    type Output<'de> = GetListingOutput<'de>;
    type Err<'de> = GetListingError<'de>;
}

impl<'de> jacquard_common::xrpc::XrpcRequest<'de> for GetListing<'de> {
    const NSID: &'static str = "place.atwork.getListing";
    const METHOD: jacquard_common::xrpc::XrpcMethod = jacquard_common::xrpc::XrpcMethod::Query;
    type Response = GetListingResponse;
}

///Endpoint type for
///place.atwork.getListing
pub struct GetListingRequest;
impl jacquard_common::xrpc::XrpcEndpoint for GetListingRequest {
    const PATH: &'static str = "/xrpc/place.atwork.getListing";
    const METHOD: jacquard_common::xrpc::XrpcMethod = jacquard_common::xrpc::XrpcMethod::Query;
    type Request<'de> = GetListing<'de>;
    type Response = GetListingResponse;
}