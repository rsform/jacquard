// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: place.atwork.searchListings
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

///A job listing record with metadata for strong references
#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
pub struct ListingRecord<'a> {
    ///CID of the listing record
    #[serde(borrow)]
    pub cid: jacquard_common::types::string::Cid<'a>,
    ///AT-URI of the listing (at://did/place.atwork.listing/rkey)
    #[serde(borrow)]
    pub uri: jacquard_common::types::string::AtUri<'a>,
    ///The full job listing record
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub value: std::option::Option<crate::place_atwork::listing::Listing<'a>>,
}

#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    bon::Builder,
    jacquard_derive::IntoStatic
)]
#[builder(start_fn = new)]
#[serde(rename_all = "camelCase")]
pub struct SearchListings<'a> {
    #[serde(borrow)]
    #[builder(into)]
    pub query: jacquard_common::CowStr<'a>,
}

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
pub struct SearchListingsOutput<'a> {
    #[serde(borrow)]
    pub listings: Vec<jacquard_common::types::value::Data<'a>>,
}

#[jacquard_derive::open_union]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    thiserror::Error,
    miette::Diagnostic,
    jacquard_derive::IntoStatic
)]
#[serde(tag = "error", content = "message")]
#[serde(bound(deserialize = "'de: 'a"))]
pub enum SearchListingsError<'a> {
    ///Failed to search listings
    #[serde(rename = "SearchFailed")]
    SearchFailed(std::option::Option<String>),
}

impl std::fmt::Display for SearchListingsError<'_> {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Self::SearchFailed(msg) => {
                write!(f, "SearchFailed")?;
                if let Some(msg) = msg {
                    write!(f, ": {}", msg)?;
                }
                Ok(())
            }
            Self::Unknown(err) => write!(f, "Unknown error: {:?}", err),
        }
    }
}

///Response type for
///place.atwork.searchListings
pub struct SearchListingsResponse;
impl jacquard_common::xrpc::XrpcResp for SearchListingsResponse {
    const NSID: &'static str = "place.atwork.searchListings";
    const ENCODING: &'static str = "application/json";
    type Output<'de> = SearchListingsOutput<'de>;
    type Err<'de> = SearchListingsError<'de>;
}

impl<'a> jacquard_common::xrpc::XrpcRequest for SearchListings<'a> {
    const NSID: &'static str = "place.atwork.searchListings";
    const METHOD: jacquard_common::xrpc::XrpcMethod = jacquard_common::xrpc::XrpcMethod::Query;
    type Response = SearchListingsResponse;
}

///Endpoint type for
///place.atwork.searchListings
pub struct SearchListingsRequest;
impl jacquard_common::xrpc::XrpcEndpoint for SearchListingsRequest {
    const PATH: &'static str = "/xrpc/place.atwork.searchListings";
    const METHOD: jacquard_common::xrpc::XrpcMethod = jacquard_common::xrpc::XrpcMethod::Query;
    type Request<'de> = SearchListings<'de>;
    type Response = SearchListingsResponse;
}