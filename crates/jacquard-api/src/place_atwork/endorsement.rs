// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: place.atwork.endorsement
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

/// A cryptographically-verified professional endorsement between two identities.
#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic,
    bon::Builder
)]
#[serde(rename_all = "camelCase")]
pub struct Endorsement<'a> {
    /// Timestamp when the endorsement was created.
    pub created_at: jacquard_common::types::string::Datetime,
    /// The DID of the identity giving the endorsement.
    #[serde(borrow)]
    pub giver: jacquard_common::types::string::Did<'a>,
    /// The DID of the identity receiving the endorsement.
    #[serde(borrow)]
    pub receiver: jacquard_common::types::string::Did<'a>,
    /// Verified signatures from endorsement proofs (strong references).
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub signatures: Option<Vec<crate::com_atproto::repo::strong_ref::StrongRef<'a>>>,
    /// The endorsement text content.
    #[serde(borrow)]
    #[builder(into)]
    pub text: jacquard_common::CowStr<'a>,
}

/// Typed wrapper for GetRecord response with this collection's record type.
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
pub struct EndorsementGetRecordOutput<'a> {
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub cid: std::option::Option<jacquard_common::types::string::Cid<'a>>,
    #[serde(borrow)]
    pub uri: jacquard_common::types::string::AtUri<'a>,
    #[serde(borrow)]
    pub value: Endorsement<'a>,
}

/// Marker type for deserializing records from this collection.
pub struct EndorsementRecord;
impl jacquard_common::xrpc::XrpcResp for EndorsementRecord {
    const NSID: &'static str = "place.atwork.endorsement";
    const ENCODING: &'static str = "application/json";
    type Output<'de> = EndorsementGetRecordOutput<'de>;
    type Err<'de> = jacquard_common::types::collection::RecordError<'de>;
}

impl jacquard_common::types::collection::Collection for Endorsement<'_> {
    const NSID: &'static str = "place.atwork.endorsement";
    type Record = EndorsementRecord;
}

impl From<EndorsementGetRecordOutput<'_>> for Endorsement<'_> {
    fn from(output: EndorsementGetRecordOutput<'_>) -> Self {
        use jacquard_common::IntoStatic;
        output.value.into_static()
    }
}