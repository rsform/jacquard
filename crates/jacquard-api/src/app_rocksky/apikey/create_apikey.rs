// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: app.rocksky.apikey.createApikey
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic,
    Default
)]
#[serde(rename_all = "camelCase")]
pub struct CreateApikey<'a> {
    /// A description for the API key.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub description: std::option::Option<jacquard_common::CowStr<'a>>,
    /// The name of the API key.
    #[serde(borrow)]
    pub name: jacquard_common::CowStr<'a>,
}

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
pub struct CreateApikeyOutput<'a> {
    #[serde(flatten)]
    #[serde(borrow)]
    pub value: jacquard_common::types::value::Data<'a>,
}

/// Response type for
///app.rocksky.apikey.createApikey
pub struct CreateApikeyResponse;
impl jacquard_common::xrpc::XrpcResp for CreateApikeyResponse {
    const NSID: &'static str = "app.rocksky.apikey.createApikey";
    const ENCODING: &'static str = "application/json";
    type Output<'de> = CreateApikeyOutput<'de>;
    type Err<'de> = jacquard_common::xrpc::GenericError<'de>;
}

impl<'a> jacquard_common::xrpc::XrpcRequest for CreateApikey<'a> {
    const NSID: &'static str = "app.rocksky.apikey.createApikey";
    const METHOD: jacquard_common::xrpc::XrpcMethod = jacquard_common::xrpc::XrpcMethod::Procedure(
        "application/json",
    );
    type Response = CreateApikeyResponse;
}

/// Endpoint type for
///app.rocksky.apikey.createApikey
pub struct CreateApikeyRequest;
impl jacquard_common::xrpc::XrpcEndpoint for CreateApikeyRequest {
    const PATH: &'static str = "/xrpc/app.rocksky.apikey.createApikey";
    const METHOD: jacquard_common::xrpc::XrpcMethod = jacquard_common::xrpc::XrpcMethod::Procedure(
        "application/json",
    );
    type Request<'de> = CreateApikey<'de>;
    type Response = CreateApikeyResponse;
}