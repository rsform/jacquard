// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: app.rocksky.dropbox.defs
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

pub mod download_file;
pub mod get_files;
pub mod get_metadata;
pub mod get_temporary_link;

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic,
    Default
)]
#[serde(rename_all = "camelCase")]
pub struct FileListView<'a> {
    /// A list of files in the Dropbox.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub files: std::option::Option<Vec<crate::app_rocksky::dropbox::FileView<'a>>>,
}

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic,
    Default
)]
#[serde(rename_all = "camelCase")]
pub struct FileView<'a> {
    /// The last modified date and time of the file on the client.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub client_modified: std::option::Option<jacquard_common::types::string::Datetime>,
    /// The unique identifier of the file.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub id: std::option::Option<jacquard_common::CowStr<'a>>,
    /// The name of the file.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub name: std::option::Option<jacquard_common::CowStr<'a>>,
    /// The display path of the file.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub path_display: std::option::Option<jacquard_common::CowStr<'a>>,
    /// The lowercased path of the file.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub path_lower: std::option::Option<jacquard_common::CowStr<'a>>,
    /// The last modified date and time of the file on the server.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub server_modified: std::option::Option<jacquard_common::types::string::Datetime>,
}

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic,
    Default
)]
#[serde(rename_all = "camelCase")]
pub struct TemporaryLinkView<'a> {
    /// The temporary link to access the file.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub link: std::option::Option<jacquard_common::types::string::Uri<'a>>,
}