// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: app.rocksky.playlist.defs
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

pub mod get_playlist;
pub mod get_playlists;

/// A declaration of a playlist.
#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic,
    bon::Builder
)]
#[serde(rename_all = "camelCase")]
pub struct Playlist<'a> {
    /// The Apple Music link of the playlist.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub apple_music_link: Option<jacquard_common::CowStr<'a>>,
    /// The date the playlist was created.
    pub created_at: jacquard_common::types::string::Datetime,
    /// The playlist description.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub description: Option<jacquard_common::CowStr<'a>>,
    /// The name of the playlist.
    #[serde(borrow)]
    #[builder(into)]
    pub name: jacquard_common::CowStr<'a>,
    /// The picture of the playlist.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub picture: Option<jacquard_common::types::blob::Blob<'a>>,
    /// The Spotify link of the playlist.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub spotify_link: Option<jacquard_common::CowStr<'a>>,
    /// The Tidal link of the playlist.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub tidal_link: Option<jacquard_common::CowStr<'a>>,
    /// The tracks in the playlist.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub tracks: Option<Vec<jacquard_common::types::value::Data<'a>>>,
    /// The YouTube link of the playlist.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub youtube_link: Option<jacquard_common::CowStr<'a>>,
}

/// Typed wrapper for GetRecord response with this collection's record type.
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
pub struct PlaylistGetRecordOutput<'a> {
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub cid: std::option::Option<jacquard_common::types::string::Cid<'a>>,
    #[serde(borrow)]
    pub uri: jacquard_common::types::string::AtUri<'a>,
    #[serde(borrow)]
    pub value: Playlist<'a>,
}

/// Marker type for deserializing records from this collection.
pub struct PlaylistRecord;
impl jacquard_common::xrpc::XrpcResp for PlaylistRecord {
    const NSID: &'static str = "app.rocksky.playlist";
    const ENCODING: &'static str = "application/json";
    type Output<'de> = PlaylistGetRecordOutput<'de>;
    type Err<'de> = jacquard_common::types::collection::RecordError<'de>;
}

impl jacquard_common::types::collection::Collection for Playlist<'_> {
    const NSID: &'static str = "app.rocksky.playlist";
    type Record = PlaylistRecord;
}

impl From<PlaylistGetRecordOutput<'_>> for Playlist<'_> {
    fn from(output: PlaylistGetRecordOutput<'_>) -> Self {
        use jacquard_common::IntoStatic;
        output.value.into_static()
    }
}

/// Basic view of a playlist, including its metadata
#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic,
    Default
)]
#[serde(rename_all = "camelCase")]
pub struct PlaylistViewBasic<'a> {
    /// The URL of the cover image for the playlist.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub cover_image_url: std::option::Option<jacquard_common::types::string::Uri<'a>>,
    /// The date and time when the playlist was created.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub created_at: std::option::Option<jacquard_common::types::string::Datetime>,
    /// The URL of the avatar image of the curator.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub curator_avatar_url: std::option::Option<jacquard_common::types::string::Uri<'a>>,
    /// The DID of the curator of the playlist.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub curator_did: std::option::Option<
        jacquard_common::types::ident::AtIdentifier<'a>,
    >,
    /// The handle of the curator of the playlist.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub curator_handle: std::option::Option<
        jacquard_common::types::ident::AtIdentifier<'a>,
    >,
    /// The name of the curator of the playlist.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub curator_name: std::option::Option<jacquard_common::CowStr<'a>>,
    /// A description of the playlist.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub description: std::option::Option<jacquard_common::CowStr<'a>>,
    /// The unique identifier of the playlist.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub id: std::option::Option<jacquard_common::CowStr<'a>>,
    /// The title of the playlist.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub title: std::option::Option<jacquard_common::CowStr<'a>>,
    /// The number of tracks in the playlist.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub track_count: std::option::Option<i64>,
    /// The URI of the playlist.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub uri: std::option::Option<jacquard_common::types::string::AtUri<'a>>,
}

/// Detailed view of a playlist, including its tracks and metadata
#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic,
    Default
)]
#[serde(rename_all = "camelCase")]
pub struct PlaylistViewDetailed<'a> {
    /// The URL of the cover image for the playlist.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub cover_image_url: std::option::Option<jacquard_common::types::string::Uri<'a>>,
    /// The date and time when the playlist was created.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub created_at: std::option::Option<jacquard_common::types::string::Datetime>,
    /// The URL of the avatar image of the curator.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub curator_avatar_url: std::option::Option<jacquard_common::types::string::Uri<'a>>,
    /// The DID of the curator of the playlist.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub curator_did: std::option::Option<
        jacquard_common::types::ident::AtIdentifier<'a>,
    >,
    /// The handle of the curator of the playlist.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub curator_handle: std::option::Option<
        jacquard_common::types::ident::AtIdentifier<'a>,
    >,
    /// The name of the curator of the playlist.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub curator_name: std::option::Option<jacquard_common::CowStr<'a>>,
    /// A description of the playlist.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub description: std::option::Option<jacquard_common::CowStr<'a>>,
    /// The unique identifier of the playlist.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub id: std::option::Option<jacquard_common::CowStr<'a>>,
    /// The title of the playlist.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub title: std::option::Option<jacquard_common::CowStr<'a>>,
    /// A list of tracks in the playlist.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub tracks: std::option::Option<Vec<crate::app_rocksky::song::SongViewBasic<'a>>>,
    /// The URI of the playlist.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub uri: std::option::Option<jacquard_common::types::string::AtUri<'a>>,
}