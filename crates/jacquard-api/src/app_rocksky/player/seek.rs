// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: app.rocksky.player.seek
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    bon::Builder,
    jacquard_derive::IntoStatic
)]
#[builder(start_fn = new)]
#[serde(rename_all = "camelCase")]
pub struct SeekParams {
    pub position: i64,
}

/// XRPC request marker type
#[derive(
    Debug,
    Clone,
    Copy,
    PartialEq,
    Eq,
    serde::Serialize,
    serde::Deserialize,
    jacquard_derive::IntoStatic
)]
pub struct Seek;
///Response type for
///app.rocksky.player.seek
pub struct SeekResponse;
impl jacquard_common::xrpc::XrpcResp for SeekResponse {
    const NSID: &'static str = "app.rocksky.player.seek";
    const ENCODING: &'static str = "application/json";
    type Output<'de> = ();
    type Err<'de> = jacquard_common::xrpc::GenericError<'de>;
}

impl jacquard_common::xrpc::XrpcRequest for Seek {
    const NSID: &'static str = "app.rocksky.player.seek";
    const METHOD: jacquard_common::xrpc::XrpcMethod = jacquard_common::xrpc::XrpcMethod::Procedure(
        "application/json",
    );
    type Response = SeekResponse;
}

///Endpoint type for
///app.rocksky.player.seek
pub struct SeekRequest;
impl jacquard_common::xrpc::XrpcEndpoint for SeekRequest {
    const PATH: &'static str = "/xrpc/app.rocksky.player.seek";
    const METHOD: jacquard_common::xrpc::XrpcMethod = jacquard_common::xrpc::XrpcMethod::Procedure(
        "application/json",
    );
    type Request<'de> = Seek;
    type Response = SeekResponse;
}