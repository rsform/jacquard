// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: app.rocksky.scrobble.defs
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

pub mod create_scrobble;
pub mod get_scrobble;
pub mod get_scrobbles;

/// A declaration of a scrobble.
#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic,
    bon::Builder
)]
#[serde(rename_all = "camelCase")]
pub struct Scrobble<'a> {
    /// The album of the song.
    #[serde(borrow)]
    #[builder(into)]
    pub album: jacquard_common::CowStr<'a>,
    /// The album art of the song.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub album_art: Option<jacquard_common::types::blob::BlobRef<'a>>,
    /// The album artist of the song.
    #[serde(borrow)]
    #[builder(into)]
    pub album_artist: jacquard_common::CowStr<'a>,
    /// The Apple Music link of the song.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub apple_music_link: Option<jacquard_common::types::string::Uri<'a>>,
    /// The artist of the song.
    #[serde(borrow)]
    #[builder(into)]
    pub artist: jacquard_common::CowStr<'a>,
    /// The composer of the song.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub composer: Option<jacquard_common::CowStr<'a>>,
    /// The copyright message of the song.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub copyright_message: Option<jacquard_common::CowStr<'a>>,
    /// The date when the song was created.
    pub created_at: jacquard_common::types::string::Datetime,
    /// The disc number of the song in the album.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    pub disc_number: Option<i64>,
    /// The duration of the song in seconds.
    pub duration: i64,
    /// The genre of the song.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub genre: Option<jacquard_common::CowStr<'a>>,
    /// The label of the song.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub label: Option<jacquard_common::CowStr<'a>>,
    /// The lyrics of the song.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub lyrics: Option<jacquard_common::CowStr<'a>>,
    /// The MusicBrainz ID of the song.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub mbid: Option<jacquard_common::CowStr<'a>>,
    /// The release date of the song.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    pub release_date: Option<jacquard_common::types::string::Datetime>,
    /// The Spotify link of the song.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub spotify_link: Option<jacquard_common::types::string::Uri<'a>>,
    /// The tags of the song.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub tags: Option<Vec<jacquard_common::CowStr<'a>>>,
    /// The Tidal link of the song.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub tidal_link: Option<jacquard_common::types::string::Uri<'a>>,
    /// The title of the song.
    #[serde(borrow)]
    #[builder(into)]
    pub title: jacquard_common::CowStr<'a>,
    /// The track number of the song in the album.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    pub track_number: Option<i64>,
    /// Informations about the song
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub wiki: Option<jacquard_common::CowStr<'a>>,
    /// The year the song was released.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    pub year: Option<i64>,
    /// The YouTube link of the song.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub youtube_link: Option<jacquard_common::types::string::Uri<'a>>,
}

impl<'a> Scrobble<'a> {
    pub fn uri(
        uri: impl Into<jacquard_common::CowStr<'a>>,
    ) -> Result<
        jacquard_common::types::uri::RecordUri<'a, ScrobbleRecord>,
        jacquard_common::types::uri::UriError,
    > {
        jacquard_common::types::uri::RecordUri::try_from_uri(
            jacquard_common::types::string::AtUri::new_cow(uri.into())?,
        )
    }
}

/// Typed wrapper for GetRecord response with this collection's record type.
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
pub struct ScrobbleGetRecordOutput<'a> {
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub cid: std::option::Option<jacquard_common::types::string::Cid<'a>>,
    #[serde(borrow)]
    pub uri: jacquard_common::types::string::AtUri<'a>,
    #[serde(borrow)]
    pub value: Scrobble<'a>,
}

impl From<ScrobbleGetRecordOutput<'_>> for Scrobble<'_> {
    fn from(output: ScrobbleGetRecordOutput<'_>) -> Self {
        use jacquard_common::IntoStatic;
        output.value.into_static()
    }
}

impl jacquard_common::types::collection::Collection for Scrobble<'_> {
    const NSID: &'static str = "app.rocksky.scrobble";
    type Record = ScrobbleRecord;
}

/// Marker type for deserializing records from this collection.
#[derive(Debug, serde::Serialize, serde::Deserialize)]
pub struct ScrobbleRecord;
impl jacquard_common::xrpc::XrpcResp for ScrobbleRecord {
    const NSID: &'static str = "app.rocksky.scrobble";
    const ENCODING: &'static str = "application/json";
    type Output<'de> = ScrobbleGetRecordOutput<'de>;
    type Err<'de> = jacquard_common::types::collection::RecordError<'de>;
}

impl jacquard_common::types::collection::Collection for ScrobbleRecord {
    const NSID: &'static str = "app.rocksky.scrobble";
    type Record = ScrobbleRecord;
}

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic,
    Default
)]
#[serde(rename_all = "camelCase")]
pub struct ScrobbleViewBasic<'a> {
    /// The album of the song.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub album: std::option::Option<jacquard_common::CowStr<'a>>,
    /// The URI of the album.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub album_uri: std::option::Option<jacquard_common::types::string::AtUri<'a>>,
    /// The artist of the song.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub artist: std::option::Option<jacquard_common::CowStr<'a>>,
    /// The URI of the artist.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub artist_uri: std::option::Option<jacquard_common::types::string::AtUri<'a>>,
    /// The album art URL of the song.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub cover: std::option::Option<jacquard_common::types::string::Uri<'a>>,
    /// The timestamp when the scrobble was created.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub date: std::option::Option<jacquard_common::types::string::Datetime>,
    /// The unique identifier of the scrobble.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub id: std::option::Option<jacquard_common::CowStr<'a>>,
    /// The SHA256 hash of the scrobble data.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub sha256: std::option::Option<jacquard_common::CowStr<'a>>,
    /// The title of the scrobble.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub title: std::option::Option<jacquard_common::CowStr<'a>>,
    /// The URI of the scrobble.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub uri: std::option::Option<jacquard_common::types::string::Uri<'a>>,
    /// The handle of the user who created the scrobble.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub user: std::option::Option<jacquard_common::CowStr<'a>>,
}

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic,
    Default
)]
#[serde(rename_all = "camelCase")]
pub struct ScrobbleViewDetailed<'a> {
    /// The album of the song.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub album: std::option::Option<jacquard_common::CowStr<'a>>,
    /// The URI of the album.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub album_uri: std::option::Option<jacquard_common::types::string::AtUri<'a>>,
    /// The artist of the song.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub artist: std::option::Option<jacquard_common::CowStr<'a>>,
    /// The URI of the artist.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub artist_uri: std::option::Option<jacquard_common::types::string::AtUri<'a>>,
    /// The album art URL of the song.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub cover: std::option::Option<jacquard_common::types::string::Uri<'a>>,
    /// The timestamp when the scrobble was created.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub date: std::option::Option<jacquard_common::types::string::Datetime>,
    /// The unique identifier of the scrobble.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub id: std::option::Option<jacquard_common::CowStr<'a>>,
    /// The number of listeners
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub listeners: std::option::Option<i64>,
    /// The number of scrobbles for this song
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub scrobbles: std::option::Option<i64>,
    /// The SHA256 hash of the scrobble data.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub sha256: std::option::Option<jacquard_common::CowStr<'a>>,
    /// The title of the scrobble.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub title: std::option::Option<jacquard_common::CowStr<'a>>,
    /// The URI of the scrobble.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub uri: std::option::Option<jacquard_common::types::string::Uri<'a>>,
    /// The handle of the user who created the scrobble.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub user: std::option::Option<jacquard_common::CowStr<'a>>,
}