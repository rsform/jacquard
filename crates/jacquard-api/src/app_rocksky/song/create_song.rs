// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: app.rocksky.song.createSong
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic,
    Default
)]
#[serde(rename_all = "camelCase")]
pub struct CreateSong<'a> {
    /// The album of the song, if applicable
    #[serde(borrow)]
    pub album: jacquard_common::CowStr<'a>,
    /// The URL of the album art for the song
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub album_art: std::option::Option<jacquard_common::types::string::Uri<'a>>,
    /// The album artist of the song, if different from the main artist
    #[serde(borrow)]
    pub album_artist: jacquard_common::CowStr<'a>,
    /// The artist of the song
    #[serde(borrow)]
    pub artist: jacquard_common::CowStr<'a>,
    /// The disc number of the song in the album, if applicable
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub disc_number: std::option::Option<i64>,
    /// The duration of the song in seconds
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub duration: std::option::Option<i64>,
    /// The lyrics of the song, if available
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub lyrics: std::option::Option<jacquard_common::CowStr<'a>>,
    /// The MusicBrainz ID of the song, if available
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub mb_id: std::option::Option<jacquard_common::CowStr<'a>>,
    /// The release date of the song, formatted as YYYY-MM-DD
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub release_date: std::option::Option<jacquard_common::CowStr<'a>>,
    /// The title of the song
    #[serde(borrow)]
    pub title: jacquard_common::CowStr<'a>,
    /// The track number of the song in the album, if applicable
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub track_number: std::option::Option<i64>,
    /// The year the song was released
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub year: std::option::Option<i64>,
}

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
pub struct CreateSongOutput<'a> {
    #[serde(flatten)]
    #[serde(borrow)]
    pub value: crate::app_rocksky::song::SongViewDetailed<'a>,
}

///Response type for
///app.rocksky.song.createSong
pub struct CreateSongResponse;
impl jacquard_common::xrpc::XrpcResp for CreateSongResponse {
    const NSID: &'static str = "app.rocksky.song.createSong";
    const ENCODING: &'static str = "application/json";
    type Output<'de> = CreateSongOutput<'de>;
    type Err<'de> = jacquard_common::xrpc::GenericError<'de>;
}

impl<'a> jacquard_common::xrpc::XrpcRequest for CreateSong<'a> {
    const NSID: &'static str = "app.rocksky.song.createSong";
    const METHOD: jacquard_common::xrpc::XrpcMethod = jacquard_common::xrpc::XrpcMethod::Procedure(
        "application/json",
    );
    type Response = CreateSongResponse;
}

///Endpoint type for
///app.rocksky.song.createSong
pub struct CreateSongRequest;
impl jacquard_common::xrpc::XrpcEndpoint for CreateSongRequest {
    const PATH: &'static str = "/xrpc/app.rocksky.song.createSong";
    const METHOD: jacquard_common::xrpc::XrpcMethod = jacquard_common::xrpc::XrpcMethod::Procedure(
        "application/json",
    );
    type Request<'de> = CreateSong<'de>;
    type Response = CreateSongResponse;
}