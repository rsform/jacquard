// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: app.rocksky.actor.defs
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

pub mod get_actor_albums;
pub mod get_actor_artists;
pub mod get_actor_loved_songs;
pub mod get_actor_playlists;
pub mod get_actor_scrobbles;
pub mod get_actor_songs;
pub mod get_profile;

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic,
    Default
)]
#[serde(rename_all = "camelCase")]
pub struct ProfileViewBasic<'a> {
    /// The URL of the actor's avatar image.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub avatar: std::option::Option<jacquard_common::types::string::Uri<'a>>,
    /// The date and time when the actor was created.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub created_at: std::option::Option<jacquard_common::types::string::Datetime>,
    /// The DID of the actor.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub did: std::option::Option<jacquard_common::CowStr<'a>>,
    /// The display name of the actor.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub display_name: std::option::Option<jacquard_common::CowStr<'a>>,
    /// The handle of the actor.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub handle: std::option::Option<jacquard_common::CowStr<'a>>,
    /// The unique identifier of the actor.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub id: std::option::Option<jacquard_common::CowStr<'a>>,
    /// The date and time when the actor was last updated.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub updated_at: std::option::Option<jacquard_common::types::string::Datetime>,
}

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic,
    Default
)]
#[serde(rename_all = "camelCase")]
pub struct ProfileViewDetailed<'a> {
    /// The URL of the actor's avatar image.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub avatar: std::option::Option<jacquard_common::types::string::Uri<'a>>,
    /// The date and time when the actor was created.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub created_at: std::option::Option<jacquard_common::types::string::Datetime>,
    /// The DID of the actor.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub did: std::option::Option<jacquard_common::CowStr<'a>>,
    /// The display name of the actor.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub display_name: std::option::Option<jacquard_common::CowStr<'a>>,
    /// The handle of the actor.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub handle: std::option::Option<jacquard_common::CowStr<'a>>,
    /// The unique identifier of the actor.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub id: std::option::Option<jacquard_common::CowStr<'a>>,
    /// The date and time when the actor was last updated.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub updated_at: std::option::Option<jacquard_common::types::string::Datetime>,
}