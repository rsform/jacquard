// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: app.rocksky.artist.defs
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

pub mod get_artist;
pub mod get_artist_albums;
pub mod get_artist_tracks;
pub mod get_artists;

/// A declaration of an artist.
#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic,
    bon::Builder
)]
#[serde(rename_all = "camelCase")]
pub struct Artist<'a> {
    /// The biography of the artist.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub bio: Option<jacquard_common::CowStr<'a>>,
    /// The birth date of the artist.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    pub born: Option<jacquard_common::types::string::Datetime>,
    /// The birth place of the artist.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub born_in: Option<jacquard_common::CowStr<'a>>,
    /// The date when the artist was created.
    pub created_at: jacquard_common::types::string::Datetime,
    /// The death date of the artist.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    pub died: Option<jacquard_common::types::string::Datetime>,
    /// The name of the artist.
    #[serde(borrow)]
    #[builder(into)]
    pub name: jacquard_common::CowStr<'a>,
    /// The picture of the artist.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub picture: Option<jacquard_common::types::blob::Blob<'a>>,
    /// The tags of the artist.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub tags: Option<Vec<jacquard_common::CowStr<'a>>>,
}

/// Typed wrapper for GetRecord response with this collection's record type.
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
pub struct ArtistGetRecordOutput<'a> {
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub cid: std::option::Option<jacquard_common::types::string::Cid<'a>>,
    #[serde(borrow)]
    pub uri: jacquard_common::types::string::AtUri<'a>,
    #[serde(borrow)]
    pub value: Artist<'a>,
}

/// Marker type for deserializing records from this collection.
pub struct ArtistRecord;
impl jacquard_common::xrpc::XrpcResp for ArtistRecord {
    const NSID: &'static str = "app.rocksky.artist";
    const ENCODING: &'static str = "application/json";
    type Output<'de> = ArtistGetRecordOutput<'de>;
    type Err<'de> = jacquard_common::types::collection::RecordError<'de>;
}

impl jacquard_common::types::collection::Collection for Artist<'_> {
    const NSID: &'static str = "app.rocksky.artist";
    type Record = ArtistRecord;
}

impl From<ArtistGetRecordOutput<'_>> for Artist<'_> {
    fn from(output: ArtistGetRecordOutput<'_>) -> Self {
        use jacquard_common::IntoStatic;
        output.value.into_static()
    }
}

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic,
    Default
)]
#[serde(rename_all = "camelCase")]
pub struct ArtistViewBasic<'a> {
    /// The unique identifier of the artist.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub id: std::option::Option<jacquard_common::CowStr<'a>>,
    /// The name of the artist.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub name: std::option::Option<jacquard_common::CowStr<'a>>,
    /// The picture of the artist.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub picture: std::option::Option<jacquard_common::CowStr<'a>>,
    /// The number of times the artist has been played.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub play_count: std::option::Option<i64>,
    /// The SHA256 hash of the artist.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub sha256: std::option::Option<jacquard_common::CowStr<'a>>,
    /// The number of unique listeners who have played the artist.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub unique_listeners: std::option::Option<i64>,
    /// The URI of the artist.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub uri: std::option::Option<jacquard_common::types::string::AtUri<'a>>,
}

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic,
    Default
)]
#[serde(rename_all = "camelCase")]
pub struct ArtistViewDetailed<'a> {
    /// The unique identifier of the artist.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub id: std::option::Option<jacquard_common::CowStr<'a>>,
    /// The name of the artist.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub name: std::option::Option<jacquard_common::CowStr<'a>>,
    /// The picture of the artist.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub picture: std::option::Option<jacquard_common::CowStr<'a>>,
    /// The number of times the artist has been played.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub play_count: std::option::Option<i64>,
    /// The SHA256 hash of the artist.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub sha256: std::option::Option<jacquard_common::CowStr<'a>>,
    /// The number of unique listeners who have played the artist.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub unique_listeners: std::option::Option<i64>,
    /// The URI of the artist.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub uri: std::option::Option<jacquard_common::types::string::AtUri<'a>>,
}