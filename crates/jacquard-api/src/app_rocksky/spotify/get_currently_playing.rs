// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: app.rocksky.spotify.getCurrentlyPlaying
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    bon::Builder,
    jacquard_derive::IntoStatic
)]
#[builder(start_fn = new)]
#[serde(rename_all = "camelCase")]
pub struct GetCurrentlyPlaying<'a> {
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub actor: std::option::Option<jacquard_common::types::ident::AtIdentifier<'a>>,
}

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
pub struct GetCurrentlyPlayingOutput<'a> {
    #[serde(flatten)]
    #[serde(borrow)]
    pub value: crate::app_rocksky::player::CurrentlyPlayingViewDetailed<'a>,
}

/// Response type for
///app.rocksky.spotify.getCurrentlyPlaying
pub struct GetCurrentlyPlayingResponse;
impl jacquard_common::xrpc::XrpcResp for GetCurrentlyPlayingResponse {
    const NSID: &'static str = "app.rocksky.spotify.getCurrentlyPlaying";
    const ENCODING: &'static str = "application/json";
    type Output<'de> = GetCurrentlyPlayingOutput<'de>;
    type Err<'de> = jacquard_common::xrpc::GenericError<'de>;
}

impl<'a> jacquard_common::xrpc::XrpcRequest for GetCurrentlyPlaying<'a> {
    const NSID: &'static str = "app.rocksky.spotify.getCurrentlyPlaying";
    const METHOD: jacquard_common::xrpc::XrpcMethod = jacquard_common::xrpc::XrpcMethod::Query;
    type Response = GetCurrentlyPlayingResponse;
}

/// Endpoint type for
///app.rocksky.spotify.getCurrentlyPlaying
pub struct GetCurrentlyPlayingRequest;
impl jacquard_common::xrpc::XrpcEndpoint for GetCurrentlyPlayingRequest {
    const PATH: &'static str = "/xrpc/app.rocksky.spotify.getCurrentlyPlaying";
    const METHOD: jacquard_common::xrpc::XrpcMethod = jacquard_common::xrpc::XrpcMethod::Query;
    type Request<'de> = GetCurrentlyPlaying<'de>;
    type Response = GetCurrentlyPlayingResponse;
}