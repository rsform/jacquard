// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: app.rocksky.album.defs
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

pub mod get_album;
pub mod get_album_tracks;
pub mod get_albums;

/// A declaration of an album.
#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic,
    bon::Builder
)]
#[serde(rename_all = "camelCase")]
pub struct Album<'a> {
    /// The album art of the album.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub album_art: Option<jacquard_common::types::blob::Blob<'a>>,
    /// The Apple Music link of the album.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub apple_music_link: Option<jacquard_common::types::string::Uri<'a>>,
    /// The artist of the album.
    #[serde(borrow)]
    #[builder(into)]
    pub artist: jacquard_common::CowStr<'a>,
    /// The date and time when the album was created.
    pub created_at: jacquard_common::types::string::Datetime,
    /// The duration of the album in seconds.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    pub duration: Option<i64>,
    /// The genre of the album.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub genre: Option<jacquard_common::CowStr<'a>>,
    /// The release date of the album.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    pub release_date: Option<jacquard_common::types::string::Datetime>,
    /// The Spotify link of the album.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub spotify_link: Option<jacquard_common::types::string::Uri<'a>>,
    /// The tags of the album.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub tags: Option<Vec<jacquard_common::CowStr<'a>>>,
    /// The tidal link of the album.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub tidal_link: Option<jacquard_common::types::string::Uri<'a>>,
    /// The title of the album.
    #[serde(borrow)]
    #[builder(into)]
    pub title: jacquard_common::CowStr<'a>,
    /// The year the album was released.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    pub year: Option<i64>,
    /// The YouTube link of the album.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub youtube_link: Option<jacquard_common::types::string::Uri<'a>>,
}

/// Typed wrapper for GetRecord response with this collection's record type.
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
pub struct AlbumGetRecordOutput<'a> {
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub cid: std::option::Option<jacquard_common::types::string::Cid<'a>>,
    #[serde(borrow)]
    pub uri: jacquard_common::types::string::AtUri<'a>,
    #[serde(borrow)]
    pub value: Album<'a>,
}

impl From<AlbumGetRecordOutput<'_>> for Album<'_> {
    fn from(output: AlbumGetRecordOutput<'_>) -> Self {
        use jacquard_common::IntoStatic;
        output.value.into_static()
    }
}

impl jacquard_common::types::collection::Collection for Album<'_> {
    const NSID: &'static str = "app.rocksky.album";
    type Record = AlbumRecord;
}

/// Marker type for deserializing records from this collection.
#[derive(Debug, serde::Serialize, serde::Deserialize)]
pub struct AlbumRecord;
impl jacquard_common::xrpc::XrpcResp for AlbumRecord {
    const NSID: &'static str = "app.rocksky.album";
    const ENCODING: &'static str = "application/json";
    type Output<'de> = AlbumGetRecordOutput<'de>;
    type Err<'de> = jacquard_common::types::collection::RecordError<'de>;
}

impl jacquard_common::types::collection::Collection for AlbumRecord {
    const NSID: &'static str = "app.rocksky.album";
    type Record = AlbumRecord;
}

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic,
    Default
)]
#[serde(rename_all = "camelCase")]
pub struct AlbumViewBasic<'a> {
    /// The URL of the album art image.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub album_art: std::option::Option<jacquard_common::types::string::Uri<'a>>,
    /// The artist of the album.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub artist: std::option::Option<jacquard_common::CowStr<'a>>,
    /// The URI of the album's artist.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub artist_uri: std::option::Option<jacquard_common::types::string::AtUri<'a>>,
    /// The unique identifier of the album.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub id: std::option::Option<jacquard_common::CowStr<'a>>,
    /// The number of times the album has been played.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub play_count: std::option::Option<i64>,
    /// The release date of the album.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub release_date: std::option::Option<jacquard_common::CowStr<'a>>,
    /// The SHA256 hash of the album.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub sha256: std::option::Option<jacquard_common::CowStr<'a>>,
    /// The title of the album.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub title: std::option::Option<jacquard_common::CowStr<'a>>,
    /// The number of unique listeners who have played the album.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub unique_listeners: std::option::Option<i64>,
    /// The URI of the album.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub uri: std::option::Option<jacquard_common::types::string::AtUri<'a>>,
    /// The year the album was released.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub year: std::option::Option<i64>,
}

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic,
    Default
)]
#[serde(rename_all = "camelCase")]
pub struct AlbumViewDetailed<'a> {
    /// The URL of the album art image.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub album_art: std::option::Option<jacquard_common::types::string::Uri<'a>>,
    /// The artist of the album.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub artist: std::option::Option<jacquard_common::CowStr<'a>>,
    /// The URI of the album's artist.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub artist_uri: std::option::Option<jacquard_common::types::string::AtUri<'a>>,
    /// The unique identifier of the album.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub id: std::option::Option<jacquard_common::CowStr<'a>>,
    /// The number of times the album has been played.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub play_count: std::option::Option<i64>,
    /// The release date of the album.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub release_date: std::option::Option<jacquard_common::CowStr<'a>>,
    /// The SHA256 hash of the album.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub sha256: std::option::Option<jacquard_common::CowStr<'a>>,
    /// The title of the album.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub title: std::option::Option<jacquard_common::CowStr<'a>>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub tracks: std::option::Option<Vec<jacquard_common::types::value::Data<'a>>>,
    /// The number of unique listeners who have played the album.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub unique_listeners: std::option::Option<i64>,
    /// The URI of the album.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub uri: std::option::Option<jacquard_common::types::string::AtUri<'a>>,
    /// The year the album was released.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub year: std::option::Option<i64>,
}