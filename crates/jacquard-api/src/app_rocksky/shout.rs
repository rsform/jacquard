// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: app.rocksky.shout.defs
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

pub mod create_shout;
pub mod get_album_shouts;
pub mod get_artist_shouts;
pub mod get_profile_shouts;
pub mod get_shout_replies;
pub mod get_track_shouts;
pub mod remove_shout;
pub mod reply_shout;
pub mod report_shout;

/// A declaration of a shout.
#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic,
    bon::Builder
)]
#[serde(rename_all = "camelCase")]
pub struct Shout<'a> {
    /// The date when the shout was created.
    pub created_at: jacquard_common::types::string::Datetime,
    /// The message of the shout.
    #[serde(borrow)]
    #[builder(into)]
    pub message: jacquard_common::CowStr<'a>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub parent: Option<crate::com_atproto::repo::strong_ref::StrongRef<'a>>,
    #[serde(borrow)]
    pub subject: crate::com_atproto::repo::strong_ref::StrongRef<'a>,
}

/// Typed wrapper for GetRecord response with this collection's record type.
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
pub struct ShoutGetRecordOutput<'a> {
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub cid: std::option::Option<jacquard_common::types::string::Cid<'a>>,
    #[serde(borrow)]
    pub uri: jacquard_common::types::string::AtUri<'a>,
    #[serde(borrow)]
    pub value: Shout<'a>,
}

/// Marker type for deserializing records from this collection.
pub struct ShoutRecord;
impl jacquard_common::xrpc::XrpcResp for ShoutRecord {
    const NSID: &'static str = "app.rocksky.shout";
    const ENCODING: &'static str = "application/json";
    type Output<'de> = ShoutGetRecordOutput<'de>;
    type Err<'de> = jacquard_common::types::collection::RecordError<'de>;
}

impl jacquard_common::types::collection::Collection for Shout<'_> {
    const NSID: &'static str = "app.rocksky.shout";
    type Record = ShoutRecord;
}

impl From<ShoutGetRecordOutput<'_>> for Shout<'_> {
    fn from(output: ShoutGetRecordOutput<'_>) -> Self {
        use jacquard_common::IntoStatic;
        output.value.into_static()
    }
}

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic,
    Default
)]
#[serde(rename_all = "camelCase")]
pub struct Author<'a> {
    /// The URL of the author's avatar image.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub avatar: std::option::Option<jacquard_common::types::string::Uri<'a>>,
    /// The decentralized identifier (DID) of the author.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub did: std::option::Option<jacquard_common::types::ident::AtIdentifier<'a>>,
    /// The display name of the author.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub display_name: std::option::Option<jacquard_common::CowStr<'a>>,
    /// The handle of the author.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub handle: std::option::Option<jacquard_common::types::ident::AtIdentifier<'a>>,
    /// The unique identifier of the author.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub id: std::option::Option<jacquard_common::CowStr<'a>>,
}

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic,
    Default
)]
#[serde(rename_all = "camelCase")]
pub struct ShoutView<'a> {
    /// The author of the shout.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub author: std::option::Option<crate::app_rocksky::shout::Author<'a>>,
    /// The date and time when the shout was created.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub created_at: std::option::Option<jacquard_common::types::string::Datetime>,
    /// The unique identifier of the shout.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub id: std::option::Option<jacquard_common::CowStr<'a>>,
    /// The content of the shout.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub message: std::option::Option<jacquard_common::CowStr<'a>>,
    /// The ID of the parent shout if this is a reply, otherwise null.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub parent: std::option::Option<jacquard_common::CowStr<'a>>,
}