// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: app.rocksky.spotify.defs
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

pub mod get_currently_playing;
pub mod next;
pub mod pause;
pub mod play;
pub mod previous;
pub mod seek;

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic,
    Default
)]
#[serde(rename_all = "camelCase")]
pub struct SpotifyTrackView<'a> {
    /// The name of the album.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub album: std::option::Option<jacquard_common::CowStr<'a>>,
    /// The name of the artist.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub artist: std::option::Option<jacquard_common::CowStr<'a>>,
    /// The duration of the track in milliseconds.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub duration: std::option::Option<i64>,
    /// The unique identifier of the Spotify track.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub id: std::option::Option<jacquard_common::CowStr<'a>>,
    /// The name of the track.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub name: std::option::Option<jacquard_common::CowStr<'a>>,
    /// A URL to a preview of the track.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub preview_url: std::option::Option<jacquard_common::CowStr<'a>>,
}