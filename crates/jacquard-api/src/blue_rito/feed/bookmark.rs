// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: blue.rito.feed.bookmark
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
pub struct Locale<'a> {
    ///URI's comment. It can use GitHub Flavored Markdown.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub comment: std::option::Option<jacquard_common::CowStr<'a>>,
    ///Comments Language
    #[serde(borrow)]
    pub lang: jacquard_common::CowStr<'a>,
    ///URI's title
    #[serde(borrow)]
    pub title: jacquard_common::CowStr<'a>,
}

///Records a bookmark.
#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
pub struct Bookmark<'a> {
    ///Title and comment in different languages.
    #[serde(borrow)]
    pub comments: Vec<crate::blue_rito::feed::bookmark::Locale<'a>>,
    pub created_at: jacquard_common::types::string::Datetime,
    ///OGP Description
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub ogp_description: std::option::Option<jacquard_common::CowStr<'a>>,
    ///OGP Image Uri
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub ogp_image: std::option::Option<jacquard_common::types::string::Uri<'a>>,
    ///OGP Title
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub ogp_title: std::option::Option<jacquard_common::CowStr<'a>>,
    #[serde(borrow)]
    pub subject: jacquard_common::types::string::Uri<'a>,
    ///Tags describing the uri's description (max 10 tags, 25 charactors)
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub tags: std::option::Option<Vec<jacquard_common::CowStr<'a>>>,
}

impl jacquard_common::types::collection::Collection for Bookmark<'_> {
    const NSID: &'static str = "blue.rito.feed.bookmark";
}