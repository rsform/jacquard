// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: blue.rito.service.getSchema
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
pub struct Langs<'a> {
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub comment: std::option::Option<jacquard_common::CowStr<'a>>,
    #[serde(borrow)]
    pub lang: jacquard_common::CowStr<'a>,
    #[serde(borrow)]
    pub moderation: Vec<jacquard_common::CowStr<'a>>,
    #[serde(borrow)]
    pub title: jacquard_common::CowStr<'a>,
}

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    bon::Builder,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
#[builder(start_fn = new)]
pub struct GetSchema<'a> {
    #[serde(borrow)]
    #[builder(into)]
    pub nsid: jacquard_common::CowStr<'a>,
    #[serde(flatten)]
    #[serde(borrow)]
    #[builder(default)]
    pub extra_data: ::std::collections::BTreeMap<
        ::jacquard_common::smol_str::SmolStr,
        ::jacquard_common::types::value::Data<'a>,
    >,
}

///Returns the Bookmark data for the given NSID.
#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
pub struct GetSchemaOutput<'a> {
    ///Comments with titles, content, and moderation in multiple languages.
    #[serde(borrow)]
    pub comments: Vec<crate::blue_rito::service::get_schema::Langs<'a>>,
    ///Moderation result for OGP title and description
    #[serde(borrow)]
    pub moderations: Vec<jacquard_common::CowStr<'a>>,
    ///Namespace ID of the service or application (e.g., 'uk.skyblur.post').
    #[serde(borrow)]
    pub nsid: jacquard_common::CowStr<'a>,
    ///The Open Graph Protocol (OGP) description for the bookmark.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub ogp_description: std::option::Option<jacquard_common::CowStr<'a>>,
    ///The Open Graph Protocol (OGP) image URL for the bookmark.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub ogp_image: std::option::Option<jacquard_common::types::string::Uri<'a>>,
    ///The Open Graph Protocol (OGP) title for the bookmark.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub ogp_title: std::option::Option<jacquard_common::CowStr<'a>>,
    ///The schema URL pattern associated with this NSID (e.g., 'https://skyblur.uk/post/{did}/{rkey}').
    #[serde(borrow)]
    pub schema: jacquard_common::CowStr<'a>,
    ///This field contains tags. If registered by the owner, it may include 'Verified'.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub tags: std::option::Option<Vec<jacquard_common::CowStr<'a>>>,
    ///If this comment registed by owner, this field should be true.
    pub verified: bool,
}

///Response type for
///blue.rito.service.getSchema
pub struct GetSchemaResponse;
impl jacquard_common::xrpc::XrpcResp for GetSchemaResponse {
    const NSID: &'static str = "blue.rito.service.getSchema";
    const ENCODING: &'static str = "application/json";
    type Output<'de> = GetSchemaOutput<'de>;
    type Err<'de> = jacquard_common::xrpc::GenericError<'de>;
}

impl<'de> jacquard_common::xrpc::XrpcRequest<'de> for GetSchema<'de> {
    const NSID: &'static str = "blue.rito.service.getSchema";
    const METHOD: jacquard_common::xrpc::XrpcMethod = jacquard_common::xrpc::XrpcMethod::Procedure(
        "application/json",
    );
    type Response = GetSchemaResponse;
}