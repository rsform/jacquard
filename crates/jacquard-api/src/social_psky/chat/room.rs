// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: social.psky.chat.room
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

///A Picosky room belonging to the user.
#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
pub struct Room<'a> {
    ///List of users allowed to send messages in the room.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub allowlist: std::option::Option<crate::social_psky::chat::room::ModlistRef<'a>>,
    ///List of users disallowed to send messages in the room.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub denylist: std::option::Option<crate::social_psky::chat::room::ModlistRef<'a>>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub languages: std::option::Option<Vec<jacquard_common::types::string::Language>>,
    #[serde(borrow)]
    pub name: jacquard_common::CowStr<'a>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub tags: std::option::Option<Vec<jacquard_common::CowStr<'a>>>,
    ///Topic title of the room.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub topic: std::option::Option<jacquard_common::CowStr<'a>>,
}

/// Typed wrapper for GetRecord response with this collection's record type.
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
pub struct RoomGetRecordOutput<'a> {
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub cid: std::option::Option<jacquard_common::types::string::Cid<'a>>,
    #[serde(borrow)]
    pub uri: jacquard_common::types::string::AtUri<'a>,
    #[serde(borrow)]
    pub value: Room<'a>,
}

/// Marker type for deserializing records from this collection.
pub struct RoomRecord;
impl jacquard_common::xrpc::XrpcResp for RoomRecord {
    const NSID: &'static str = "social.psky.chat.room";
    const ENCODING: &'static str = "application/json";
    type Output<'de> = RoomGetRecordOutput<'de>;
    type Err<'de> = jacquard_common::types::collection::RecordError<'de>;
}

impl jacquard_common::types::collection::Collection for Room<'_> {
    const NSID: &'static str = "social.psky.chat.room";
    type Record = RoomRecord;
}

impl From<RoomGetRecordOutput<'_>> for Room<'_> {
    fn from(output: RoomGetRecordOutput<'_>) -> Self {
        use jacquard_common::IntoStatic;
        output.value.into_static()
    }
}

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
pub struct ModlistRef<'a> {
    pub active: bool,
    #[serde(borrow)]
    pub users: Vec<jacquard_common::types::string::Did<'a>>,
}