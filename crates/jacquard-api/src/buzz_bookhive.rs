// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: buzz.bookhive.defs
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

pub mod book;
pub mod buzz;
pub mod get_book;
pub mod get_profile;
pub mod hive_book;
pub mod search_books;

/// User has abandoned the book
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    Hash,
    jacquard_derive::IntoStatic
)]
pub struct Abandoned;
impl std::fmt::Display for Abandoned {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "abandoned")
    }
}

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic,
    bon::Builder
)]
#[serde(rename_all = "camelCase")]
pub struct Activity<'a> {
    pub created_at: jacquard_common::types::string::Datetime,
    /// The hive id of the book
    #[serde(borrow)]
    #[builder(into)]
    pub hive_id: jacquard_common::CowStr<'a>,
    /// The title of the book
    #[serde(borrow)]
    #[builder(into)]
    pub title: jacquard_common::CowStr<'a>,
    #[serde(borrow)]
    #[builder(into)]
    pub r#type: jacquard_common::CowStr<'a>,
}

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic,
    bon::Builder
)]
#[serde(rename_all = "camelCase")]
pub struct Comment<'a> {
    #[serde(borrow)]
    pub book: crate::com_atproto::repo::strong_ref::StrongRef<'a>,
    /// The content of the comment.
    #[serde(borrow)]
    #[builder(into)]
    pub comment: jacquard_common::CowStr<'a>,
    /// Client-declared timestamp when this comment was originally created.
    pub created_at: jacquard_common::types::string::Datetime,
    /// The DID of the user who made the comment
    #[serde(borrow)]
    #[builder(into)]
    pub did: jacquard_common::CowStr<'a>,
    /// The handle of the user who made the comment
    #[serde(borrow)]
    #[builder(into)]
    pub handle: jacquard_common::CowStr<'a>,
    #[serde(borrow)]
    pub parent: crate::com_atproto::repo::strong_ref::StrongRef<'a>,
}

/// User has finished reading the book
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    Hash,
    jacquard_derive::IntoStatic
)]
pub struct Finished;
impl std::fmt::Display for Finished {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "finished")
    }
}

/// User owns the book
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    Hash,
    jacquard_derive::IntoStatic
)]
pub struct Owned;
impl std::fmt::Display for Owned {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "owned")
    }
}

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic,
    bon::Builder
)]
#[serde(rename_all = "camelCase")]
pub struct Profile<'a> {
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub avatar: Option<jacquard_common::CowStr<'a>>,
    pub books_read: i64,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub description: Option<jacquard_common::CowStr<'a>>,
    #[serde(borrow)]
    #[builder(into)]
    pub display_name: jacquard_common::CowStr<'a>,
    #[serde(borrow)]
    #[builder(into)]
    pub handle: jacquard_common::CowStr<'a>,
    pub reviews: i64,
}

/// User is currently reading the book
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    Hash,
    jacquard_derive::IntoStatic
)]
pub struct Reading;
impl std::fmt::Display for Reading {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "reading")
    }
}

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic,
    bon::Builder
)]
#[serde(rename_all = "camelCase")]
pub struct Review<'a> {
    /// The date the review was created
    pub created_at: jacquard_common::types::string::Datetime,
    /// The DID of the user who made the review
    #[serde(borrow)]
    #[builder(into)]
    pub did: jacquard_common::CowStr<'a>,
    /// The handle of the user who made the review
    #[serde(borrow)]
    #[builder(into)]
    pub handle: jacquard_common::CowStr<'a>,
    /// The review content
    #[serde(borrow)]
    #[builder(into)]
    pub review: jacquard_common::CowStr<'a>,
    /// The number of stars given to the book
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    pub stars: Option<i64>,
}

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic,
    bon::Builder
)]
#[serde(rename_all = "camelCase")]
pub struct UserBook<'a> {
    /// The authors of the book (tab separated)
    #[serde(borrow)]
    #[builder(into)]
    pub authors: jacquard_common::CowStr<'a>,
    /// Cover image of the book
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub cover: Option<jacquard_common::CowStr<'a>>,
    pub created_at: jacquard_common::types::string::Datetime,
    /// Book description/summary
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub description: Option<jacquard_common::CowStr<'a>>,
    /// The date the user finished reading the book
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    pub finished_at: Option<jacquard_common::types::string::Datetime>,
    /// The book's hive id, used to correlate user's books with the hive
    #[serde(borrow)]
    #[builder(into)]
    pub hive_id: jacquard_common::CowStr<'a>,
    /// Average rating (0-1000)
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    pub rating: Option<i64>,
    /// The book's review
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub review: Option<jacquard_common::CowStr<'a>>,
    /// Number of stars given to the book (1-10) which will be mapped to 1-5 stars
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    pub stars: Option<i64>,
    /// The date the user started reading the book
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    pub started_at: Option<jacquard_common::types::string::Datetime>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub status: Option<jacquard_common::CowStr<'a>>,
    /// Cover image of the book
    #[serde(borrow)]
    #[builder(into)]
    pub thumbnail: jacquard_common::CowStr<'a>,
    /// The title of the book
    #[serde(borrow)]
    #[builder(into)]
    pub title: jacquard_common::CowStr<'a>,
}

/// User wants to read the book
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    Hash,
    jacquard_derive::IntoStatic
)]
pub struct WantToRead;
impl std::fmt::Display for WantToRead {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "wantToRead")
    }
}