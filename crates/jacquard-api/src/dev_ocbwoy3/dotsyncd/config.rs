// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: dev.ocbwoy3.dotsyncd.config
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

///Describes custom configuration for your rice. You must implement your own settings JSON schema.
#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
pub struct Config<'a> {}
///All dependencies for the configuration
pub type Dependencies<'a> = Vec<jacquard_common::types::value::Data<'a>>;
#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
pub struct ConfigRecord<'a> {
    ///The configuration details
    #[serde(borrow)]
    pub config: crate::dev_ocbwoy3::dotsyncd::config::Config<'a>,
    ///The date and time when the config was created
    pub created_at: jacquard_common::types::string::Datetime,
    ///Dependencies required for this config
    #[serde(borrow)]
    pub dependencies: crate::dev_ocbwoy3::dotsyncd::config::Dependencies<'a>,
    ///The description for config
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub description: std::option::Option<jacquard_common::CowStr<'a>>,
    ///The name of the config (e.g. Main)
    #[serde(borrow)]
    pub name: jacquard_common::CowStr<'a>,
    ///The date and time when the config was last updated
    pub updated_at: jacquard_common::types::string::Datetime,
}

impl jacquard_common::types::collection::Collection for ConfigRecord<'_> {
    const NSID: &'static str = "dev.ocbwoy3.dotsyncd.config";
}