// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: win.tomo-x.pushat.defs
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

pub mod allow;
pub mod push_notify;

pub type DeviceList<'a> = Vec<crate::win_tomo_x::pushat::DeviceListItem<'a>>;
#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic,
    bon::Builder
)]
#[serde(rename_all = "camelCase")]
pub struct DeviceListItem<'a> {
    pub current: bool,
    pub id: jacquard_common::types::string::Tid,
    #[serde(borrow)]
    #[builder(into)]
    pub name: jacquard_common::CowStr<'a>,
}

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic,
    Default
)]
#[serde(rename_all = "camelCase")]
pub struct NotifyBody<'a> {
    /// Body text of the notification.
    #[serde(borrow)]
    pub body: jacquard_common::CowStr<'a>,
    /// The URI of the icon displayed in the notification.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub icon: std::option::Option<jacquard_common::types::string::Uri<'a>>,
    /// Experimental â€” do not use. The URI to open when the notification is clicked.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub link: std::option::Option<jacquard_common::types::string::Uri<'a>>,
    /// Title text of the notification.
    #[serde(borrow)]
    pub title: jacquard_common::CowStr<'a>,
}