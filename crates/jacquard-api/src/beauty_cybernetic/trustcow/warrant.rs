// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: beauty.cybernetic.trustcow.warrant
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

///A warrant where one ATProto identity vouches for the trustworthiness of another identity
#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
pub struct Warrant<'a> {
    ///When the warrant was created
    pub created_at: jacquard_common::types::string::Datetime,
    ///Optional description explaining the basis for this warrant
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub description: std::option::Option<jacquard_common::CowStr<'a>>,
    ///Optional expiration date for this warrant
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub expires_at: std::option::Option<jacquard_common::types::string::Datetime>,
    ///DID of the identity being warranted for
    #[serde(borrow)]
    pub subject: jacquard_common::CowStr<'a>,
    ///Level of trust being warranted
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub trust_level: std::option::Option<jacquard_common::CowStr<'a>>,
    ///Type of warrant being provided
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub warrant_type: std::option::Option<jacquard_common::CowStr<'a>>,
}

impl jacquard_common::types::collection::Collection for Warrant<'_> {
    const NSID: &'static str = "beauty.cybernetic.trustcow.warrant";
}