// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: beauty.cybernetic.trustcow.review
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

///A review connected to a verified transaction, can only be created by one of the transaction parties
#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
pub struct Review<'a> {
    ///When the review was created
    pub created_at: jacquard_common::types::string::Datetime,
    ///The detailed review text
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub description: std::option::Option<jacquard_common::CowStr<'a>>,
    ///Rating score from 1 to 5
    pub rating: i64,
    ///Whether this review is from the service provider or consumer
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub reviewer_role: std::option::Option<jacquard_common::CowStr<'a>>,
    ///The title of the review
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub title: std::option::Option<jacquard_common::CowStr<'a>>,
    ///AT URI reference to the transaction record (at://did/beauty.cybernetic.trustcow.transaction/rkey)
    #[serde(borrow)]
    pub transaction: jacquard_common::CowStr<'a>,
}

/// Typed wrapper for GetRecord response with this collection's record type.
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
pub struct ReviewGetRecordOutput<'a> {
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub cid: std::option::Option<jacquard_common::types::string::Cid<'a>>,
    #[serde(borrow)]
    pub uri: jacquard_common::types::string::AtUri<'a>,
    #[serde(borrow)]
    pub value: Review<'a>,
}

/// Marker type for deserializing records from this collection.
pub struct ReviewRecord;
impl jacquard_common::xrpc::XrpcResp for ReviewRecord {
    const NSID: &'static str = "beauty.cybernetic.trustcow.review";
    const ENCODING: &'static str = "application/json";
    type Output<'de> = ReviewGetRecordOutput<'de>;
    type Err<'de> = jacquard_common::types::collection::RecordError<'de>;
}

impl jacquard_common::types::collection::Collection for Review<'_> {
    const NSID: &'static str = "beauty.cybernetic.trustcow.review";
    type Record = ReviewRecord;
}

impl From<ReviewGetRecordOutput<'_>> for Review<'_> {
    fn from(output: ReviewGetRecordOutput<'_>) -> Self {
        use jacquard_common::IntoStatic;
        output.value.into_static()
    }
}