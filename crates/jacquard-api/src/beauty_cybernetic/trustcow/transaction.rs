// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: beauty.cybernetic.trustcow.transaction
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

///A verified transaction between two ATProto identities that must be stored in both parties' PDS
#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
pub struct Transaction<'a> {
    ///Transaction amount (optional, in whatever currency applies)
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub amount: std::option::Option<jacquard_common::CowStr<'a>>,
    ///When the transaction occurred
    pub created_at: jacquard_common::types::string::Datetime,
    ///Currency code (optional, e.g. USD, EUR, BTC)
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub currency: std::option::Option<jacquard_common::CowStr<'a>>,
    ///Description of the service or product transacted
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub description: std::option::Option<jacquard_common::CowStr<'a>>,
    ///DID of the service consumer identity
    #[serde(borrow)]
    pub service_consumer: jacquard_common::CowStr<'a>,
    ///DID of the service provider identity
    #[serde(borrow)]
    pub service_provider: jacquard_common::CowStr<'a>,
    ///Unique identifier for this transaction, must be identical in both parties' records
    #[serde(borrow)]
    pub transaction_id: jacquard_common::CowStr<'a>,
}

impl jacquard_common::types::collection::Collection for Transaction<'_> {
    const NSID: &'static str = "beauty.cybernetic.trustcow.transaction";
}