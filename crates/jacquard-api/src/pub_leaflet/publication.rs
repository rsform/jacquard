// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: pub.leaflet.publication
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

/// Record declaring a publication
#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic,
    bon::Builder
)]
#[serde(rename_all = "camelCase")]
pub struct Publication<'a> {
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub base_path: Option<jacquard_common::types::string::Uri<'a>>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub description: Option<jacquard_common::CowStr<'a>>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub icon: Option<jacquard_common::types::blob::BlobRef<'a>>,
    #[serde(borrow)]
    #[builder(into)]
    pub name: jacquard_common::CowStr<'a>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub preferences: Option<crate::pub_leaflet::publication::Preferences<'a>>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub theme: Option<crate::pub_leaflet::publication::Theme<'a>>,
}

impl<'a> Publication<'a> {
    pub fn uri(
        uri: impl Into<jacquard_common::CowStr<'a>>,
    ) -> Result<
        jacquard_common::types::uri::RecordUri<'a, PublicationRecord>,
        jacquard_common::types::uri::UriError,
    > {
        jacquard_common::types::uri::RecordUri::try_from_uri(
            jacquard_common::types::string::AtUri::new_cow(uri.into())?,
        )
    }
}

/// Typed wrapper for GetRecord response with this collection's record type.
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
pub struct PublicationGetRecordOutput<'a> {
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub cid: std::option::Option<jacquard_common::types::string::Cid<'a>>,
    #[serde(borrow)]
    pub uri: jacquard_common::types::string::AtUri<'a>,
    #[serde(borrow)]
    pub value: Publication<'a>,
}

impl From<PublicationGetRecordOutput<'_>> for Publication<'_> {
    fn from(output: PublicationGetRecordOutput<'_>) -> Self {
        use jacquard_common::IntoStatic;
        output.value.into_static()
    }
}

impl jacquard_common::types::collection::Collection for Publication<'_> {
    const NSID: &'static str = "pub.leaflet.publication";
    type Record = PublicationRecord;
}

/// Marker type for deserializing records from this collection.
#[derive(Debug, serde::Serialize, serde::Deserialize)]
pub struct PublicationRecord;
impl jacquard_common::xrpc::XrpcResp for PublicationRecord {
    const NSID: &'static str = "pub.leaflet.publication";
    const ENCODING: &'static str = "application/json";
    type Output<'de> = PublicationGetRecordOutput<'de>;
    type Err<'de> = jacquard_common::types::collection::RecordError<'de>;
}

impl jacquard_common::types::collection::Collection for PublicationRecord {
    const NSID: &'static str = "pub.leaflet.publication";
    type Record = PublicationRecord;
}

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic,
    Default
)]
#[serde(rename_all = "camelCase")]
pub struct Preferences<'a> {
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub show_comments: std::option::Option<bool>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub show_in_discover: std::option::Option<bool>,
}

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic,
    Default
)]
#[serde(rename_all = "camelCase")]
pub struct Theme<'a> {
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub accent_background: std::option::Option<ThemeAccentBackground<'a>>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub accent_text: std::option::Option<ThemeAccentText<'a>>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub background_color: std::option::Option<ThemeBackgroundColor<'a>>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub background_image: std::option::Option<
        crate::pub_leaflet::theme::background_image::BackgroundImage<'a>,
    >,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub page_background: std::option::Option<ThemePageBackground<'a>>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub primary: std::option::Option<ThemePrimary<'a>>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub show_page_background: std::option::Option<bool>,
}

#[jacquard_derive::open_union]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(tag = "$type")]
#[serde(bound(deserialize = "'de: 'a"))]
pub enum ThemeAccentBackground<'a> {
    #[serde(rename = "pub.leaflet.theme.color#rgba")]
    ColorRgba(Box<crate::pub_leaflet::theme::color::Rgba<'a>>),
    #[serde(rename = "pub.leaflet.theme.color#rgb")]
    ColorRgb(Box<crate::pub_leaflet::theme::color::Rgb<'a>>),
}

#[jacquard_derive::open_union]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(tag = "$type")]
#[serde(bound(deserialize = "'de: 'a"))]
pub enum ThemeAccentText<'a> {
    #[serde(rename = "pub.leaflet.theme.color#rgba")]
    ColorRgba(Box<crate::pub_leaflet::theme::color::Rgba<'a>>),
    #[serde(rename = "pub.leaflet.theme.color#rgb")]
    ColorRgb(Box<crate::pub_leaflet::theme::color::Rgb<'a>>),
}

#[jacquard_derive::open_union]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(tag = "$type")]
#[serde(bound(deserialize = "'de: 'a"))]
pub enum ThemeBackgroundColor<'a> {
    #[serde(rename = "pub.leaflet.theme.color#rgba")]
    ColorRgba(Box<crate::pub_leaflet::theme::color::Rgba<'a>>),
    #[serde(rename = "pub.leaflet.theme.color#rgb")]
    ColorRgb(Box<crate::pub_leaflet::theme::color::Rgb<'a>>),
}

#[jacquard_derive::open_union]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(tag = "$type")]
#[serde(bound(deserialize = "'de: 'a"))]
pub enum ThemePageBackground<'a> {
    #[serde(rename = "pub.leaflet.theme.color#rgba")]
    ColorRgba(Box<crate::pub_leaflet::theme::color::Rgba<'a>>),
    #[serde(rename = "pub.leaflet.theme.color#rgb")]
    ColorRgb(Box<crate::pub_leaflet::theme::color::Rgb<'a>>),
}

#[jacquard_derive::open_union]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(tag = "$type")]
#[serde(bound(deserialize = "'de: 'a"))]
pub enum ThemePrimary<'a> {
    #[serde(rename = "pub.leaflet.theme.color#rgba")]
    ColorRgba(Box<crate::pub_leaflet::theme::color::Rgba<'a>>),
    #[serde(rename = "pub.leaflet.theme.color#rgb")]
    ColorRgb(Box<crate::pub_leaflet::theme::color::Rgb<'a>>),
}