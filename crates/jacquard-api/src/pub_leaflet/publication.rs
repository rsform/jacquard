// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: pub.leaflet.publication
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

///Record declaring a publication
#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
pub struct Publication<'a> {
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub base_path: std::option::Option<jacquard_common::types::string::Uri<'a>>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub description: std::option::Option<jacquard_common::CowStr<'a>>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub icon: std::option::Option<jacquard_common::types::blob::Blob<'a>>,
    #[serde(borrow)]
    pub name: jacquard_common::CowStr<'a>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub preferences: std::option::Option<
        crate::pub_leaflet::publication::Preferences<'a>,
    >,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub theme: std::option::Option<crate::pub_leaflet::publication::Theme<'a>>,
}

impl jacquard_common::types::collection::Collection for Publication<'_> {
    const NSID: &'static str = "pub.leaflet.publication";
}

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
pub struct Preferences<'a> {
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub show_comments: std::option::Option<bool>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub show_in_discover: std::option::Option<bool>,
}

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
pub struct Theme<'a> {
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub accent_background: std::option::Option<ThemeRecordAccentBackground<'a>>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub accent_text: std::option::Option<ThemeRecordAccentText<'a>>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub background_color: std::option::Option<ThemeRecordBackgroundColor<'a>>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub background_image: std::option::Option<
        crate::pub_leaflet::theme::background_image::BackgroundImage<'a>,
    >,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub page_background: std::option::Option<ThemeRecordPageBackground<'a>>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub primary: std::option::Option<ThemeRecordPrimary<'a>>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub show_page_background: std::option::Option<bool>,
}

#[jacquard_derive::open_union]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(tag = "$type")]
#[serde(bound(deserialize = "'de: 'a"))]
pub enum ThemeRecordAccentBackground<'a> {
    #[serde(rename = "pub.leaflet.theme.color#rgba")]
    ColorRgba(Box<crate::pub_leaflet::theme::color::Rgba<'a>>),
    #[serde(rename = "pub.leaflet.theme.color#rgb")]
    ColorRgb(Box<crate::pub_leaflet::theme::color::Rgb<'a>>),
}

#[jacquard_derive::open_union]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(tag = "$type")]
#[serde(bound(deserialize = "'de: 'a"))]
pub enum ThemeRecordAccentText<'a> {
    #[serde(rename = "pub.leaflet.theme.color#rgba")]
    ColorRgba(Box<crate::pub_leaflet::theme::color::Rgba<'a>>),
    #[serde(rename = "pub.leaflet.theme.color#rgb")]
    ColorRgb(Box<crate::pub_leaflet::theme::color::Rgb<'a>>),
}

#[jacquard_derive::open_union]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(tag = "$type")]
#[serde(bound(deserialize = "'de: 'a"))]
pub enum ThemeRecordBackgroundColor<'a> {
    #[serde(rename = "pub.leaflet.theme.color#rgba")]
    ColorRgba(Box<crate::pub_leaflet::theme::color::Rgba<'a>>),
    #[serde(rename = "pub.leaflet.theme.color#rgb")]
    ColorRgb(Box<crate::pub_leaflet::theme::color::Rgb<'a>>),
}

#[jacquard_derive::open_union]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(tag = "$type")]
#[serde(bound(deserialize = "'de: 'a"))]
pub enum ThemeRecordPageBackground<'a> {
    #[serde(rename = "pub.leaflet.theme.color#rgba")]
    ColorRgba(Box<crate::pub_leaflet::theme::color::Rgba<'a>>),
    #[serde(rename = "pub.leaflet.theme.color#rgb")]
    ColorRgb(Box<crate::pub_leaflet::theme::color::Rgb<'a>>),
}

#[jacquard_derive::open_union]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(tag = "$type")]
#[serde(bound(deserialize = "'de: 'a"))]
pub enum ThemeRecordPrimary<'a> {
    #[serde(rename = "pub.leaflet.theme.color#rgba")]
    ColorRgba(Box<crate::pub_leaflet::theme::color::Rgba<'a>>),
    #[serde(rename = "pub.leaflet.theme.color#rgb")]
    ColorRgb(Box<crate::pub_leaflet::theme::color::Rgb<'a>>),
}