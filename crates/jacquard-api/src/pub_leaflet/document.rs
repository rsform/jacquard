// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: pub.leaflet.document
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

///Record containing a document
#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
pub struct Document<'a> {
    #[serde(borrow)]
    pub author: jacquard_common::types::ident::AtIdentifier<'a>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub description: std::option::Option<jacquard_common::CowStr<'a>>,
    #[serde(borrow)]
    pub pages: Vec<crate::pub_leaflet::pages::linear_document::LinearDocument<'a>>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub post_ref: std::option::Option<
        crate::com_atproto::repo::strong_ref::StrongRef<'a>,
    >,
    #[serde(borrow)]
    pub publication: jacquard_common::types::string::AtUri<'a>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub published_at: std::option::Option<jacquard_common::types::string::Datetime>,
    #[serde(borrow)]
    pub title: jacquard_common::CowStr<'a>,
}

impl jacquard_common::types::collection::Collection for Document<'_> {
    const NSID: &'static str = "pub.leaflet.document";
}