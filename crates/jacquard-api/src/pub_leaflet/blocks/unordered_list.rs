// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: pub.leaflet.blocks.unorderedList
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
pub struct ListItem<'a> {
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub children: std::option::Option<
        Vec<crate::pub_leaflet::blocks::unordered_list::ListItem<'a>>,
    >,
    #[serde(borrow)]
    pub content: ListItemContent<'a>,
}

#[jacquard_derive::open_union]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(tag = "$type")]
#[serde(bound(deserialize = "'de: 'a"))]
pub enum ListItemContent<'a> {
    #[serde(rename = "pub.leaflet.blocks.text")]
    Text(Box<crate::pub_leaflet::blocks::text::Text<'a>>),
    #[serde(rename = "pub.leaflet.blocks.header")]
    Header(Box<crate::pub_leaflet::blocks::header::Header<'a>>),
    #[serde(rename = "pub.leaflet.blocks.image")]
    Image(Box<crate::pub_leaflet::blocks::image::Image<'a>>),
}

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
pub struct UnorderedList<'a> {
    #[serde(borrow)]
    pub children: Vec<crate::pub_leaflet::blocks::unordered_list::ListItem<'a>>,
}