// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: pub.leaflet.pages.linearDocument
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
pub struct Block<'a> {
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub alignment: std::option::Option<jacquard_common::CowStr<'a>>,
    #[serde(borrow)]
    pub block: BlockBlock<'a>,
}

#[jacquard_derive::open_union]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(tag = "$type")]
#[serde(bound(deserialize = "'de: 'a"))]
pub enum BlockBlock<'a> {
    #[serde(rename = "pub.leaflet.blocks.iframe")]
    Iframe(Box<crate::pub_leaflet::blocks::iframe::Iframe<'a>>),
    #[serde(rename = "pub.leaflet.blocks.text")]
    Text(Box<crate::pub_leaflet::blocks::text::Text<'a>>),
    #[serde(rename = "pub.leaflet.blocks.blockquote")]
    Blockquote(Box<crate::pub_leaflet::blocks::blockquote::Blockquote<'a>>),
    #[serde(rename = "pub.leaflet.blocks.header")]
    Header(Box<crate::pub_leaflet::blocks::header::Header<'a>>),
    #[serde(rename = "pub.leaflet.blocks.image")]
    Image(Box<crate::pub_leaflet::blocks::image::Image<'a>>),
    #[serde(rename = "pub.leaflet.blocks.unorderedList")]
    UnorderedList(Box<crate::pub_leaflet::blocks::unordered_list::UnorderedList<'a>>),
    #[serde(rename = "pub.leaflet.blocks.website")]
    Website(Box<crate::pub_leaflet::blocks::website::Website<'a>>),
    #[serde(rename = "pub.leaflet.blocks.math")]
    Math(Box<crate::pub_leaflet::blocks::math::Math<'a>>),
    #[serde(rename = "pub.leaflet.blocks.code")]
    Code(Box<crate::pub_leaflet::blocks::code::Code<'a>>),
    #[serde(rename = "pub.leaflet.blocks.horizontalRule")]
    HorizontalRule(Box<crate::pub_leaflet::blocks::horizontal_rule::HorizontalRule<'a>>),
    #[serde(rename = "pub.leaflet.blocks.bskyPost")]
    BskyPost(Box<crate::pub_leaflet::blocks::bsky_post::BskyPost<'a>>),
}

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
pub struct LinearDocument<'a> {
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub blocks: std::option::Option<
        Vec<crate::pub_leaflet::pages::linear_document::Block<'a>>,
    >,
}

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
pub struct Position<'a> {
    pub block: Vec<i64>,
    pub offset: i64,
}

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
pub struct Quote<'a> {
    #[serde(borrow)]
    pub end: crate::pub_leaflet::pages::linear_document::Position<'a>,
    #[serde(borrow)]
    pub start: crate::pub_leaflet::pages::linear_document::Position<'a>,
}

#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    Hash,
    jacquard_derive::IntoStatic
)]
pub struct TextAlignCenter;
impl std::fmt::Display for TextAlignCenter {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "textAlignCenter")
    }
}

#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    Hash,
    jacquard_derive::IntoStatic
)]
pub struct TextAlignLeft;
impl std::fmt::Display for TextAlignLeft {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "textAlignLeft")
    }
}

#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    Hash,
    jacquard_derive::IntoStatic
)]
pub struct TextAlignRight;
impl std::fmt::Display for TextAlignRight {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "textAlignRight")
    }
}