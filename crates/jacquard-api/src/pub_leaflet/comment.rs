// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: pub.leaflet.comment
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
pub struct LinearDocumentQuote<'a> {
    #[serde(borrow)]
    pub document: jacquard_common::types::string::AtUri<'a>,
    #[serde(borrow)]
    pub quote: crate::pub_leaflet::pages::linear_document::Quote<'a>,
}

///Record containing a comment
#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
pub struct Comment<'a> {
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub attachment: std::option::Option<
        crate::pub_leaflet::comment::LinearDocumentQuote<'a>,
    >,
    pub created_at: jacquard_common::types::string::Datetime,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub facets: std::option::Option<Vec<crate::pub_leaflet::richtext::facet::Facet<'a>>>,
    #[serde(borrow)]
    pub plaintext: jacquard_common::CowStr<'a>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub reply: std::option::Option<crate::pub_leaflet::comment::ReplyRef<'a>>,
    #[serde(borrow)]
    pub subject: jacquard_common::types::string::AtUri<'a>,
}

impl jacquard_common::types::collection::Collection for Comment<'_> {
    const NSID: &'static str = "pub.leaflet.comment";
}

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
pub struct ReplyRef<'a> {
    #[serde(borrow)]
    pub parent: jacquard_common::types::string::AtUri<'a>,
}