// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: com.whtwnd.blog.notifyOfNewEntry
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    bon::Builder,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
#[builder(start_fn = new)]
pub struct NotifyOfNewEntry<'a> {
    #[serde(borrow)]
    pub entry_uri: jacquard_common::types::string::AtUri<'a>,
    #[serde(flatten)]
    #[serde(borrow)]
    #[builder(default)]
    pub extra_data: ::std::collections::BTreeMap<
        ::jacquard_common::smol_str::SmolStr,
        ::jacquard_common::types::value::Data<'a>,
    >,
}

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
pub struct NotifyOfNewEntryOutput<'a> {}
#[jacquard_derive::open_union]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    thiserror::Error,
    miette::Diagnostic
)]
#[serde(tag = "error", content = "message")]
#[serde(bound(deserialize = "'de: 'a"))]
pub enum NotifyOfNewEntryError<'a> {}
impl std::fmt::Display for NotifyOfNewEntryError<'_> {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Self::Unknown(err) => write!(f, "Unknown error: {:?}", err),
        }
    }
}

impl jacquard_common::IntoStatic for NotifyOfNewEntryError<'_> {
    type Output = NotifyOfNewEntryError<'static>;
    fn into_static(self) -> Self::Output {
        match self {
            NotifyOfNewEntryError::Unknown(v) => {
                NotifyOfNewEntryError::Unknown(v.into_static())
            }
        }
    }
}

///Response type for
///com.whtwnd.blog.notifyOfNewEntry
pub struct NotifyOfNewEntryResponse;
impl jacquard_common::xrpc::XrpcResp for NotifyOfNewEntryResponse {
    const NSID: &'static str = "com.whtwnd.blog.notifyOfNewEntry";
    const ENCODING: &'static str = "application/json";
    type Output<'de> = NotifyOfNewEntryOutput<'de>;
    type Err<'de> = NotifyOfNewEntryError<'de>;
}

impl<'de> jacquard_common::xrpc::XrpcRequest<'de> for NotifyOfNewEntry<'de> {
    const NSID: &'static str = "com.whtwnd.blog.notifyOfNewEntry";
    const METHOD: jacquard_common::xrpc::XrpcMethod = jacquard_common::xrpc::XrpcMethod::Procedure(
        "application/json",
    );
    type Response = NotifyOfNewEntryResponse;
}

///Endpoint type for
///com.whtwnd.blog.notifyOfNewEntry
pub struct NotifyOfNewEntryRequest;
impl jacquard_common::xrpc::XrpcEndpoint for NotifyOfNewEntryRequest {
    const PATH: &'static str = "/xrpc/com.whtwnd.blog.notifyOfNewEntry";
    const METHOD: jacquard_common::xrpc::XrpcMethod = jacquard_common::xrpc::XrpcMethod::Procedure(
        "application/json",
    );
    type Request<'de> = NotifyOfNewEntry<'de>;
    type Response = NotifyOfNewEntryResponse;
}