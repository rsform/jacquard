// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: com.whtwnd.blog.entry
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

///A declaration of a post.
#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
pub struct Entry<'a> {
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub blobs: std::option::Option<Vec<crate::com_whtwnd::blog::BlobMetadata<'a>>>,
    #[serde(borrow)]
    pub content: jacquard_common::CowStr<'a>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub created_at: std::option::Option<jacquard_common::types::string::Datetime>,
    ///(DEPRECATED) Marks this entry as draft to tell AppViews not to show it to anyone except for the author
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub is_draft: std::option::Option<bool>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub ogp: std::option::Option<crate::com_whtwnd::blog::Ogp<'a>>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub subtitle: std::option::Option<jacquard_common::CowStr<'a>>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub theme: std::option::Option<jacquard_common::CowStr<'a>>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub title: std::option::Option<jacquard_common::CowStr<'a>>,
    ///Tells the visibility of the article to AppView.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub visibility: std::option::Option<jacquard_common::CowStr<'a>>,
}

impl jacquard_common::types::collection::Collection for Entry<'_> {
    const NSID: &'static str = "com.whtwnd.blog.entry";
}