// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: com.shinolabs.pinksea.oekaki
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
pub struct Image<'a> {
    ///The actual atproto image blob.
    #[serde(borrow)]
    pub blob: jacquard_common::types::blob::Blob<'a>,
    #[serde(borrow)]
    pub image_link: crate::com_shinolabs::pinksea::oekaki::ImageLink<'a>,
}

///A link to the image, it can be either directly to the PDS or to a CDN.
#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
pub struct ImageLink<'a> {
    ///Alt text description of the image, for accessibility.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub alt: std::option::Option<jacquard_common::CowStr<'a>>,
}

///An oekaki post.
#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
pub struct Oekaki<'a> {
    ///The timestamp of creation.
    pub created_at: jacquard_common::types::string::Datetime,
    #[serde(borrow)]
    pub image: crate::com_shinolabs::pinksea::oekaki::Image<'a>,
    ///What this oekaki post is a response to.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub in_response_to: std::option::Option<
        crate::com_atproto::repo::strong_ref::StrongRef<'a>,
    >,
    ///Is this oekaki NSFW?
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub nsfw: std::option::Option<bool>,
    ///An array of tags this image had.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub tags: std::option::Option<Vec<jacquard_common::CowStr<'a>>>,
}

impl jacquard_common::types::collection::Collection for Oekaki<'_> {
    const NSID: &'static str = "com.shinolabs.pinksea.oekaki";
}