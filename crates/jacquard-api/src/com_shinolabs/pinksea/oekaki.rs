// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: com.shinolabs.pinksea.oekaki
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic,
    bon::Builder
)]
#[serde(rename_all = "camelCase")]
pub struct Image<'a> {
    /// The actual atproto image blob.
    #[serde(borrow)]
    pub blob: jacquard_common::types::blob::BlobRef<'a>,
    #[serde(borrow)]
    pub image_link: crate::com_shinolabs::pinksea::oekaki::ImageLink<'a>,
}

/// A link to the image, it can be either directly to the PDS or to a CDN.
#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic,
    Default
)]
#[serde(rename_all = "camelCase")]
pub struct ImageLink<'a> {
    /// Alt text description of the image, for accessibility.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub alt: std::option::Option<jacquard_common::CowStr<'a>>,
}

/// An oekaki post.
#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic,
    bon::Builder
)]
#[serde(rename_all = "camelCase")]
pub struct Oekaki<'a> {
    /// The timestamp of creation.
    pub created_at: jacquard_common::types::string::Datetime,
    #[serde(borrow)]
    pub image: crate::com_shinolabs::pinksea::oekaki::Image<'a>,
    /// What this oekaki post is a response to.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub in_response_to: Option<crate::com_atproto::repo::strong_ref::StrongRef<'a>>,
    /// Is this oekaki NSFW?
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    pub nsfw: Option<bool>,
    /// An array of tags this image had.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub tags: Option<Vec<jacquard_common::CowStr<'a>>>,
}

impl<'a> Oekaki<'a> {
    pub fn uri(
        uri: impl Into<jacquard_common::CowStr<'a>>,
    ) -> Result<
        jacquard_common::types::uri::RecordUri<'a, OekakiRecord>,
        jacquard_common::types::uri::UriError,
    > {
        jacquard_common::types::uri::RecordUri::try_from_uri(
            jacquard_common::types::string::AtUri::new_cow(uri.into())?,
        )
    }
}

/// Typed wrapper for GetRecord response with this collection's record type.
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
pub struct OekakiGetRecordOutput<'a> {
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub cid: std::option::Option<jacquard_common::types::string::Cid<'a>>,
    #[serde(borrow)]
    pub uri: jacquard_common::types::string::AtUri<'a>,
    #[serde(borrow)]
    pub value: Oekaki<'a>,
}

impl From<OekakiGetRecordOutput<'_>> for Oekaki<'_> {
    fn from(output: OekakiGetRecordOutput<'_>) -> Self {
        use jacquard_common::IntoStatic;
        output.value.into_static()
    }
}

impl jacquard_common::types::collection::Collection for Oekaki<'_> {
    const NSID: &'static str = "com.shinolabs.pinksea.oekaki";
    type Record = OekakiRecord;
}

/// Marker type for deserializing records from this collection.
#[derive(Debug, serde::Serialize, serde::Deserialize)]
pub struct OekakiRecord;
impl jacquard_common::xrpc::XrpcResp for OekakiRecord {
    const NSID: &'static str = "com.shinolabs.pinksea.oekaki";
    const ENCODING: &'static str = "application/json";
    type Output<'de> = OekakiGetRecordOutput<'de>;
    type Err<'de> = jacquard_common::types::collection::RecordError<'de>;
}

impl jacquard_common::types::collection::Collection for OekakiRecord {
    const NSID: &'static str = "com.shinolabs.pinksea.oekaki";
    type Record = OekakiRecord;
}