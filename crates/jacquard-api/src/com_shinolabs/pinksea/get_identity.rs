// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: com.shinolabs.pinksea.getIdentity
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    bon::Builder,
    jacquard_derive::IntoStatic
)]
#[builder(start_fn = new)]
#[serde(rename_all = "camelCase")]
pub struct GetIdentity {}
#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
pub struct GetIdentityOutput<'a> {
    /// The DID of the user.
    #[serde(borrow)]
    pub did: jacquard_common::types::ident::AtIdentifier<'a>,
    /// The handle of the author.
    #[serde(borrow)]
    pub handle: jacquard_common::types::string::Handle<'a>,
}

/// Response type for
///com.shinolabs.pinksea.getIdentity
pub struct GetIdentityResponse;
impl jacquard_common::xrpc::XrpcResp for GetIdentityResponse {
    const NSID: &'static str = "com.shinolabs.pinksea.getIdentity";
    const ENCODING: &'static str = "application/json";
    type Output<'de> = GetIdentityOutput<'de>;
    type Err<'de> = jacquard_common::xrpc::GenericError<'de>;
}

impl jacquard_common::xrpc::XrpcRequest for GetIdentity {
    const NSID: &'static str = "com.shinolabs.pinksea.getIdentity";
    const METHOD: jacquard_common::xrpc::XrpcMethod = jacquard_common::xrpc::XrpcMethod::Query;
    type Response = GetIdentityResponse;
}

/// Endpoint type for
///com.shinolabs.pinksea.getIdentity
pub struct GetIdentityRequest;
impl jacquard_common::xrpc::XrpcEndpoint for GetIdentityRequest {
    const PATH: &'static str = "/xrpc/com.shinolabs.pinksea.getIdentity";
    const METHOD: jacquard_common::xrpc::XrpcMethod = jacquard_common::xrpc::XrpcMethod::Query;
    type Request<'de> = GetIdentity;
    type Response = GetIdentityResponse;
}