// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: com.shinolabs.pinksea.profile
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

///A profile of a PinkSea user.
#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
pub struct Profile<'a> {
    ///The oekaki image that's the avatar of this profile.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub avatar: std::option::Option<crate::com_atproto::repo::strong_ref::StrongRef<'a>>,
    ///The bio of the user.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub bio: std::option::Option<jacquard_common::CowStr<'a>>,
    ///The links to outside platforms for this user
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub links: std::option::Option<
        Vec<crate::com_shinolabs::pinksea::profile::ProfileLink<'a>>,
    >,
    ///The display name of the user.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub nickname: std::option::Option<jacquard_common::CowStr<'a>>,
}

impl jacquard_common::types::collection::Collection for Profile<'_> {
    const NSID: &'static str = "com.shinolabs.pinksea.profile";
}

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
pub struct ProfileLink<'a> {
    ///The URL of the link.
    #[serde(borrow)]
    pub link: jacquard_common::types::string::Uri<'a>,
    ///The name of the link.
    #[serde(borrow)]
    pub name: jacquard_common::CowStr<'a>,
}