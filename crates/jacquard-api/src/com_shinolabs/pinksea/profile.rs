// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: com.shinolabs.pinksea.profile
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

/// A profile of a PinkSea user.
#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic,
    bon::Builder
)]
#[serde(rename_all = "camelCase")]
pub struct Profile<'a> {
    /// The oekaki image that's the avatar of this profile.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub avatar: Option<crate::com_atproto::repo::strong_ref::StrongRef<'a>>,
    /// The bio of the user.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub bio: Option<jacquard_common::CowStr<'a>>,
    /// The links to outside platforms for this user
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub links: Option<Vec<crate::com_shinolabs::pinksea::profile::ProfileLink<'a>>>,
    /// The display name of the user.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub nickname: Option<jacquard_common::CowStr<'a>>,
}

/// Typed wrapper for GetRecord response with this collection's record type.
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
pub struct ProfileGetRecordOutput<'a> {
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub cid: std::option::Option<jacquard_common::types::string::Cid<'a>>,
    #[serde(borrow)]
    pub uri: jacquard_common::types::string::AtUri<'a>,
    #[serde(borrow)]
    pub value: Profile<'a>,
}

/// Marker type for deserializing records from this collection.
pub struct ProfileRecord;
impl jacquard_common::xrpc::XrpcResp for ProfileRecord {
    const NSID: &'static str = "com.shinolabs.pinksea.profile";
    const ENCODING: &'static str = "application/json";
    type Output<'de> = ProfileGetRecordOutput<'de>;
    type Err<'de> = jacquard_common::types::collection::RecordError<'de>;
}

impl jacquard_common::types::collection::Collection for Profile<'_> {
    const NSID: &'static str = "com.shinolabs.pinksea.profile";
    type Record = ProfileRecord;
}

impl From<ProfileGetRecordOutput<'_>> for Profile<'_> {
    fn from(output: ProfileGetRecordOutput<'_>) -> Self {
        use jacquard_common::IntoStatic;
        output.value.into_static()
    }
}

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic,
    bon::Builder
)]
#[serde(rename_all = "camelCase")]
pub struct ProfileLink<'a> {
    /// The URL of the link.
    #[serde(borrow)]
    pub link: jacquard_common::types::string::Uri<'a>,
    /// The name of the link.
    #[serde(borrow)]
    #[builder(into)]
    pub name: jacquard_common::CowStr<'a>,
}