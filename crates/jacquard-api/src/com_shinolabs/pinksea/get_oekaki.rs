// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: com.shinolabs.pinksea.getOekaki
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    bon::Builder,
    jacquard_derive::IntoStatic
)]
#[builder(start_fn = new)]
#[serde(rename_all = "camelCase")]
pub struct GetOekaki<'a> {
    #[serde(borrow)]
    pub did: jacquard_common::types::ident::AtIdentifier<'a>,
    #[serde(borrow)]
    #[builder(into)]
    pub rkey: jacquard_common::CowStr<'a>,
}

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
pub struct GetOekakiOutput<'a> {
    #[serde(borrow)]
    pub children: Vec<crate::com_shinolabs::pinksea::app_view_defs::HydratedOekaki<'a>>,
    #[serde(borrow)]
    pub parent: GetOekakiOutputParent<'a>,
}

#[jacquard_derive::open_union]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(tag = "$type")]
#[serde(bound(deserialize = "'de: 'a"))]
pub enum GetOekakiOutputParent<'a> {
    #[serde(rename = "com.shinolabs.pinksea.appViewDefs#hydratedOekaki")]
    AppViewDefsHydratedOekaki(
        Box<crate::com_shinolabs::pinksea::app_view_defs::HydratedOekaki<'a>>,
    ),
    #[serde(rename = "com.shinolabs.pinksea.appViewDefs#oekakiTombstone")]
    AppViewDefsOekakiTombstone(
        Box<crate::com_shinolabs::pinksea::app_view_defs::OekakiTombstone<'a>>,
    ),
}

///Response type for
///com.shinolabs.pinksea.getOekaki
pub struct GetOekakiResponse;
impl jacquard_common::xrpc::XrpcResp for GetOekakiResponse {
    const NSID: &'static str = "com.shinolabs.pinksea.getOekaki";
    const ENCODING: &'static str = "application/json";
    type Output<'de> = GetOekakiOutput<'de>;
    type Err<'de> = jacquard_common::xrpc::GenericError<'de>;
}

impl<'a> jacquard_common::xrpc::XrpcRequest for GetOekaki<'a> {
    const NSID: &'static str = "com.shinolabs.pinksea.getOekaki";
    const METHOD: jacquard_common::xrpc::XrpcMethod = jacquard_common::xrpc::XrpcMethod::Query;
    type Response = GetOekakiResponse;
}

///Endpoint type for
///com.shinolabs.pinksea.getOekaki
pub struct GetOekakiRequest;
impl jacquard_common::xrpc::XrpcEndpoint for GetOekakiRequest {
    const PATH: &'static str = "/xrpc/com.shinolabs.pinksea.getOekaki";
    const METHOD: jacquard_common::xrpc::XrpcMethod = jacquard_common::xrpc::XrpcMethod::Query;
    type Request<'de> = GetOekaki<'de>;
    type Response = GetOekakiResponse;
}