// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: com.shinolabs.pinksea.getTagFeed
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    bon::Builder,
    jacquard_derive::IntoStatic
)]
#[builder(start_fn = new)]
#[serde(rename_all = "camelCase")]
pub struct GetTagFeed<'a> {
    ///(default: 50, min: 1, max: 50)
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub limit: std::option::Option<i64>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub since: std::option::Option<jacquard_common::types::string::Datetime>,
    #[serde(borrow)]
    #[builder(into)]
    pub tag: jacquard_common::CowStr<'a>,
}

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
pub struct GetTagFeedOutput<'a> {
    #[serde(borrow)]
    pub oekaki: Vec<crate::com_shinolabs::pinksea::app_view_defs::HydratedOekaki<'a>>,
}

/// Response type for
///com.shinolabs.pinksea.getTagFeed
pub struct GetTagFeedResponse;
impl jacquard_common::xrpc::XrpcResp for GetTagFeedResponse {
    const NSID: &'static str = "com.shinolabs.pinksea.getTagFeed";
    const ENCODING: &'static str = "application/json";
    type Output<'de> = GetTagFeedOutput<'de>;
    type Err<'de> = jacquard_common::xrpc::GenericError<'de>;
}

impl<'a> jacquard_common::xrpc::XrpcRequest for GetTagFeed<'a> {
    const NSID: &'static str = "com.shinolabs.pinksea.getTagFeed";
    const METHOD: jacquard_common::xrpc::XrpcMethod = jacquard_common::xrpc::XrpcMethod::Query;
    type Response = GetTagFeedResponse;
}

/// Endpoint type for
///com.shinolabs.pinksea.getTagFeed
pub struct GetTagFeedRequest;
impl jacquard_common::xrpc::XrpcEndpoint for GetTagFeedRequest {
    const PATH: &'static str = "/xrpc/com.shinolabs.pinksea.getTagFeed";
    const METHOD: jacquard_common::xrpc::XrpcMethod = jacquard_common::xrpc::XrpcMethod::Query;
    type Request<'de> = GetTagFeed<'de>;
    type Response = GetTagFeedResponse;
}