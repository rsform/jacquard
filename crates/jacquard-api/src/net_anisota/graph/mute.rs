// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: net.anisota.graph.mute
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

/// Configuration for which types of content to mute
#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic,
    Default
)]
#[serde(rename_all = "camelCase")]
pub struct ContentTypes<'a> {
    /// Mute regular posts from this account
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub posts: std::option::Option<bool>,
    /// Mute quote posts from this account
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub quotes: std::option::Option<bool>,
    /// Mute replies from this account
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub replies: std::option::Option<bool>,
    /// Mute reposts from this account
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub reposts: std::option::Option<bool>,
}

/// A record for muting content from a specific account with fine-grained control over content types and duration
#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic,
    bon::Builder
)]
#[serde(rename_all = "camelCase")]
pub struct Mute<'a> {
    /// Types of content to mute from this account
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub content_types: Option<crate::net_anisota::graph::mute::ContentTypes<'a>>,
    /// When the mute was created
    pub created_at: jacquard_common::types::string::Datetime,
    /// When this mute expires. If not set, mute is permanent
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    pub expires_at: Option<jacquard_common::types::string::Datetime>,
    /// Optional reason for muting this account
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub reason: Option<jacquard_common::CowStr<'a>>,
    /// DID of the account to mute
    #[serde(borrow)]
    pub subject: jacquard_common::types::string::Did<'a>,
    /// Specific feeds where this mute should apply. If empty, applies to all feeds
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub target_feeds: Option<Vec<jacquard_common::types::string::AtUri<'a>>>,
}

/// Typed wrapper for GetRecord response with this collection's record type.
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
pub struct MuteGetRecordOutput<'a> {
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub cid: std::option::Option<jacquard_common::types::string::Cid<'a>>,
    #[serde(borrow)]
    pub uri: jacquard_common::types::string::AtUri<'a>,
    #[serde(borrow)]
    pub value: Mute<'a>,
}

/// Marker type for deserializing records from this collection.
pub struct MuteRecord;
impl jacquard_common::xrpc::XrpcResp for MuteRecord {
    const NSID: &'static str = "net.anisota.graph.mute";
    const ENCODING: &'static str = "application/json";
    type Output<'de> = MuteGetRecordOutput<'de>;
    type Err<'de> = jacquard_common::types::collection::RecordError<'de>;
}

impl jacquard_common::types::collection::Collection for Mute<'_> {
    const NSID: &'static str = "net.anisota.graph.mute";
    type Record = MuteRecord;
}

impl From<MuteGetRecordOutput<'_>> for Mute<'_> {
    fn from(output: MuteGetRecordOutput<'_>) -> Self {
        use jacquard_common::IntoStatic;
        output.value.into_static()
    }
}