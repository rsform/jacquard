// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: net.anisota.feed.draft
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

/// Record containing a draft post that can be edited and later published as app.bsky.feed.post
#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic,
    bon::Builder
)]
#[serde(rename_all = "camelCase")]
pub struct Draft<'a> {
    /// Client-declared timestamp when this draft was originally created.
    pub created_at: jacquard_common::types::string::Datetime,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub embed: Option<DraftEmbed<'a>>,
    /// Annotations of text (mentions, URLs, hashtags, etc)
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub facets: Option<Vec<crate::app_bsky::richtext::facet::Facet<'a>>>,
    /// Self-label values for this post. Effectively content warnings.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub labels: Option<crate::com_atproto::label::SelfLabels<'a>>,
    /// Indicates human language of post primary text content.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    pub langs: Option<Vec<jacquard_common::types::string::Language>>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub reply: Option<crate::net_anisota::feed::draft::ReplyRef<'a>>,
    /// Additional hashtags, in addition to any included in post text and facets.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub tags: Option<Vec<jacquard_common::CowStr<'a>>>,
    /// The primary post content. May be an empty string, if there are embeds.
    #[serde(borrow)]
    #[builder(into)]
    pub text: jacquard_common::CowStr<'a>,
    /// Client-declared timestamp when this draft was last updated.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    pub updated_at: Option<jacquard_common::types::string::Datetime>,
}

#[jacquard_derive::open_union]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(tag = "$type")]
#[serde(bound(deserialize = "'de: 'a"))]
pub enum DraftEmbed<'a> {
    #[serde(rename = "app.bsky.embed.images")]
    Images(Box<crate::app_bsky::embed::images::Images<'a>>),
    #[serde(rename = "app.bsky.embed.video")]
    Video(Box<crate::app_bsky::embed::video::Video<'a>>),
    #[serde(rename = "app.bsky.embed.external")]
    External(Box<crate::app_bsky::embed::external::ExternalRecord<'a>>),
    #[serde(rename = "app.bsky.embed.record")]
    Record(Box<crate::app_bsky::embed::record::Record<'a>>),
    #[serde(rename = "app.bsky.embed.recordWithMedia")]
    RecordWithMedia(Box<crate::app_bsky::embed::record_with_media::RecordWithMedia<'a>>),
}

/// Typed wrapper for GetRecord response with this collection's record type.
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
pub struct DraftGetRecordOutput<'a> {
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub cid: std::option::Option<jacquard_common::types::string::Cid<'a>>,
    #[serde(borrow)]
    pub uri: jacquard_common::types::string::AtUri<'a>,
    #[serde(borrow)]
    pub value: Draft<'a>,
}

impl From<DraftGetRecordOutput<'_>> for Draft<'_> {
    fn from(output: DraftGetRecordOutput<'_>) -> Self {
        use jacquard_common::IntoStatic;
        output.value.into_static()
    }
}

impl jacquard_common::types::collection::Collection for Draft<'_> {
    const NSID: &'static str = "net.anisota.feed.draft";
    type Record = DraftRecord;
}

/// Marker type for deserializing records from this collection.
#[derive(Debug, serde::Serialize, serde::Deserialize)]
pub struct DraftRecord;
impl jacquard_common::xrpc::XrpcResp for DraftRecord {
    const NSID: &'static str = "net.anisota.feed.draft";
    const ENCODING: &'static str = "application/json";
    type Output<'de> = DraftGetRecordOutput<'de>;
    type Err<'de> = jacquard_common::types::collection::RecordError<'de>;
}

impl jacquard_common::types::collection::Collection for DraftRecord {
    const NSID: &'static str = "net.anisota.feed.draft";
    type Record = DraftRecord;
}

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic,
    bon::Builder
)]
#[serde(rename_all = "camelCase")]
pub struct ReplyRef<'a> {
    #[serde(borrow)]
    pub parent: crate::com_atproto::repo::strong_ref::StrongRef<'a>,
    #[serde(borrow)]
    pub root: crate::com_atproto::repo::strong_ref::StrongRef<'a>,
}