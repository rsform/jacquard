// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: net.anisota.beta.game.inventory
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

/// Beta version: Record representing an item in a player's game inventory
#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic,
    bon::Builder
)]
#[serde(rename_all = "camelCase")]
pub struct Inventory<'a> {
    /// When the item was acquired
    pub acquired_at: jacquard_common::types::string::Datetime,
    /// When the record was created
    pub created_at: jacquard_common::types::string::Datetime,
    /// Unique identifier for the item from gameItems.json
    #[serde(borrow)]
    #[builder(into)]
    pub item_id: jacquard_common::CowStr<'a>,
    /// Display name of the item
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub item_name: Option<jacquard_common::CowStr<'a>>,
    /// Type category of the item (consumable, tool, equipment, etc.)
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub item_type: Option<jacquard_common::CowStr<'a>>,
    /// Base value of the item in game currency
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    pub item_value: Option<i64>,
    /// When the record was last modified
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    pub last_modified: Option<jacquard_common::types::string::Datetime>,
    /// URI of the game.log record that documents the acquisition of this item
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub log_record_uri: Option<jacquard_common::CowStr<'a>>,
    /// Maximum stack size for this item
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    pub max_stack: Option<i64>,
    /// Additional item-specific data (stats, attributes, enchantments, etc.)
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub metadata: Option<jacquard_common::types::value::Data<'a>>,
    /// Number of items in the stack
    pub quantity: i64,
    /// Rarity level of the item
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub rarity: Option<jacquard_common::CowStr<'a>>,
    /// How the item was acquired
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub source: Option<jacquard_common::CowStr<'a>>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub source_details: Option<
        crate::net_anisota::beta::game::inventory::SourceDetails<'a>,
    >,
    /// Whether this item can be stacked with others of the same type
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    pub stackable: Option<bool>,
}

/// Typed wrapper for GetRecord response with this collection's record type.
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
pub struct InventoryGetRecordOutput<'a> {
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub cid: std::option::Option<jacquard_common::types::string::Cid<'a>>,
    #[serde(borrow)]
    pub uri: jacquard_common::types::string::AtUri<'a>,
    #[serde(borrow)]
    pub value: Inventory<'a>,
}

impl From<InventoryGetRecordOutput<'_>> for Inventory<'_> {
    fn from(output: InventoryGetRecordOutput<'_>) -> Self {
        use jacquard_common::IntoStatic;
        output.value.into_static()
    }
}

impl jacquard_common::types::collection::Collection for Inventory<'_> {
    const NSID: &'static str = "net.anisota.beta.game.inventory";
    type Record = InventoryRecord;
}

/// Marker type for deserializing records from this collection.
#[derive(Debug, serde::Serialize, serde::Deserialize)]
pub struct InventoryRecord;
impl jacquard_common::xrpc::XrpcResp for InventoryRecord {
    const NSID: &'static str = "net.anisota.beta.game.inventory";
    const ENCODING: &'static str = "application/json";
    type Output<'de> = InventoryGetRecordOutput<'de>;
    type Err<'de> = jacquard_common::types::collection::RecordError<'de>;
}

impl jacquard_common::types::collection::Collection for InventoryRecord {
    const NSID: &'static str = "net.anisota.beta.game.inventory";
    type Record = InventoryRecord;
}

/// Additional details about how the item was acquired
#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic,
    Default
)]
#[serde(rename_all = "camelCase")]
pub struct SourceDetails<'a> {
    /// URI of the game card that provided this item
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub game_card_uri: std::option::Option<jacquard_common::CowStr<'a>>,
    /// ID of the quest that rewarded this item
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub quest_id: std::option::Option<jacquard_common::CowStr<'a>>,
    /// Daily reward streak when item was acquired
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub reward_streak: std::option::Option<i64>,
}