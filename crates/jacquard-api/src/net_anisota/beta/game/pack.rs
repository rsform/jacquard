// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: net.anisota.beta.game.pack
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

/// Beta version: Record tracking daily pack openings and streak information
#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic,
    bon::Builder
)]
#[serde(rename_all = "camelCase")]
pub struct Pack<'a> {
    /// When the record was created
    pub created_at: jacquard_common::types::string::Datetime,
    /// When the record was last modified
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    pub last_modified: Option<jacquard_common::types::string::Datetime>,
    /// When daily pack was last opened
    pub last_open_time: jacquard_common::types::string::Datetime,
    /// Longest daily pack opening streak achieved
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    pub longest_streak: Option<i64>,
    /// History of the last few pack openings
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub pack_history: Option<
        Vec<crate::net_anisota::beta::game::pack::PackHistoryEntry<'a>>,
    >,
    /// Current daily pack opening streak count
    pub streak: i64,
    /// Total number of times daily packs have been opened
    pub total_opens: i64,
}

/// Typed wrapper for GetRecord response with this collection's record type.
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
pub struct PackGetRecordOutput<'a> {
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub cid: std::option::Option<jacquard_common::types::string::Cid<'a>>,
    #[serde(borrow)]
    pub uri: jacquard_common::types::string::AtUri<'a>,
    #[serde(borrow)]
    pub value: Pack<'a>,
}

/// Marker type for deserializing records from this collection.
pub struct PackRecord;
impl jacquard_common::xrpc::XrpcResp for PackRecord {
    const NSID: &'static str = "net.anisota.beta.game.pack";
    const ENCODING: &'static str = "application/json";
    type Output<'de> = PackGetRecordOutput<'de>;
    type Err<'de> = jacquard_common::types::collection::RecordError<'de>;
}

impl jacquard_common::types::collection::Collection for Pack<'_> {
    const NSID: &'static str = "net.anisota.beta.game.pack";
    type Record = PackRecord;
}

impl From<PackGetRecordOutput<'_>> for Pack<'_> {
    fn from(output: PackGetRecordOutput<'_>) -> Self {
        use jacquard_common::IntoStatic;
        output.value.into_static()
    }
}

/// A single pack opening entry in the history
#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic,
    Default
)]
#[serde(rename_all = "camelCase")]
pub struct PackHistoryEntry<'a> {
    /// Items received from this pack
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub items_received: std::option::Option<
        Vec<crate::net_anisota::beta::game::pack::ReceivedItem<'a>>,
    >,
    /// When this pack was opened
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub open_time: std::option::Option<jacquard_common::types::string::Datetime>,
    /// Streak count at time of opening
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub streak_count: std::option::Option<i64>,
}

/// An item received from a pack opening
#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic,
    Default
)]
#[serde(rename_all = "camelCase")]
pub struct ReceivedItem<'a> {
    /// ID of the item received
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub item_id: std::option::Option<jacquard_common::CowStr<'a>>,
    /// Quantity received
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub quantity: std::option::Option<i64>,
    /// Rarity of the item
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub rarity: std::option::Option<jacquard_common::CowStr<'a>>,
}