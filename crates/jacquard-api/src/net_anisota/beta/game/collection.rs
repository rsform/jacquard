// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: net.anisota.beta.game.collection
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

///Beta version: Record representing a collected specimen in a player's collection
#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
pub struct Collection<'a> {
    ///When the specimen was first acquired
    pub acquired_at: jacquard_common::types::string::Datetime,
    ///Common name of the specimen
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub common_name: std::option::Option<jacquard_common::CowStr<'a>>,
    ///When the record was created
    pub created_at: jacquard_common::types::string::Datetime,
    ///Taxonomic family
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub family: std::option::Option<jacquard_common::CowStr<'a>>,
    ///Taxonomic genus
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub genus: std::option::Option<jacquard_common::CowStr<'a>>,
    ///When the record was last modified
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub last_modified: std::option::Option<jacquard_common::types::string::Datetime>,
    ///When the specimen was last encountered
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub last_seen: std::option::Option<jacquard_common::types::string::Datetime>,
    ///URI of the game.log record that documents the acquisition of this specimen
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub log_record_uri: std::option::Option<jacquard_common::CowStr<'a>>,
    ///Number of specimens collected
    pub quantity: i64,
    ///Rarity level of the specimen
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub rarity: std::option::Option<jacquard_common::CowStr<'a>>,
    ///Scientific name of the specimen
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub scientific_name: std::option::Option<jacquard_common::CowStr<'a>>,
    ///How the specimen was acquired
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub source: std::option::Option<jacquard_common::CowStr<'a>>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub source_details: std::option::Option<
        crate::net_anisota::beta::game::collection::SourceDetails<'a>,
    >,
    ///Taxonomic species
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub species: std::option::Option<jacquard_common::CowStr<'a>>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub specimen_data: std::option::Option<
        crate::net_anisota::beta::game::collection::SpecimenData<'a>,
    >,
    ///Unique identifier for the specimen
    #[serde(borrow)]
    pub specimen_id: jacquard_common::CowStr<'a>,
    ///Collection status of this specimen
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub status: std::option::Option<jacquard_common::CowStr<'a>>,
}

/// Typed wrapper for GetRecord response with this collection's record type.
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
pub struct CollectionGetRecordOutput<'a> {
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub cid: std::option::Option<jacquard_common::types::string::Cid<'a>>,
    #[serde(borrow)]
    pub uri: jacquard_common::types::string::AtUri<'a>,
    #[serde(borrow)]
    pub value: Collection<'a>,
}

/// Marker type for deserializing records from this collection.
pub struct CollectionRecord;
impl jacquard_common::xrpc::XrpcResp for CollectionRecord {
    const NSID: &'static str = "net.anisota.beta.game.collection";
    const ENCODING: &'static str = "application/json";
    type Output<'de> = CollectionGetRecordOutput<'de>;
    type Err<'de> = jacquard_common::types::collection::RecordError<'de>;
}

impl jacquard_common::types::collection::Collection for Collection<'_> {
    const NSID: &'static str = "net.anisota.beta.game.collection";
    type Record = CollectionRecord;
}

impl From<CollectionGetRecordOutput<'_>> for Collection<'_> {
    fn from(output: CollectionGetRecordOutput<'_>) -> Self {
        use jacquard_common::IntoStatic;
        output.value.into_static()
    }
}

///Additional details about how the specimen was acquired
#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
pub struct SourceDetails<'a> {
    ///Number of attempts before successful capture
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub attempts: std::option::Option<i64>,
    ///Probability used when catching this specimen (decimal string, e.g. '0.75')
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub catch_probability: std::option::Option<jacquard_common::CowStr<'a>>,
    ///URI of the game card that provided this specimen
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub game_card_uri: std::option::Option<jacquard_common::CowStr<'a>>,
    ///Location where specimen was found or observed
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub location: std::option::Option<jacquard_common::CowStr<'a>>,
}

///Complete specimen information
#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
pub struct SpecimenData<'a> {
    ///Scientific authorship of the species
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub authorship: std::option::Option<jacquard_common::CowStr<'a>>,
    ///Detailed description of the specimen
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub description: std::option::Option<jacquard_common::CowStr<'a>>,
}