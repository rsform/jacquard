// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: net.anisota.beta.game.session
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

/// Summary of activity during this session
#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic,
    bon::Builder
)]
#[serde(rename_all = "camelCase")]
pub struct ActivitySummary<'a> {
    /// Player's current level at the time of this session update
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    pub current_level: Option<i64>,
    /// Player's total XP at the time of this session update
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    pub current_xp: Option<i64>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub game_actions: Option<crate::net_anisota::beta::game::session::GameActions<'a>>,
    /// List of unique pages/routes visited
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub pages_visited: Option<Vec<jacquard_common::CowStr<'a>>>,
    /// Total number of events logged in this session
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    pub total_events: Option<i64>,
    /// Total XP gained during this specific session
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    pub xp_gained_this_session: Option<i64>,
}

/// Game-specific actions performed
#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic,
    bon::Builder
)]
#[serde(rename_all = "camelCase")]
pub struct GameActions<'a> {
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    pub daily_rewards_claimed: Option<i64>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    pub feeds_loaded: Option<i64>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    pub items_collected: Option<i64>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    pub level_ups: Option<i64>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    pub posts_viewed: Option<i64>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    pub specimens_collected: Option<i64>,
}

/// A game session record tracking a continuous period of user engagement with the application
#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic,
    bon::Builder
)]
#[serde(rename_all = "camelCase")]
pub struct Session<'a> {
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub activity_summary: Option<
        crate::net_anisota::beta::game::session::ActivitySummary<'a>,
    >,
    /// Version of the client application
    #[serde(borrow)]
    #[builder(into)]
    pub client_version: jacquard_common::CowStr<'a>,
    /// When the session record was created
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    pub created_at: Option<jacquard_common::types::string::Datetime>,
    /// Total session duration in milliseconds (calculated when session ends)
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    pub duration: Option<i64>,
    /// Why the session ended
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub end_reason: Option<jacquard_common::CowStr<'a>>,
    /// When the session ended (ISO 8601)
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    pub ended_at: Option<jacquard_common::types::string::Datetime>,
    /// Timestamp of the last recorded activity in this session
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    pub last_activity_at: Option<jacquard_common::types::string::Datetime>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub metadata: Option<crate::net_anisota::beta::game::session::Metadata<'a>>,
    /// URI of the previous session if this is a continuation (e.g., after brief inactivity)
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub parent_session_uri: Option<jacquard_common::CowStr<'a>>,
    /// Platform where the session occurred
    #[serde(borrow)]
    #[builder(into)]
    pub platform: jacquard_common::CowStr<'a>,
    /// URIs of log records that occurred during this session
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub related_log_uris: Option<Vec<jacquard_common::CowStr<'a>>>,
    /// URIs of progress records created during this session
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub related_progress_uris: Option<Vec<jacquard_common::CowStr<'a>>>,
    /// URIs of related sessions (e.g., same day, same device)
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub related_session_uris: Option<Vec<jacquard_common::CowStr<'a>>>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub session_context: Option<
        crate::net_anisota::beta::game::session::SessionContext<'a>,
    >,
    /// When the session began (ISO 8601)
    pub started_at: jacquard_common::types::string::Datetime,
    /// Current status of the session
    #[serde(borrow)]
    #[builder(into)]
    pub status: jacquard_common::CowStr<'a>,
    /// When the session record was last updated
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    pub updated_at: Option<jacquard_common::types::string::Datetime>,
}

/// Typed wrapper for GetRecord response with this collection's record type.
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
pub struct SessionGetRecordOutput<'a> {
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub cid: std::option::Option<jacquard_common::types::string::Cid<'a>>,
    #[serde(borrow)]
    pub uri: jacquard_common::types::string::AtUri<'a>,
    #[serde(borrow)]
    pub value: Session<'a>,
}

/// Marker type for deserializing records from this collection.
pub struct SessionRecord;
impl jacquard_common::xrpc::XrpcResp for SessionRecord {
    const NSID: &'static str = "net.anisota.beta.game.session";
    const ENCODING: &'static str = "application/json";
    type Output<'de> = SessionGetRecordOutput<'de>;
    type Err<'de> = jacquard_common::types::collection::RecordError<'de>;
}

impl jacquard_common::types::collection::Collection for Session<'_> {
    const NSID: &'static str = "net.anisota.beta.game.session";
    type Record = SessionRecord;
}

impl From<SessionGetRecordOutput<'_>> for Session<'_> {
    fn from(output: SessionGetRecordOutput<'_>) -> Self {
        use jacquard_common::IntoStatic;
        output.value.into_static()
    }
}

/// Additional session metadata
#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic,
    bon::Builder
)]
#[serde(rename_all = "camelCase")]
pub struct Metadata<'a> {
    /// List of features used during the session
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub features: Option<Vec<jacquard_common::CowStr<'a>>>,
    /// Network condition during session
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub network_condition: Option<jacquard_common::CowStr<'a>>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub performance_metrics: Option<
        crate::net_anisota::beta::game::session::PerformanceMetrics<'a>,
    >,
}

/// Performance-related data
#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic,
    bon::Builder
)]
#[serde(rename_all = "camelCase")]
pub struct PerformanceMetrics<'a> {
    /// Average API response time in milliseconds (rounded to nearest integer)
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    pub average_response_time: Option<i64>,
    /// Number of errors encountered
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    pub error_count: Option<i64>,
}

/// Context about how the session started
#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic,
    bon::Builder
)]
#[serde(rename_all = "camelCase")]
pub struct SessionContext<'a> {
    /// How the user was authenticated
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub authentication_method: Option<jacquard_common::CowStr<'a>>,
    /// How the user entered the app
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub entry_point: Option<jacquard_common::CowStr<'a>>,
    /// Whether this was a new user's first session
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    pub is_new_user: Option<bool>,
    /// Referrer URL if applicable
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub referrer: Option<jacquard_common::CowStr<'a>>,
}