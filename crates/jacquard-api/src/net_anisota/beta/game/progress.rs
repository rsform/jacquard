// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: net.anisota.beta.game.progress
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

/// Record representing a player's level progression and game statistics
#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic,
    bon::Builder
)]
#[serde(rename_all = "camelCase")]
pub struct Progress<'a> {
    /// URI of the card that was advanced when triggerSource is card_advance
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub card_uri: Option<jacquard_common::CowStr<'a>>,
    /// When the progress record was created
    pub created_at: jacquard_common::types::string::Datetime,
    /// Current stamina level when this progress was recorded (decimal string, e.g. '85.5')
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub current_stamina: Option<jacquard_common::CowStr<'a>>,
    /// Current player level
    pub level: i64,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub metadata: Option<crate::net_anisota::beta::game::progress::Metadata<'a>>,
    /// Previous level before this update (for tracking level progression)
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    pub previous_level: Option<i64>,
    /// Progress percentage to the next level (decimal string, e.g. '75.5')
    #[serde(borrow)]
    #[builder(into)]
    pub progress_percentage: jacquard_common::CowStr<'a>,
    /// URIs of related game log records that contributed to this progress
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub related_log_uris: Option<Vec<jacquard_common::CowStr<'a>>>,
    /// Session ID when this progress was recorded (for linking with log records)
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub session_id: Option<jacquard_common::CowStr<'a>>,
    /// URI of the session record when this progress was recorded
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub session_uri: Option<jacquard_common::CowStr<'a>>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub stats: Option<crate::net_anisota::beta::game::progress::Stats<'a>>,
    /// Total experience points accumulated
    pub total_xp: i64,
    /// What action triggered this progress save
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub trigger_source: Option<jacquard_common::CowStr<'a>>,
    /// Experience points gained since the last progress save
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    pub xp_gained_since_last_save: Option<i64>,
    /// Experience points needed to reach the next level
    pub xp_to_next_level: i64,
}

impl<'a> Progress<'a> {
    pub fn uri(
        uri: impl Into<jacquard_common::CowStr<'a>>,
    ) -> Result<
        jacquard_common::types::uri::RecordUri<'a, ProgressRecord>,
        jacquard_common::types::uri::UriError,
    > {
        jacquard_common::types::uri::RecordUri::try_from_uri(
            jacquard_common::types::string::AtUri::new_cow(uri.into())?,
        )
    }
}

/// Typed wrapper for GetRecord response with this collection's record type.
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
pub struct ProgressGetRecordOutput<'a> {
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub cid: std::option::Option<jacquard_common::types::string::Cid<'a>>,
    #[serde(borrow)]
    pub uri: jacquard_common::types::string::AtUri<'a>,
    #[serde(borrow)]
    pub value: Progress<'a>,
}

impl From<ProgressGetRecordOutput<'_>> for Progress<'_> {
    fn from(output: ProgressGetRecordOutput<'_>) -> Self {
        use jacquard_common::IntoStatic;
        output.value.into_static()
    }
}

impl jacquard_common::types::collection::Collection for Progress<'_> {
    const NSID: &'static str = "net.anisota.beta.game.progress";
    type Record = ProgressRecord;
}

/// Marker type for deserializing records from this collection.
#[derive(Debug, serde::Serialize, serde::Deserialize)]
pub struct ProgressRecord;
impl jacquard_common::xrpc::XrpcResp for ProgressRecord {
    const NSID: &'static str = "net.anisota.beta.game.progress";
    const ENCODING: &'static str = "application/json";
    type Output<'de> = ProgressGetRecordOutput<'de>;
    type Err<'de> = jacquard_common::types::collection::RecordError<'de>;
}

impl jacquard_common::types::collection::Collection for ProgressRecord {
    const NSID: &'static str = "net.anisota.beta.game.progress";
    type Record = ProgressRecord;
}

/// Additional metadata about this progress update
#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic,
    Default
)]
#[serde(rename_all = "camelCase")]
pub struct Metadata<'a> {
    /// Version of the client when this progress was recorded
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub client_version: std::option::Option<jacquard_common::CowStr<'a>>,
    /// Platform where the level up occurred (web, mobile, etc.)
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub platform: std::option::Option<jacquard_common::CowStr<'a>>,
}

/// Game-specific statistics and metrics
#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic,
    Default
)]
#[serde(rename_all = "camelCase")]
pub struct Stats<'a> {
    /// Total daily rewards claimed
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub daily_rewards_claimed: std::option::Option<i64>,
    /// Total items collected
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub items_collected: std::option::Option<i64>,
    /// Date when posts read today was last updated (for daily reset tracking)
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub last_post_read_date: std::option::Option<
        jacquard_common::types::string::Datetime,
    >,
    /// Posts read today (resets daily)
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub posts_read_today: std::option::Option<i64>,
    /// Total posts read (all time, cumulative)
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub posts_read_total: std::option::Option<i64>,
    /// Total posts viewed
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub posts_viewed: std::option::Option<i64>,
    /// Total shuffles performed
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub shuffles_performed: std::option::Option<i64>,
    /// Total specimens collected
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub specimens_collected: std::option::Option<i64>,
}