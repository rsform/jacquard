// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: my.skylights.rel
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
pub struct Rel<'a> {
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub finished_at: std::option::Option<Vec<jacquard_common::types::string::Datetime>>,
    #[serde(borrow)]
    pub item: crate::my_skylights::Item<'a>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub note: std::option::Option<crate::my_skylights::rel::Note<'a>>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub rating: std::option::Option<crate::my_skylights::rel::Rating<'a>>,
}

impl jacquard_common::types::collection::Collection for Rel<'_> {
    const NSID: &'static str = "my.skylights.rel";
}

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
pub struct Note<'a> {
    pub created_at: jacquard_common::types::string::Datetime,
    pub updated_at: jacquard_common::types::string::Datetime,
    #[serde(borrow)]
    pub value: jacquard_common::CowStr<'a>,
}

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
pub struct Rating<'a> {
    pub created_at: jacquard_common::types::string::Datetime,
    pub value: i64,
}