// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: app.ocho.payment.getStripeIntent
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    bon::Builder,
    jacquard_derive::IntoStatic
)]
#[builder(start_fn = new)]
#[serde(rename_all = "camelCase")]
pub struct GetStripeIntent<'a> {
    pub amount: i64,
    #[serde(borrow)]
    #[builder(into)]
    pub id: jacquard_common::CowStr<'a>,
    #[serde(borrow)]
    pub iss: jacquard_common::types::string::Did<'a>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    #[builder(into)]
    pub token: std::option::Option<jacquard_common::CowStr<'a>>,
}

///The intent data
#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
pub struct GetStripeIntentOutput<'a> {
    ///The customer ID for the payment intent
    #[serde(borrow)]
    pub customer: jacquard_common::CowStr<'a>,
    ///The customer session ID for the payment intent
    #[serde(borrow)]
    pub customer_session: jacquard_common::CowStr<'a>,
    ///The ephemeral key for the payment intent
    #[serde(borrow)]
    pub ephemeral_key: jacquard_common::CowStr<'a>,
    ///The payment intent ID
    #[serde(borrow)]
    pub payment_intent: jacquard_common::CowStr<'a>,
    ///The publishable key for the payment intent
    #[serde(borrow)]
    pub publishable_key: jacquard_common::CowStr<'a>,
}

///Response type for
///app.ocho.payment.getStripeIntent
pub struct GetStripeIntentResponse;
impl jacquard_common::xrpc::XrpcResp for GetStripeIntentResponse {
    const NSID: &'static str = "app.ocho.payment.getStripeIntent";
    const ENCODING: &'static str = "application/json";
    type Output<'de> = GetStripeIntentOutput<'de>;
    type Err<'de> = jacquard_common::xrpc::GenericError<'de>;
}

impl<'de> jacquard_common::xrpc::XrpcRequest<'de> for GetStripeIntent<'de> {
    const NSID: &'static str = "app.ocho.payment.getStripeIntent";
    const METHOD: jacquard_common::xrpc::XrpcMethod = jacquard_common::xrpc::XrpcMethod::Query;
    type Response = GetStripeIntentResponse;
}

///Endpoint type for
///app.ocho.payment.getStripeIntent
pub struct GetStripeIntentRequest;
impl jacquard_common::xrpc::XrpcEndpoint for GetStripeIntentRequest {
    const PATH: &'static str = "/xrpc/app.ocho.payment.getStripeIntent";
    const METHOD: jacquard_common::xrpc::XrpcMethod = jacquard_common::xrpc::XrpcMethod::Query;
    type Request<'de> = GetStripeIntent<'de>;
    type Response = GetStripeIntentResponse;
}