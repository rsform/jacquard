// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: app.ocho.plugin.defs
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

pub mod get_launch_asset;
pub mod get_manifest;
pub mod put_hosting_url;
pub mod service;

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic,
    bon::Builder
)]
#[serde(rename_all = "camelCase")]
pub struct AdaptiveIcon<'a> {
    /// The background color of the adaptive icon.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub background_color: Option<jacquard_common::CowStr<'a>>,
    /// The URL to the foreground image of the adaptive icon.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub foreground_image: Option<jacquard_common::CowStr<'a>>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub foreground_image_blob: Option<jacquard_common::types::blob::Blob<'a>>,
}

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic,
    bon::Builder
)]
#[serde(rename_all = "camelCase")]
pub struct Android<'a> {
    /// Configuration for the adaptive icon on Android.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub adaptive_icon: Option<crate::app_ocho::plugin::AdaptiveIcon<'a>>,
    /// Whether edge-to-edge mode is enabled for the app.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    pub edge_to_edge_enabled: Option<bool>,
}

/// Android status bar configuration.
#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic,
    bon::Builder
)]
#[serde(rename_all = "camelCase")]
pub struct AndroidStatusBar<'a> {
    /// The background color of the Android status bar.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub background_color: Option<jacquard_common::CowStr<'a>>,
}

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic,
    bon::Builder
)]
#[serde(rename_all = "camelCase")]
pub struct Asset<'a> {
    /// The blob of the asset
    #[serde(borrow)]
    pub blob: jacquard_common::types::blob::Blob<'a>,
    /// The hash of the asset
    #[serde(borrow)]
    #[builder(into)]
    pub hash: jacquard_common::CowStr<'a>,
    /// The type of the asset
    #[serde(borrow)]
    #[builder(into)]
    pub r#type: jacquard_common::CowStr<'a>,
    /// The date and time when this asset was last updated. Used to reset the jetstream cache, among other things.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    pub updated_at: Option<jacquard_common::types::string::Datetime>,
}

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic,
    bon::Builder
)]
#[serde(rename_all = "camelCase")]
pub struct Db<'a> {
    /// The ID of the database.
    #[serde(borrow)]
    #[builder(into)]
    pub id: jacquard_common::CowStr<'a>,
}

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic,
    bon::Builder
)]
#[serde(rename_all = "camelCase")]
pub struct Developer<'a> {
    /// The tool used for development, e.g., 'expo-cli'.
    #[serde(borrow)]
    #[builder(into)]
    pub tool: jacquard_common::CowStr<'a>,
}

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic,
    bon::Builder
)]
#[serde(rename_all = "camelCase")]
pub struct ExpoClient<'a> {
    /// Android-specific configuration for the app.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub android: Option<crate::app_ocho::plugin::Android<'a>>,
    /// Configuration for the Android status bar.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub android_status_bar: Option<crate::app_ocho::plugin::AndroidStatusBar<'a>>,
    /// Experimental features enabled for the app.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub expirements: Option<jacquard_common::types::value::Data<'a>>,
    /// Additional configuration for the app.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub extra: Option<jacquard_common::types::value::Data<'a>>,
    /// The URL to the app icon.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub icon: Option<jacquard_common::CowStr<'a>>,
    /// ios-specific configuration for the app.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub ios: Option<crate::app_ocho::plugin::Ios<'a>>,
    /// Localization settings for the app.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub locales: Option<jacquard_common::types::value::Data<'a>>,
    /// The name of the Expo client application.
    #[serde(borrow)]
    #[builder(into)]
    pub name: jacquard_common::CowStr<'a>,
    /// Whether the new architecture is enabled for the app.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    pub new_arch_enabled: Option<bool>,
    /// The default orientation of the app.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub orientation: Option<jacquard_common::CowStr<'a>>,
    /// The platforms supported by the app.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub platforms: Option<Vec<jacquard_common::CowStr<'a>>>,
    /// A list of plugins used by the app.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub plugins: Option<jacquard_common::types::value::Data<'a>>,
    /// The custom URI scheme for deep linking.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub scheme: Option<jacquard_common::CowStr<'a>>,
    /// The SDK version of the Expo client.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub sdk_version: Option<jacquard_common::CowStr<'a>>,
    /// A URL-friendly identifier for the app.
    #[serde(borrow)]
    #[builder(into)]
    pub slug: jacquard_common::CowStr<'a>,
    /// The default user interface style.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub user_interface_style: Option<jacquard_common::CowStr<'a>>,
    /// The version of the app.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub version: Option<jacquard_common::CowStr<'a>>,
    /// Web-specific configuration for the app.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub web: Option<crate::app_ocho::plugin::Web<'a>>,
}

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic,
    bon::Builder
)]
#[serde(rename_all = "camelCase")]
pub struct ExpoGo<'a> {
    /// Developer-specific configuration for the Expo Go app.
    #[serde(borrow)]
    pub developer: crate::app_ocho::plugin::Developer<'a>,
}

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic,
    bon::Builder
)]
#[serde(rename_all = "camelCase")]
pub struct Ios<'a> {
    /// Whether the app supports iPad.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    pub supports_tablet: Option<bool>,
}

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic,
    bon::Builder
)]
#[serde(rename_all = "camelCase")]
pub struct LaunchAsset<'a> {
    /// The MIME type of the asset, e.g., 'image/png'.
    #[serde(borrow)]
    #[builder(into)]
    pub content_type: jacquard_common::CowStr<'a>,
    /// The unique key for this asset, used to reference it in the plugin.
    #[serde(borrow)]
    #[builder(into)]
    pub key: jacquard_common::CowStr<'a>,
    /// The URL where the asset can be accessed.
    #[serde(borrow)]
    pub url: jacquard_common::types::string::Uri<'a>,
}

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic,
    bon::Builder
)]
#[serde(rename_all = "camelCase")]
pub struct Manifest<'a> {
    /// The date and time when this plugin manifest was created.
    pub created_at: jacquard_common::types::string::Datetime,
    /// Additional metadata for the plugin, including Expo client and Go configurations.
    #[serde(borrow)]
    pub extra: crate::app_ocho::plugin::ManifestExtra<'a>,
    /// The unique identifier for this plugin manifest.
    #[serde(borrow)]
    #[builder(into)]
    pub id: jacquard_common::CowStr<'a>,
    /// The launch asset for the plugin (the main javascipt bundle).
    #[serde(borrow)]
    pub launch_asset: crate::app_ocho::plugin::LaunchAsset<'a>,
    #[serde(borrow)]
    pub metadata: jacquard_common::types::value::Data<'a>,
    /// The version of the Expo runtime this plugin is compatible with.
    #[serde(borrow)]
    #[builder(into)]
    pub runtime_version: jacquard_common::CowStr<'a>,
}

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic,
    bon::Builder
)]
#[serde(rename_all = "camelCase")]
pub struct ManifestExtra<'a> {
    #[serde(borrow)]
    pub expo_client: crate::app_ocho::plugin::ExpoClient<'a>,
    #[serde(borrow)]
    pub expo_go: crate::app_ocho::plugin::ExpoGo<'a>,
}

#[jacquard_derive::open_union]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(tag = "$type")]
#[serde(bound(deserialize = "'de: 'a"))]
pub enum PluginItem<'a> {
    #[serde(rename = "app.ocho.plugin.defs#stringId")]
    StringId(Box<crate::app_ocho::plugin::StringId<'a>>),
    #[serde(rename = "app.ocho.plugin.defs#pluginConfig")]
    PluginConfig(Box<crate::app_ocho::plugin::PluginConfig<'a>>),
}

pub type Plugin<'a> = Vec<PluginItem<'a>>;
pub type PluginConfig<'a> = jacquard_common::types::value::Data<'a>;
/// A string identifier for a plugin, used to reference it in the app.
pub type StringId<'a> = jacquard_common::CowStr<'a>;
#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic,
    bon::Builder
)]
#[serde(rename_all = "camelCase")]
pub struct Web<'a> {
    /// The bundler used for the web app.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub bundler: Option<jacquard_common::CowStr<'a>>,
    /// The URL to the favicon for the web app.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub favicon: Option<jacquard_common::CowStr<'a>>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub favicon_blob: Option<jacquard_common::types::blob::Blob<'a>>,
    /// The output directory for the web app.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub output: Option<jacquard_common::CowStr<'a>>,
}