// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: app.ocho.state.getConfig
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
pub struct GetConfigOutput<'a> {
    ///The token for the InstantDB account
    #[serde(borrow)]
    pub account_token: jacquard_common::CowStr<'a>,
    ///The InstantDB admin token
    #[serde(borrow)]
    pub admin_token: jacquard_common::CowStr<'a>,
    ///The App ID
    #[serde(borrow)]
    pub id: jacquard_common::CowStr<'a>,
}

#[jacquard_derive::open_union]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    thiserror::Error,
    miette::Diagnostic
)]
#[serde(tag = "error", content = "message")]
#[serde(bound(deserialize = "'de: 'a"))]
pub enum GetConfigError<'a> {
    #[serde(rename = "InvalidID")]
    InvalidId(std::option::Option<String>),
    #[serde(rename = "InvalidServiceAuth")]
    InvalidServiceAuth(std::option::Option<String>),
}

impl std::fmt::Display for GetConfigError<'_> {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Self::InvalidId(msg) => {
                write!(f, "InvalidID")?;
                if let Some(msg) = msg {
                    write!(f, ": {}", msg)?;
                }
                Ok(())
            }
            Self::InvalidServiceAuth(msg) => {
                write!(f, "InvalidServiceAuth")?;
                if let Some(msg) = msg {
                    write!(f, ": {}", msg)?;
                }
                Ok(())
            }
            Self::Unknown(err) => write!(f, "Unknown error: {:?}", err),
        }
    }
}

impl jacquard_common::IntoStatic for GetConfigError<'_> {
    type Output = GetConfigError<'static>;
    fn into_static(self) -> Self::Output {
        match self {
            GetConfigError::InvalidId(v) => GetConfigError::InvalidId(v.into_static()),
            GetConfigError::InvalidServiceAuth(v) => {
                GetConfigError::InvalidServiceAuth(v.into_static())
            }
            GetConfigError::Unknown(v) => GetConfigError::Unknown(v.into_static()),
        }
    }
}

/// XRPC request marker type
#[derive(
    Debug,
    Clone,
    Copy,
    PartialEq,
    Eq,
    serde::Serialize,
    serde::Deserialize,
    jacquard_derive::IntoStatic
)]
pub struct GetConfig;
///Response type for
///app.ocho.state.getConfig
pub struct GetConfigResponse;
impl jacquard_common::xrpc::XrpcResp for GetConfigResponse {
    const NSID: &'static str = "app.ocho.state.getConfig";
    const ENCODING: &'static str = "application/json";
    type Output<'de> = GetConfigOutput<'de>;
    type Err<'de> = GetConfigError<'de>;
}

impl<'de> jacquard_common::xrpc::XrpcRequest<'de> for GetConfig {
    const NSID: &'static str = "app.ocho.state.getConfig";
    const METHOD: jacquard_common::xrpc::XrpcMethod = jacquard_common::xrpc::XrpcMethod::Query;
    type Response = GetConfigResponse;
}

///Endpoint type for
///app.ocho.state.getConfig
pub struct GetConfigRequest;
impl jacquard_common::xrpc::XrpcEndpoint for GetConfigRequest {
    const PATH: &'static str = "/xrpc/app.ocho.state.getConfig";
    const METHOD: jacquard_common::xrpc::XrpcMethod = jacquard_common::xrpc::XrpcMethod::Query;
    type Request<'de> = GetConfig;
    type Response = GetConfigResponse;
}