// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: fm.teal.alpha.feed.defs
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

pub mod get_actor_feed;
pub mod get_play;
pub mod play;

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic,
    Default
)]
#[serde(rename_all = "camelCase")]
pub struct Artist<'a> {
    /// The Musicbrainz ID of the artist
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub artist_mb_id: std::option::Option<jacquard_common::CowStr<'a>>,
    /// The name of the artist
    #[serde(borrow)]
    pub artist_name: jacquard_common::CowStr<'a>,
}

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic,
    bon::Builder
)]
#[serde(rename_all = "camelCase")]
pub struct PlayView<'a> {
    /// Array of artists in order of original appearance.
    #[serde(borrow)]
    pub artists: Vec<crate::fm_teal::alpha::feed::Artist<'a>>,
    /// The length of the track in seconds
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    pub duration: Option<i64>,
    /// The ISRC code associated with the recording
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub isrc: Option<jacquard_common::CowStr<'a>>,
    /// The base domain of the music service. e.g. music.apple.com, tidal.com, spotify.com. Defaults to 'local' if not provided.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub music_service_base_domain: Option<jacquard_common::CowStr<'a>>,
    /// The URL associated with this track
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub origin_url: Option<jacquard_common::CowStr<'a>>,
    /// The unix timestamp of when the track was played
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    pub played_time: Option<jacquard_common::types::string::Datetime>,
    /// The Musicbrainz recording ID of the track
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub recording_mb_id: Option<jacquard_common::CowStr<'a>>,
    /// The Musicbrainz release ID
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub release_mb_id: Option<jacquard_common::CowStr<'a>>,
    /// The name of the release/album
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub release_name: Option<jacquard_common::CowStr<'a>>,
    /// A user-agent style string specifying the user agent. e.g. tealtracker/0.0.1b (Linux; Android 13; SM-A715F). Defaults to 'manual/unknown' if not provided.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub submission_client_agent: Option<jacquard_common::CowStr<'a>>,
    /// The Musicbrainz ID of the track
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub track_mb_id: Option<jacquard_common::CowStr<'a>>,
    /// The name of the track
    #[serde(borrow)]
    #[builder(into)]
    pub track_name: jacquard_common::CowStr<'a>,
}