// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: fm.teal.alpha.stats.defs
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

pub mod get_latest;
pub mod get_top_artists;
pub mod get_top_releases;
pub mod get_user_top_artists;
pub mod get_user_top_releases;

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic,
    bon::Builder
)]
#[serde(rename_all = "camelCase")]
pub struct ArtistView<'a> {
    /// MusicBrainz artist ID
    #[serde(borrow)]
    #[builder(into)]
    pub mbid: jacquard_common::CowStr<'a>,
    /// Artist name
    #[serde(borrow)]
    #[builder(into)]
    pub name: jacquard_common::CowStr<'a>,
    /// Total number of plays for this artist
    pub play_count: i64,
}

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic,
    bon::Builder
)]
#[serde(rename_all = "camelCase")]
pub struct RecordingView<'a> {
    /// MusicBrainz recording ID
    #[serde(borrow)]
    #[builder(into)]
    pub mbid: jacquard_common::CowStr<'a>,
    /// Recording/track name
    #[serde(borrow)]
    #[builder(into)]
    pub name: jacquard_common::CowStr<'a>,
    /// Total number of plays for this recording
    pub play_count: i64,
}

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic,
    bon::Builder
)]
#[serde(rename_all = "camelCase")]
pub struct ReleaseView<'a> {
    /// MusicBrainz release ID
    #[serde(borrow)]
    #[builder(into)]
    pub mbid: jacquard_common::CowStr<'a>,
    /// Release/album name
    #[serde(borrow)]
    #[builder(into)]
    pub name: jacquard_common::CowStr<'a>,
    /// Total number of plays for this release
    pub play_count: i64,
}