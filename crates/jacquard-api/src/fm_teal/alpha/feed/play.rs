// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: fm.teal.alpha.feed.play
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic,
    bon::Builder
)]
#[serde(rename_all = "camelCase")]
pub struct Play<'a> {
    /// Array of Musicbrainz artist IDs. Prefer using 'artists'.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub artist_mb_ids: Option<Vec<jacquard_common::CowStr<'a>>>,
    /// Array of artist names in order of original appearance. Prefer using 'artists'.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub artist_names: Option<Vec<jacquard_common::CowStr<'a>>>,
    /// Array of artists in order of original appearance.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub artists: Option<Vec<crate::fm_teal::alpha::feed::Artist<'a>>>,
    /// The length of the track in seconds
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    pub duration: Option<i64>,
    /// The ISRC code associated with the recording
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub isrc: Option<jacquard_common::CowStr<'a>>,
    /// The base domain of the music service. e.g. music.apple.com, tidal.com, spotify.com. Defaults to 'local' if unavailable or not provided.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub music_service_base_domain: Option<jacquard_common::CowStr<'a>>,
    /// The URL associated with this track
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub origin_url: Option<jacquard_common::CowStr<'a>>,
    /// The unix timestamp of when the track was played
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    pub played_time: Option<jacquard_common::types::string::Datetime>,
    /// The Musicbrainz recording ID of the track
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub recording_mb_id: Option<jacquard_common::CowStr<'a>>,
    /// Distinguishing information for release variants (e.g. 'Deluxe Edition', 'Remastered', '2023 Remaster', 'Special Edition'). Used to differentiate between different versions of the same base release while maintaining grouping capabilities.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub release_discriminant: Option<jacquard_common::CowStr<'a>>,
    /// The Musicbrainz release ID
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub release_mb_id: Option<jacquard_common::CowStr<'a>>,
    /// The name of the release/album
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub release_name: Option<jacquard_common::CowStr<'a>>,
    /// A metadata string specifying the user agent where the format is `<app-identifier>/<version> (<kernel/OS-base>; <platform/OS-version>; <device-model>)`. If string is provided, only `app-identifier` and `version` are required. `app-identifier` is recommended to be in reverse dns format. Defaults to 'manual/unknown' if unavailable or not provided.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub submission_client_agent: Option<jacquard_common::CowStr<'a>>,
    /// Distinguishing information for track variants (e.g. 'Acoustic Version', 'Live at Wembley', 'Radio Edit', 'Demo'). Used to differentiate between different versions of the same base track while maintaining grouping capabilities.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub track_discriminant: Option<jacquard_common::CowStr<'a>>,
    /// The Musicbrainz ID of the track
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub track_mb_id: Option<jacquard_common::CowStr<'a>>,
    /// The name of the track
    #[serde(borrow)]
    #[builder(into)]
    pub track_name: jacquard_common::CowStr<'a>,
}

impl<'a> Play<'a> {
    pub fn uri(
        uri: impl Into<jacquard_common::CowStr<'a>>,
    ) -> Result<
        jacquard_common::types::uri::RecordUri<'a, PlayRecord>,
        jacquard_common::types::uri::UriError,
    > {
        jacquard_common::types::uri::RecordUri::try_from_uri(
            jacquard_common::types::string::AtUri::new_cow(uri.into())?,
        )
    }
}

/// Typed wrapper for GetRecord response with this collection's record type.
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
pub struct PlayGetRecordOutput<'a> {
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub cid: std::option::Option<jacquard_common::types::string::Cid<'a>>,
    #[serde(borrow)]
    pub uri: jacquard_common::types::string::AtUri<'a>,
    #[serde(borrow)]
    pub value: Play<'a>,
}

impl From<PlayGetRecordOutput<'_>> for Play<'_> {
    fn from(output: PlayGetRecordOutput<'_>) -> Self {
        use jacquard_common::IntoStatic;
        output.value.into_static()
    }
}

impl jacquard_common::types::collection::Collection for Play<'_> {
    const NSID: &'static str = "fm.teal.alpha.feed.play";
    type Record = PlayRecord;
}

/// Marker type for deserializing records from this collection.
#[derive(Debug, serde::Serialize, serde::Deserialize)]
pub struct PlayRecord;
impl jacquard_common::xrpc::XrpcResp for PlayRecord {
    const NSID: &'static str = "fm.teal.alpha.feed.play";
    const ENCODING: &'static str = "application/json";
    type Output<'de> = PlayGetRecordOutput<'de>;
    type Err<'de> = jacquard_common::types::collection::RecordError<'de>;
}

impl jacquard_common::types::collection::Collection for PlayRecord {
    const NSID: &'static str = "fm.teal.alpha.feed.play";
    type Record = PlayRecord;
}