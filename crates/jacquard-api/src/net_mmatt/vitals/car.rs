// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: net.mmatt.vitals.car
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
pub struct Car<'a> {
    ///The car fuel amount remaining value (floating point string)
    #[serde(borrow)]
    pub amount_remaining: jacquard_common::CowStr<'a>,
    ///The car fuel range value in miles
    pub car_fuel_range: i64,
    ///The car make value
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub car_make: std::option::Option<jacquard_common::CowStr<'a>>,
    ///The car model value
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub car_model: std::option::Option<jacquard_common::CowStr<'a>>,
    ///The car fuel level value in percentage (floating point string)
    #[serde(borrow)]
    pub car_percent_fuel_remaining: jacquard_common::CowStr<'a>,
    ///The car traveled distance value
    pub car_traveled_distance: i64,
    ///The car year value
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub car_year: std::option::Option<i64>,
    ///The unix timestamp of when the vital was recorded
    pub created_at: jacquard_common::types::string::Datetime,
}

/// Typed wrapper for GetRecord response with this collection's record type.
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
pub struct CarGetRecordOutput<'a> {
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub cid: std::option::Option<jacquard_common::types::string::Cid<'a>>,
    #[serde(borrow)]
    pub uri: jacquard_common::types::string::AtUri<'a>,
    #[serde(borrow)]
    pub value: Car<'a>,
}

/// Marker type for deserializing records from this collection.
pub struct CarRecord;
impl jacquard_common::xrpc::XrpcResp for CarRecord {
    const NSID: &'static str = "net.mmatt.vitals.car";
    const ENCODING: &'static str = "application/json";
    type Output<'de> = CarGetRecordOutput<'de>;
    type Err<'de> = jacquard_common::types::collection::RecordError<'de>;
}

impl jacquard_common::types::collection::Collection for Car<'_> {
    const NSID: &'static str = "net.mmatt.vitals.car";
    type Record = CarRecord;
}

impl From<CarGetRecordOutput<'_>> for Car<'static> {
    fn from(output: CarGetRecordOutput<'_>) -> Self {
        use jacquard_common::IntoStatic;
        output.value.into_static()
    }
}