// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: tools.ozone.verification.grantVerifications
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

///Error object for failed verifications.
#[jacquard_derive::lexicon]
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct GrantError<'a> {
    ///Error message describing the reason for failure.
    #[serde(borrow)]
    pub error: jacquard_common::CowStr<'a>,
    ///The did of the subject being verified
    #[serde(borrow)]
    pub subject: jacquard_common::types::string::Did<'a>,
}

#[jacquard_derive::lexicon]
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct GrantVerifications<'a> {
    ///Array of verification requests to process
    #[serde(borrow)]
    pub verifications: Vec<jacquard_common::types::value::Data<'a>>,
}

#[jacquard_derive::lexicon]
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct GrantVerificationsOutput<'a> {
    #[serde(borrow)]
    pub failed_verifications: Vec<jacquard_common::types::value::Data<'a>>,
    #[serde(borrow)]
    pub verifications: Vec<crate::tools_ozone::verification::VerificationView<'a>>,
}

impl jacquard_common::types::xrpc::XrpcRequest for GrantVerifications<'_> {
    const NSID: &'static str = "tools.ozone.verification.grantVerifications";
    const METHOD: jacquard_common::types::xrpc::XrpcMethod = jacquard_common::types::xrpc::XrpcMethod::Procedure(
        "application/json",
    );
    const OUTPUT_ENCODING: &'static str = "application/json";
    type Output<'de> = GrantVerificationsOutput<'de>;
    type Err<'de> = jacquard_common::types::xrpc::GenericError;
}

#[jacquard_derive::lexicon]
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct VerificationInput<'a> {
    ///Timestamp for verification record. Defaults to current time when not specified.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub created_at: std::option::Option<jacquard_common::types::string::Datetime>,
    ///Display name of the subject the verification applies to at the moment of verifying.
    #[serde(borrow)]
    pub display_name: jacquard_common::CowStr<'a>,
    ///Handle of the subject the verification applies to at the moment of verifying.
    #[serde(borrow)]
    pub handle: jacquard_common::types::string::Handle<'a>,
    ///The did of the subject being verified
    #[serde(borrow)]
    pub subject: jacquard_common::types::string::Did<'a>,
}