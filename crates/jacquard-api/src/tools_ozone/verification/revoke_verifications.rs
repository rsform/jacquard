// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: tools.ozone.verification.revokeVerifications
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    bon::Builder
)]
#[serde(rename_all = "camelCase")]
#[builder(start_fn = new)]
pub struct RevokeVerifications<'a> {
    ///Reason for revoking the verification. This is optional and can be omitted if not needed.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    #[builder(into)]
    pub revoke_reason: std::option::Option<jacquard_common::CowStr<'a>>,
    ///Array of verification record uris to revoke
    #[serde(borrow)]
    pub uris: Vec<jacquard_common::types::string::AtUri<'a>>,
    #[serde(flatten)]
    #[serde(borrow)]
    #[builder(default)]
    pub extra_data: ::std::collections::BTreeMap<
        ::jacquard_common::smol_str::SmolStr,
        ::jacquard_common::types::value::Data<'a>,
    >,
}

impl jacquard_common::IntoStatic for RevokeVerifications<'_> {
    type Output = RevokeVerifications<'static>;
    fn into_static(self) -> Self::Output {
        RevokeVerifications {
            revoke_reason: self.revoke_reason.into_static(),
            uris: self.uris.into_static(),
            extra_data: self.extra_data.into_static(),
        }
    }
}

#[jacquard_derive::lexicon]
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct RevokeVerificationsOutput<'a> {
    ///List of verification uris that couldn't be revoked, including failure reasons
    #[serde(borrow)]
    pub failed_revocations: Vec<jacquard_common::types::value::Data<'a>>,
    ///List of verification uris successfully revoked
    #[serde(borrow)]
    pub revoked_verifications: Vec<jacquard_common::types::string::AtUri<'a>>,
}

impl jacquard_common::IntoStatic for RevokeVerificationsOutput<'_> {
    type Output = RevokeVerificationsOutput<'static>;
    fn into_static(self) -> Self::Output {
        RevokeVerificationsOutput {
            failed_revocations: self.failed_revocations.into_static(),
            revoked_verifications: self.revoked_verifications.into_static(),
            extra_data: self.extra_data.into_static(),
        }
    }
}

///Response type for
///tools.ozone.verification.revokeVerifications
pub struct RevokeVerificationsResponse;
impl jacquard_common::xrpc::XrpcResp for RevokeVerificationsResponse {
    const NSID: &'static str = "tools.ozone.verification.revokeVerifications";
    const ENCODING: &'static str = "application/json";
    type Output<'de> = RevokeVerificationsOutput<'de>;
    type Err<'de> = jacquard_common::xrpc::GenericError<'de>;
}

impl<'de> jacquard_common::xrpc::XrpcRequest<'de> for RevokeVerifications<'de> {
    const NSID: &'static str = "tools.ozone.verification.revokeVerifications";
    const METHOD: jacquard_common::xrpc::XrpcMethod = jacquard_common::xrpc::XrpcMethod::Procedure(
        "application/json",
    );
    type Response = RevokeVerificationsResponse;
}

///Error object for failed revocations
#[jacquard_derive::lexicon]
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct RevokeError<'a> {
    ///Description of the error that occurred during revocation.
    #[serde(borrow)]
    pub error: jacquard_common::CowStr<'a>,
    ///The AT-URI of the verification record that failed to revoke.
    #[serde(borrow)]
    pub uri: jacquard_common::types::string::AtUri<'a>,
}

impl jacquard_common::IntoStatic for RevokeError<'_> {
    type Output = RevokeError<'static>;
    fn into_static(self) -> Self::Output {
        RevokeError {
            error: self.error.into_static(),
            uri: self.uri.into_static(),
            extra_data: self.extra_data.into_static(),
        }
    }
}