// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: tools.ozone.setting.upsertOption
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    bon::Builder
)]
#[serde(rename_all = "camelCase")]
#[builder(start_fn = new)]
pub struct UpsertOption<'a> {
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    #[builder(into)]
    pub description: std::option::Option<jacquard_common::CowStr<'a>>,
    #[serde(borrow)]
    pub key: jacquard_common::types::string::Nsid<'a>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    #[builder(into)]
    pub manager_role: std::option::Option<jacquard_common::CowStr<'a>>,
    #[serde(borrow)]
    #[builder(into)]
    pub scope: jacquard_common::CowStr<'a>,
    #[serde(borrow)]
    pub value: jacquard_common::types::value::Data<'a>,
    #[serde(flatten)]
    #[serde(borrow)]
    #[builder(default)]
    pub extra_data: ::std::collections::BTreeMap<
        ::jacquard_common::smol_str::SmolStr,
        ::jacquard_common::types::value::Data<'a>,
    >,
}

impl jacquard_common::IntoStatic for UpsertOption<'_> {
    type Output = UpsertOption<'static>;
    fn into_static(self) -> Self::Output {
        UpsertOption {
            description: self.description.into_static(),
            key: self.key.into_static(),
            manager_role: self.manager_role.into_static(),
            scope: self.scope.into_static(),
            value: self.value.into_static(),
            extra_data: self.extra_data.into_static(),
        }
    }
}

#[jacquard_derive::lexicon]
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct UpsertOptionOutput<'a> {
    #[serde(borrow)]
    pub option: crate::tools_ozone::setting::Option<'a>,
}

impl jacquard_common::IntoStatic for UpsertOptionOutput<'_> {
    type Output = UpsertOptionOutput<'static>;
    fn into_static(self) -> Self::Output {
        UpsertOptionOutput {
            option: self.option.into_static(),
            extra_data: self.extra_data.into_static(),
        }
    }
}

impl jacquard_common::types::xrpc::XrpcRequest for UpsertOption<'_> {
    const NSID: &'static str = "tools.ozone.setting.upsertOption";
    const METHOD: jacquard_common::types::xrpc::XrpcMethod = jacquard_common::types::xrpc::XrpcMethod::Procedure(
        "application/json",
    );
    const OUTPUT_ENCODING: &'static str = "application/json";
    type Output<'de> = UpsertOptionOutput<'de>;
    type Err<'de> = jacquard_common::types::xrpc::GenericError<'de>;
}