// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: tools.ozone.moderation.cancelScheduledActions
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
pub struct CancellationResults<'a> {
    ///DIDs for which cancellation failed with error details
    #[serde(borrow)]
    pub failed: Vec<
        crate::tools_ozone::moderation::cancel_scheduled_actions::FailedCancellation<'a>,
    >,
    ///DIDs for which all pending scheduled actions were successfully cancelled
    #[serde(borrow)]
    pub succeeded: Vec<jacquard_common::types::string::Did<'a>>,
}

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
pub struct FailedCancellation<'a> {
    #[serde(borrow)]
    pub did: jacquard_common::types::string::Did<'a>,
    #[serde(borrow)]
    pub error: jacquard_common::CowStr<'a>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub error_code: std::option::Option<jacquard_common::CowStr<'a>>,
}

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    bon::Builder,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
#[builder(start_fn = new)]
pub struct CancelScheduledActions<'a> {
    ///Optional comment describing the reason for cancellation
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    #[builder(into)]
    pub comment: std::option::Option<jacquard_common::CowStr<'a>>,
    ///Array of DID subjects to cancel scheduled actions for
    #[serde(borrow)]
    pub subjects: Vec<jacquard_common::types::string::Did<'a>>,
    #[serde(flatten)]
    #[serde(borrow)]
    #[builder(default)]
    pub extra_data: ::std::collections::BTreeMap<
        ::jacquard_common::smol_str::SmolStr,
        ::jacquard_common::types::value::Data<'a>,
    >,
}

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
pub struct CancelScheduledActionsOutput<'a> {
    #[serde(flatten)]
    #[serde(borrow)]
    pub value: jacquard_common::types::value::Data<'a>,
}

///Response type for
///tools.ozone.moderation.cancelScheduledActions
pub struct CancelScheduledActionsResponse;
impl jacquard_common::xrpc::XrpcResp for CancelScheduledActionsResponse {
    const NSID: &'static str = "tools.ozone.moderation.cancelScheduledActions";
    const ENCODING: &'static str = "application/json";
    type Output<'de> = CancelScheduledActionsOutput<'de>;
    type Err<'de> = jacquard_common::xrpc::GenericError<'de>;
}

impl<'de> jacquard_common::xrpc::XrpcRequest<'de> for CancelScheduledActions<'de> {
    const NSID: &'static str = "tools.ozone.moderation.cancelScheduledActions";
    const METHOD: jacquard_common::xrpc::XrpcMethod = jacquard_common::xrpc::XrpcMethod::Procedure(
        "application/json",
    );
    type Response = CancelScheduledActionsResponse;
}