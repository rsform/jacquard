// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: tools.ozone.moderation.getRepos
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    bon::Builder,
    jacquard_derive::IntoStatic
)]
#[builder(start_fn = new)]
#[serde(rename_all = "camelCase")]
pub struct GetRepos<'a> {
    #[serde(borrow)]
    pub dids: Vec<jacquard_common::types::string::Did<'a>>,
}

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
pub struct GetReposOutput<'a> {
    #[serde(borrow)]
    pub repos: Vec<GetReposOutputReposItem<'a>>,
}

#[jacquard_derive::open_union]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(tag = "$type")]
#[serde(bound(deserialize = "'de: 'a"))]
pub enum GetReposOutputReposItem<'a> {
    #[serde(rename = "tools.ozone.moderation.defs#repoViewDetail")]
    RepoViewDetail(Box<crate::tools_ozone::moderation::RepoViewDetail<'a>>),
    #[serde(rename = "tools.ozone.moderation.defs#repoViewNotFound")]
    RepoViewNotFound(Box<crate::tools_ozone::moderation::RepoViewNotFound<'a>>),
}

///Response type for
///tools.ozone.moderation.getRepos
pub struct GetReposResponse;
impl jacquard_common::xrpc::XrpcResp for GetReposResponse {
    const NSID: &'static str = "tools.ozone.moderation.getRepos";
    const ENCODING: &'static str = "application/json";
    type Output<'de> = GetReposOutput<'de>;
    type Err<'de> = jacquard_common::xrpc::GenericError<'de>;
}

impl<'a> jacquard_common::xrpc::XrpcRequest for GetRepos<'a> {
    const NSID: &'static str = "tools.ozone.moderation.getRepos";
    const METHOD: jacquard_common::xrpc::XrpcMethod = jacquard_common::xrpc::XrpcMethod::Query;
    type Response = GetReposResponse;
}

///Endpoint type for
///tools.ozone.moderation.getRepos
pub struct GetReposRequest;
impl jacquard_common::xrpc::XrpcEndpoint for GetReposRequest {
    const PATH: &'static str = "/xrpc/tools.ozone.moderation.getRepos";
    const METHOD: jacquard_common::xrpc::XrpcMethod = jacquard_common::xrpc::XrpcMethod::Query;
    type Request<'de> = GetRepos<'de>;
    type Response = GetReposResponse;
}