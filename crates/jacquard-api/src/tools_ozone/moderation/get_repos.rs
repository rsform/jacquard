// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: tools.ozone.moderation.getRepos
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq, bon::Builder)]
#[builder(start_fn = new)]
#[serde(rename_all = "camelCase")]
pub struct GetRepos<'a> {
    #[serde(borrow)]
    pub dids: Vec<jacquard_common::types::string::Did<'a>>,
}

impl jacquard_common::IntoStatic for GetRepos<'_> {
    type Output = GetRepos<'static>;
    fn into_static(self) -> Self::Output {
        GetRepos {
            dids: self.dids.into_static(),
        }
    }
}

#[jacquard_derive::lexicon]
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct GetReposOutput<'a> {
    #[serde(borrow)]
    pub repos: Vec<jacquard_common::types::value::Data<'a>>,
}

impl jacquard_common::IntoStatic for GetReposOutput<'_> {
    type Output = GetReposOutput<'static>;
    fn into_static(self) -> Self::Output {
        GetReposOutput {
            repos: self.repos.into_static(),
            extra_data: self.extra_data.into_static(),
        }
    }
}

///Response type for
///tools.ozone.moderation.getRepos
pub struct GetReposResponse;
impl<'de> jacquard_common::types::xrpc::XrpcResp<'de> for GetReposResponse {
    const ENCODING: &'static str = "application/json";
    type Output = GetReposOutput<'de>;
    type Err = jacquard_common::types::xrpc::GenericError<'de>;
}

impl<'de> jacquard_common::types::xrpc::XrpcRequest<'de> for GetRepos<'de> {
    const NSID: &'static str = "tools.ozone.moderation.getRepos";
    const METHOD: jacquard_common::types::xrpc::XrpcMethod =
        jacquard_common::types::xrpc::XrpcMethod::Query;
    type Response<'de1> = GetReposResponse;
}
