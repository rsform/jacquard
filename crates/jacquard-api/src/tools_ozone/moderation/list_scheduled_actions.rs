// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: tools.ozone.moderation.listScheduledActions
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    bon::Builder,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
#[builder(start_fn = new)]
pub struct ListScheduledActions<'a> {
    ///Cursor for pagination
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    #[builder(into)]
    pub cursor: std::option::Option<jacquard_common::CowStr<'a>>,
    ///Filter actions scheduled to execute before this time
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub ends_before: std::option::Option<jacquard_common::types::string::Datetime>,
    ///Maximum number of results to return
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub limit: std::option::Option<i64>,
    ///Filter actions scheduled to execute after this time
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub starts_after: std::option::Option<jacquard_common::types::string::Datetime>,
    ///Filter actions by status
    #[serde(borrow)]
    pub statuses: Vec<jacquard_common::CowStr<'a>>,
    ///Filter actions for specific DID subjects
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub subjects: std::option::Option<Vec<jacquard_common::types::string::Did<'a>>>,
    #[serde(flatten)]
    #[serde(borrow)]
    #[builder(default)]
    pub extra_data: ::std::collections::BTreeMap<
        ::jacquard_common::smol_str::SmolStr,
        ::jacquard_common::types::value::Data<'a>,
    >,
}

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
pub struct ListScheduledActionsOutput<'a> {
    #[serde(borrow)]
    pub actions: Vec<crate::tools_ozone::moderation::ScheduledActionView<'a>>,
    ///Cursor for next page of results
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub cursor: std::option::Option<jacquard_common::CowStr<'a>>,
}

///Response type for
///tools.ozone.moderation.listScheduledActions
pub struct ListScheduledActionsResponse;
impl jacquard_common::xrpc::XrpcResp for ListScheduledActionsResponse {
    const NSID: &'static str = "tools.ozone.moderation.listScheduledActions";
    const ENCODING: &'static str = "application/json";
    type Output<'de> = ListScheduledActionsOutput<'de>;
    type Err<'de> = jacquard_common::xrpc::GenericError<'de>;
}

impl<'de> jacquard_common::xrpc::XrpcRequest<'de> for ListScheduledActions<'de> {
    const NSID: &'static str = "tools.ozone.moderation.listScheduledActions";
    const METHOD: jacquard_common::xrpc::XrpcMethod = jacquard_common::xrpc::XrpcMethod::Procedure(
        "application/json",
    );
    type Response = ListScheduledActionsResponse;
}