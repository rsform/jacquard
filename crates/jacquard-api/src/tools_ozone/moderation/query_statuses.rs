// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: tools.ozone.moderation.queryStatuses
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq, Default)]
#[serde(rename_all = "camelCase")]
pub struct QueryStatuses<'a> {
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub age_assurance_state: std::option::Option<jacquard_common::CowStr<'a>>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub appealed: std::option::Option<bool>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub collections: std::option::Option<Vec<jacquard_common::types::string::Nsid<'a>>>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub comment: std::option::Option<jacquard_common::CowStr<'a>>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub cursor: std::option::Option<jacquard_common::CowStr<'a>>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub exclude_tags: std::option::Option<Vec<jacquard_common::CowStr<'a>>>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub hosting_deleted_after: std::option::Option<
        jacquard_common::types::string::Datetime,
    >,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub hosting_deleted_before: std::option::Option<
        jacquard_common::types::string::Datetime,
    >,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub hosting_statuses: std::option::Option<Vec<jacquard_common::CowStr<'a>>>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub hosting_updated_after: std::option::Option<
        jacquard_common::types::string::Datetime,
    >,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub hosting_updated_before: std::option::Option<
        jacquard_common::types::string::Datetime,
    >,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub ignore_subjects: std::option::Option<
        Vec<jacquard_common::types::string::Uri<'a>>,
    >,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub include_all_user_records: std::option::Option<bool>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub include_muted: std::option::Option<bool>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub last_reviewed_by: std::option::Option<jacquard_common::types::string::Did<'a>>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub limit: std::option::Option<i64>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub min_account_suspend_count: std::option::Option<i64>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub min_priority_score: std::option::Option<i64>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub min_reported_records_count: std::option::Option<i64>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub min_takendown_records_count: std::option::Option<i64>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub only_muted: std::option::Option<bool>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub queue_count: std::option::Option<i64>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub queue_index: std::option::Option<i64>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub queue_seed: std::option::Option<jacquard_common::CowStr<'a>>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub reported_after: std::option::Option<jacquard_common::types::string::Datetime>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub reported_before: std::option::Option<jacquard_common::types::string::Datetime>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub review_state: std::option::Option<jacquard_common::CowStr<'a>>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub reviewed_after: std::option::Option<jacquard_common::types::string::Datetime>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub reviewed_before: std::option::Option<jacquard_common::types::string::Datetime>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub sort_direction: std::option::Option<jacquard_common::CowStr<'a>>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub sort_field: std::option::Option<jacquard_common::CowStr<'a>>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub subject: std::option::Option<jacquard_common::types::string::Uri<'a>>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub subject_type: std::option::Option<jacquard_common::CowStr<'a>>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub tags: std::option::Option<Vec<jacquard_common::CowStr<'a>>>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub takendown: std::option::Option<bool>,
}

impl Default for QueryStatuses<'_> {
    fn default() -> Self {
        Self {
            age_assurance_state: Default::default(),
            appealed: Default::default(),
            collections: Default::default(),
            comment: Default::default(),
            cursor: Default::default(),
            exclude_tags: Default::default(),
            hosting_deleted_after: Default::default(),
            hosting_deleted_before: Default::default(),
            hosting_statuses: Default::default(),
            hosting_updated_after: Default::default(),
            hosting_updated_before: Default::default(),
            ignore_subjects: Default::default(),
            include_all_user_records: Default::default(),
            include_muted: Default::default(),
            last_reviewed_by: Default::default(),
            limit: Some(50i64),
            min_account_suspend_count: Default::default(),
            min_priority_score: Default::default(),
            min_reported_records_count: Default::default(),
            min_takendown_records_count: Default::default(),
            only_muted: Default::default(),
            queue_count: Default::default(),
            queue_index: Default::default(),
            queue_seed: Default::default(),
            reported_after: Default::default(),
            reported_before: Default::default(),
            review_state: Default::default(),
            reviewed_after: Default::default(),
            reviewed_before: Default::default(),
            sort_direction: Some(jacquard_common::CowStr::from("desc")),
            sort_field: Some(jacquard_common::CowStr::from("lastReportedAt")),
            subject: Default::default(),
            subject_type: Default::default(),
            tags: Default::default(),
            takendown: Default::default(),
        }
    }
}

#[jacquard_derive::lexicon]
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct QueryStatusesOutput<'a> {
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub cursor: std::option::Option<jacquard_common::CowStr<'a>>,
    #[serde(borrow)]
    pub subject_statuses: Vec<crate::tools_ozone::moderation::SubjectStatusView<'a>>,
}

impl jacquard_common::types::xrpc::XrpcRequest for QueryStatuses<'_> {
    const NSID: &'static str = "tools.ozone.moderation.queryStatuses";
    const METHOD: jacquard_common::types::xrpc::XrpcMethod = jacquard_common::types::xrpc::XrpcMethod::Query;
    const OUTPUT_ENCODING: &'static str = "application/json";
    type Output<'de> = QueryStatusesOutput<'de>;
    type Err<'de> = jacquard_common::types::xrpc::GenericError;
}