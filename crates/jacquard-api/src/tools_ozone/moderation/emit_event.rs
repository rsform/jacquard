// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: tools.ozone.moderation.emitEvent
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    bon::Builder
)]
#[serde(rename_all = "camelCase")]
#[builder(start_fn = new)]
pub struct EmitEvent<'a> {
    #[serde(borrow)]
    pub created_by: jacquard_common::types::string::Did<'a>,
    #[serde(borrow)]
    pub event: EmitEventRecordEvent<'a>,
    ///An optional external ID for the event, used to deduplicate events from external systems. Fails when an event of same type with the same external ID exists for the same subject.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    #[builder(into)]
    pub external_id: std::option::Option<jacquard_common::CowStr<'a>>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub mod_tool: std::option::Option<crate::tools_ozone::moderation::ModTool<'a>>,
    #[serde(borrow)]
    pub subject: EmitEventRecordSubject<'a>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub subject_blob_cids: std::option::Option<
        Vec<jacquard_common::types::string::Cid<'a>>,
    >,
    #[serde(flatten)]
    #[serde(borrow)]
    #[builder(default)]
    pub extra_data: ::std::collections::BTreeMap<
        ::jacquard_common::smol_str::SmolStr,
        ::jacquard_common::types::value::Data<'a>,
    >,
}

#[jacquard_derive::open_union]
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(tag = "$type")]
#[serde(bound(deserialize = "'de: 'a"))]
pub enum EmitEventRecordEvent<'a> {
    #[serde(rename = "tools.ozone.moderation.defs#modEventTakedown")]
    DefsModEventTakedown(Box<crate::tools_ozone::moderation::ModEventTakedown<'a>>),
    #[serde(rename = "tools.ozone.moderation.defs#modEventAcknowledge")]
    DefsModEventAcknowledge(
        Box<crate::tools_ozone::moderation::ModEventAcknowledge<'a>>,
    ),
    #[serde(rename = "tools.ozone.moderation.defs#modEventEscalate")]
    DefsModEventEscalate(Box<crate::tools_ozone::moderation::ModEventEscalate<'a>>),
    #[serde(rename = "tools.ozone.moderation.defs#modEventComment")]
    DefsModEventComment(Box<crate::tools_ozone::moderation::ModEventComment<'a>>),
    #[serde(rename = "tools.ozone.moderation.defs#modEventLabel")]
    DefsModEventLabel(Box<crate::tools_ozone::moderation::ModEventLabel<'a>>),
    #[serde(rename = "tools.ozone.moderation.defs#modEventReport")]
    DefsModEventReport(Box<crate::tools_ozone::moderation::ModEventReport<'a>>),
    #[serde(rename = "tools.ozone.moderation.defs#modEventMute")]
    DefsModEventMute(Box<crate::tools_ozone::moderation::ModEventMute<'a>>),
    #[serde(rename = "tools.ozone.moderation.defs#modEventUnmute")]
    DefsModEventUnmute(Box<crate::tools_ozone::moderation::ModEventUnmute<'a>>),
    #[serde(rename = "tools.ozone.moderation.defs#modEventMuteReporter")]
    DefsModEventMuteReporter(
        Box<crate::tools_ozone::moderation::ModEventMuteReporter<'a>>,
    ),
    #[serde(rename = "tools.ozone.moderation.defs#modEventUnmuteReporter")]
    DefsModEventUnmuteReporter(
        Box<crate::tools_ozone::moderation::ModEventUnmuteReporter<'a>>,
    ),
    #[serde(rename = "tools.ozone.moderation.defs#modEventReverseTakedown")]
    DefsModEventReverseTakedown(
        Box<crate::tools_ozone::moderation::ModEventReverseTakedown<'a>>,
    ),
    #[serde(rename = "tools.ozone.moderation.defs#modEventResolveAppeal")]
    DefsModEventResolveAppeal(
        Box<crate::tools_ozone::moderation::ModEventResolveAppeal<'a>>,
    ),
    #[serde(rename = "tools.ozone.moderation.defs#modEventEmail")]
    DefsModEventEmail(Box<crate::tools_ozone::moderation::ModEventEmail<'a>>),
    #[serde(rename = "tools.ozone.moderation.defs#modEventDivert")]
    DefsModEventDivert(Box<crate::tools_ozone::moderation::ModEventDivert<'a>>),
    #[serde(rename = "tools.ozone.moderation.defs#modEventTag")]
    DefsModEventTag(Box<crate::tools_ozone::moderation::ModEventTag<'a>>),
    #[serde(rename = "tools.ozone.moderation.defs#accountEvent")]
    DefsAccountEvent(Box<crate::tools_ozone::moderation::AccountEvent<'a>>),
    #[serde(rename = "tools.ozone.moderation.defs#identityEvent")]
    DefsIdentityEvent(Box<crate::tools_ozone::moderation::IdentityEvent<'a>>),
    #[serde(rename = "tools.ozone.moderation.defs#recordEvent")]
    DefsRecordEvent(Box<crate::tools_ozone::moderation::RecordEvent<'a>>),
    #[serde(rename = "tools.ozone.moderation.defs#modEventPriorityScore")]
    DefsModEventPriorityScore(
        Box<crate::tools_ozone::moderation::ModEventPriorityScore<'a>>,
    ),
    #[serde(rename = "tools.ozone.moderation.defs#ageAssuranceEvent")]
    DefsAgeAssuranceEvent(Box<crate::tools_ozone::moderation::AgeAssuranceEvent<'a>>),
    #[serde(rename = "tools.ozone.moderation.defs#ageAssuranceOverrideEvent")]
    DefsAgeAssuranceOverrideEvent(
        Box<crate::tools_ozone::moderation::AgeAssuranceOverrideEvent<'a>>,
    ),
    #[serde(rename = "tools.ozone.moderation.defs#revokeAccountCredentialsEvent")]
    DefsRevokeAccountCredentialsEvent(
        Box<crate::tools_ozone::moderation::RevokeAccountCredentialsEvent<'a>>,
    ),
}

impl jacquard_common::IntoStatic for EmitEventRecordEvent<'_> {
    type Output = EmitEventRecordEvent<'static>;
    fn into_static(self) -> Self::Output {
        match self {
            EmitEventRecordEvent::DefsModEventTakedown(v) => {
                EmitEventRecordEvent::DefsModEventTakedown(v.into_static())
            }
            EmitEventRecordEvent::DefsModEventAcknowledge(v) => {
                EmitEventRecordEvent::DefsModEventAcknowledge(v.into_static())
            }
            EmitEventRecordEvent::DefsModEventEscalate(v) => {
                EmitEventRecordEvent::DefsModEventEscalate(v.into_static())
            }
            EmitEventRecordEvent::DefsModEventComment(v) => {
                EmitEventRecordEvent::DefsModEventComment(v.into_static())
            }
            EmitEventRecordEvent::DefsModEventLabel(v) => {
                EmitEventRecordEvent::DefsModEventLabel(v.into_static())
            }
            EmitEventRecordEvent::DefsModEventReport(v) => {
                EmitEventRecordEvent::DefsModEventReport(v.into_static())
            }
            EmitEventRecordEvent::DefsModEventMute(v) => {
                EmitEventRecordEvent::DefsModEventMute(v.into_static())
            }
            EmitEventRecordEvent::DefsModEventUnmute(v) => {
                EmitEventRecordEvent::DefsModEventUnmute(v.into_static())
            }
            EmitEventRecordEvent::DefsModEventMuteReporter(v) => {
                EmitEventRecordEvent::DefsModEventMuteReporter(v.into_static())
            }
            EmitEventRecordEvent::DefsModEventUnmuteReporter(v) => {
                EmitEventRecordEvent::DefsModEventUnmuteReporter(v.into_static())
            }
            EmitEventRecordEvent::DefsModEventReverseTakedown(v) => {
                EmitEventRecordEvent::DefsModEventReverseTakedown(v.into_static())
            }
            EmitEventRecordEvent::DefsModEventResolveAppeal(v) => {
                EmitEventRecordEvent::DefsModEventResolveAppeal(v.into_static())
            }
            EmitEventRecordEvent::DefsModEventEmail(v) => {
                EmitEventRecordEvent::DefsModEventEmail(v.into_static())
            }
            EmitEventRecordEvent::DefsModEventDivert(v) => {
                EmitEventRecordEvent::DefsModEventDivert(v.into_static())
            }
            EmitEventRecordEvent::DefsModEventTag(v) => {
                EmitEventRecordEvent::DefsModEventTag(v.into_static())
            }
            EmitEventRecordEvent::DefsAccountEvent(v) => {
                EmitEventRecordEvent::DefsAccountEvent(v.into_static())
            }
            EmitEventRecordEvent::DefsIdentityEvent(v) => {
                EmitEventRecordEvent::DefsIdentityEvent(v.into_static())
            }
            EmitEventRecordEvent::DefsRecordEvent(v) => {
                EmitEventRecordEvent::DefsRecordEvent(v.into_static())
            }
            EmitEventRecordEvent::DefsModEventPriorityScore(v) => {
                EmitEventRecordEvent::DefsModEventPriorityScore(v.into_static())
            }
            EmitEventRecordEvent::DefsAgeAssuranceEvent(v) => {
                EmitEventRecordEvent::DefsAgeAssuranceEvent(v.into_static())
            }
            EmitEventRecordEvent::DefsAgeAssuranceOverrideEvent(v) => {
                EmitEventRecordEvent::DefsAgeAssuranceOverrideEvent(v.into_static())
            }
            EmitEventRecordEvent::DefsRevokeAccountCredentialsEvent(v) => {
                EmitEventRecordEvent::DefsRevokeAccountCredentialsEvent(v.into_static())
            }
            EmitEventRecordEvent::Unknown(v) => {
                EmitEventRecordEvent::Unknown(v.into_static())
            }
        }
    }
}

#[jacquard_derive::open_union]
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(tag = "$type")]
#[serde(bound(deserialize = "'de: 'a"))]
pub enum EmitEventRecordSubject<'a> {
    #[serde(rename = "com.atproto.admin.defs#repoRef")]
    DefsRepoRef(Box<crate::com_atproto::admin::RepoRef<'a>>),
    #[serde(rename = "com.atproto.repo.strongRef")]
    StrongRef(Box<crate::com_atproto::repo::strong_ref::StrongRef<'a>>),
}

impl jacquard_common::IntoStatic for EmitEventRecordSubject<'_> {
    type Output = EmitEventRecordSubject<'static>;
    fn into_static(self) -> Self::Output {
        match self {
            EmitEventRecordSubject::DefsRepoRef(v) => {
                EmitEventRecordSubject::DefsRepoRef(v.into_static())
            }
            EmitEventRecordSubject::StrongRef(v) => {
                EmitEventRecordSubject::StrongRef(v.into_static())
            }
            EmitEventRecordSubject::Unknown(v) => {
                EmitEventRecordSubject::Unknown(v.into_static())
            }
        }
    }
}

impl jacquard_common::IntoStatic for EmitEvent<'_> {
    type Output = EmitEvent<'static>;
    fn into_static(self) -> Self::Output {
        EmitEvent {
            created_by: self.created_by.into_static(),
            event: self.event.into_static(),
            external_id: self.external_id.into_static(),
            mod_tool: self.mod_tool.into_static(),
            subject: self.subject.into_static(),
            subject_blob_cids: self.subject_blob_cids.into_static(),
            extra_data: self.extra_data.into_static(),
        }
    }
}

#[jacquard_derive::lexicon]
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct EmitEventOutput<'a> {
    #[serde(flatten)]
    #[serde(borrow)]
    pub value: crate::tools_ozone::moderation::ModEventView<'a>,
}

impl jacquard_common::IntoStatic for EmitEventOutput<'_> {
    type Output = EmitEventOutput<'static>;
    fn into_static(self) -> Self::Output {
        EmitEventOutput {
            value: self.value.into_static(),
            extra_data: self.extra_data.into_static(),
        }
    }
}

#[jacquard_derive::open_union]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    thiserror::Error,
    miette::Diagnostic
)]
#[serde(tag = "error", content = "message")]
#[serde(bound(deserialize = "'de: 'a"))]
pub enum EmitEventError<'a> {
    #[serde(rename = "SubjectHasAction")]
    SubjectHasAction(std::option::Option<String>),
    ///An event with the same external ID already exists for the subject.
    #[serde(rename = "DuplicateExternalId")]
    DuplicateExternalId(std::option::Option<String>),
}

impl std::fmt::Display for EmitEventError<'_> {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Self::SubjectHasAction(msg) => {
                write!(f, "SubjectHasAction")?;
                if let Some(msg) = msg {
                    write!(f, ": {}", msg)?;
                }
                Ok(())
            }
            Self::DuplicateExternalId(msg) => {
                write!(f, "DuplicateExternalId")?;
                if let Some(msg) = msg {
                    write!(f, ": {}", msg)?;
                }
                Ok(())
            }
            Self::Unknown(err) => write!(f, "Unknown error: {:?}", err),
        }
    }
}

impl jacquard_common::IntoStatic for EmitEventError<'_> {
    type Output = EmitEventError<'static>;
    fn into_static(self) -> Self::Output {
        match self {
            EmitEventError::SubjectHasAction(v) => {
                EmitEventError::SubjectHasAction(v.into_static())
            }
            EmitEventError::DuplicateExternalId(v) => {
                EmitEventError::DuplicateExternalId(v.into_static())
            }
            EmitEventError::Unknown(v) => EmitEventError::Unknown(v.into_static()),
        }
    }
}

///Response type for
///tools.ozone.moderation.emitEvent
pub struct EmitEventResponse;
impl jacquard_common::xrpc::XrpcResp for EmitEventResponse {
    const NSID: &'static str = "tools.ozone.moderation.emitEvent";
    const ENCODING: &'static str = "application/json";
    type Output<'de> = EmitEventOutput<'de>;
    type Err<'de> = EmitEventError<'de>;
}

impl<'de> jacquard_common::xrpc::XrpcRequest<'de> for EmitEvent<'de> {
    const NSID: &'static str = "tools.ozone.moderation.emitEvent";
    const METHOD: jacquard_common::xrpc::XrpcMethod = jacquard_common::xrpc::XrpcMethod::Procedure(
        "application/json",
    );
    type Response = EmitEventResponse;
}