// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: tools.ozone.moderation.getSubjects
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    bon::Builder
)]
#[builder(start_fn = new)]
#[serde(rename_all = "camelCase")]
pub struct GetSubjects<'a> {
    #[serde(borrow)]
    pub subjects: Vec<jacquard_common::CowStr<'a>>,
}

impl jacquard_common::IntoStatic for GetSubjects<'_> {
    type Output = GetSubjects<'static>;
    fn into_static(self) -> Self::Output {
        GetSubjects {
            subjects: self.subjects.into_static(),
        }
    }
}

#[jacquard_derive::lexicon]
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct GetSubjectsOutput<'a> {
    #[serde(borrow)]
    pub subjects: Vec<crate::tools_ozone::moderation::SubjectView<'a>>,
}

impl jacquard_common::IntoStatic for GetSubjectsOutput<'_> {
    type Output = GetSubjectsOutput<'static>;
    fn into_static(self) -> Self::Output {
        GetSubjectsOutput {
            subjects: self.subjects.into_static(),
            extra_data: self.extra_data.into_static(),
        }
    }
}

///Response type for
///tools.ozone.moderation.getSubjects
pub struct GetSubjectsResponse;
impl jacquard_common::xrpc::XrpcResp for GetSubjectsResponse {
    const NSID: &'static str = "tools.ozone.moderation.getSubjects";
    const ENCODING: &'static str = "application/json";
    type Output<'de> = GetSubjectsOutput<'de>;
    type Err<'de> = jacquard_common::xrpc::GenericError<'de>;
}

impl<'de> jacquard_common::xrpc::XrpcRequest<'de> for GetSubjects<'de> {
    const NSID: &'static str = "tools.ozone.moderation.getSubjects";
    const METHOD: jacquard_common::xrpc::XrpcMethod = jacquard_common::xrpc::XrpcMethod::Query;
    type Response = GetSubjectsResponse;
}