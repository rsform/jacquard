// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: tools.ozone.moderation.getRepo
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq, bon::Builder)]
#[builder(start_fn = new)]
#[serde(rename_all = "camelCase")]
pub struct GetRepo<'a> {
    #[serde(borrow)]
    pub did: jacquard_common::types::string::Did<'a>,
}

impl jacquard_common::IntoStatic for GetRepo<'_> {
    type Output = GetRepo<'static>;
    fn into_static(self) -> Self::Output {
        GetRepo {
            did: self.did.into_static(),
        }
    }
}

#[jacquard_derive::lexicon]
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct GetRepoOutput<'a> {
    #[serde(flatten)]
    #[serde(borrow)]
    pub value: crate::tools_ozone::moderation::RepoViewDetail<'a>,
}

impl jacquard_common::IntoStatic for GetRepoOutput<'_> {
    type Output = GetRepoOutput<'static>;
    fn into_static(self) -> Self::Output {
        GetRepoOutput {
            value: self.value.into_static(),
            extra_data: self.extra_data.into_static(),
        }
    }
}

#[jacquard_derive::open_union]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    thiserror::Error,
    miette::Diagnostic,
)]
#[serde(tag = "error", content = "message")]
#[serde(bound(deserialize = "'de: 'a"))]
pub enum GetRepoError<'a> {
    #[serde(rename = "RepoNotFound")]
    RepoNotFound(std::option::Option<String>),
}

impl std::fmt::Display for GetRepoError<'_> {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Self::RepoNotFound(msg) => {
                write!(f, "RepoNotFound")?;
                if let Some(msg) = msg {
                    write!(f, ": {}", msg)?;
                }
                Ok(())
            }
            Self::Unknown(err) => write!(f, "Unknown error: {:?}", err),
        }
    }
}

impl jacquard_common::IntoStatic for GetRepoError<'_> {
    type Output = GetRepoError<'static>;
    fn into_static(self) -> Self::Output {
        match self {
            GetRepoError::RepoNotFound(v) => GetRepoError::RepoNotFound(v.into_static()),
            GetRepoError::Unknown(v) => GetRepoError::Unknown(v.into_static()),
        }
    }
}

///Response type for
///tools.ozone.moderation.getRepo
pub struct GetRepoResponse;
impl<'de> jacquard_common::types::xrpc::XrpcResp<'de> for GetRepoResponse {
    const ENCODING: &'static str = "application/json";
    type Output = GetRepoOutput<'de>;
    type Err = GetRepoError<'de>;
}

impl<'de> jacquard_common::types::xrpc::XrpcRequest<'de> for GetRepo<'de> {
    const NSID: &'static str = "tools.ozone.moderation.getRepo";
    const METHOD: jacquard_common::types::xrpc::XrpcMethod =
        jacquard_common::types::xrpc::XrpcMethod::Query;
    type Response<'de1> = GetRepoResponse;
}
