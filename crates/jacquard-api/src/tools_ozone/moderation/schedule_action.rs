// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: tools.ozone.moderation.scheduleAction
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
pub struct FailedScheduling<'a> {
    #[serde(borrow)]
    pub error: jacquard_common::CowStr<'a>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub error_code: std::option::Option<jacquard_common::CowStr<'a>>,
    #[serde(borrow)]
    pub subject: jacquard_common::types::string::Did<'a>,
}

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    bon::Builder,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
#[builder(start_fn = new)]
pub struct ScheduleAction<'a> {
    #[serde(borrow)]
    pub action: ScheduleActionRecordAction<'a>,
    #[serde(borrow)]
    pub created_by: jacquard_common::types::string::Did<'a>,
    ///This will be propagated to the moderation event when it is applied
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub mod_tool: std::option::Option<crate::tools_ozone::moderation::ModTool<'a>>,
    #[serde(borrow)]
    pub scheduling: jacquard_common::types::value::Data<'a>,
    ///Array of DID subjects to schedule the action for
    #[serde(borrow)]
    pub subjects: Vec<jacquard_common::types::string::Did<'a>>,
    #[serde(flatten)]
    #[serde(borrow)]
    #[builder(default)]
    pub extra_data: ::std::collections::BTreeMap<
        ::jacquard_common::smol_str::SmolStr,
        ::jacquard_common::types::value::Data<'a>,
    >,
}

#[jacquard_derive::open_union]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(tag = "$type")]
#[serde(bound(deserialize = "'de: 'a"))]
pub enum ScheduleActionRecordAction<'a> {}
#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
pub struct ScheduleActionOutput<'a> {
    #[serde(flatten)]
    #[serde(borrow)]
    pub value: jacquard_common::types::value::Data<'a>,
}

///Response type for
///tools.ozone.moderation.scheduleAction
pub struct ScheduleActionResponse;
impl jacquard_common::xrpc::XrpcResp for ScheduleActionResponse {
    const NSID: &'static str = "tools.ozone.moderation.scheduleAction";
    const ENCODING: &'static str = "application/json";
    type Output<'de> = ScheduleActionOutput<'de>;
    type Err<'de> = jacquard_common::xrpc::GenericError<'de>;
}

impl<'de> jacquard_common::xrpc::XrpcRequest<'de> for ScheduleAction<'de> {
    const NSID: &'static str = "tools.ozone.moderation.scheduleAction";
    const METHOD: jacquard_common::xrpc::XrpcMethod = jacquard_common::xrpc::XrpcMethod::Procedure(
        "application/json",
    );
    type Response = ScheduleActionResponse;
}

///Endpoint type for
///tools.ozone.moderation.scheduleAction
pub struct ScheduleActionRequest;
impl jacquard_common::xrpc::XrpcEndpoint for ScheduleActionRequest {
    const PATH: &'static str = "/xrpc/tools.ozone.moderation.scheduleAction";
    const METHOD: jacquard_common::xrpc::XrpcMethod = jacquard_common::xrpc::XrpcMethod::Procedure(
        "application/json",
    );
    type Request<'de> = ScheduleAction<'de>;
    type Response = ScheduleActionResponse;
}

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
pub struct ScheduledActionResults<'a> {
    #[serde(borrow)]
    pub failed: Vec<
        crate::tools_ozone::moderation::schedule_action::FailedScheduling<'a>,
    >,
    #[serde(borrow)]
    pub succeeded: Vec<jacquard_common::types::string::Did<'a>>,
}

///Configuration for when the action should be executed
#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
pub struct SchedulingConfig<'a> {
    ///Earliest time to execute the action (for randomized scheduling)
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub execute_after: std::option::Option<jacquard_common::types::string::Datetime>,
    ///Exact time to execute the action
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub execute_at: std::option::Option<jacquard_common::types::string::Datetime>,
    ///Latest time to execute the action (for randomized scheduling)
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub execute_until: std::option::Option<jacquard_common::types::string::Datetime>,
}

///Schedule a takedown action
#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
pub struct Takedown<'a> {
    ///If true, all other reports on content authored by this account will be resolved (acknowledged).
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub acknowledge_account_subjects: std::option::Option<bool>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub comment: std::option::Option<jacquard_common::CowStr<'a>>,
    ///Indicates how long the takedown should be in effect before automatically expiring.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub duration_in_hours: std::option::Option<i64>,
    ///Names/Keywords of the policies that drove the decision.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub policies: std::option::Option<Vec<jacquard_common::CowStr<'a>>>,
}