// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: tools.ozone.moderation.getRecords
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct GetRecords<'a> {
    #[serde(borrow)]
    pub uris: Vec<jacquard_common::types::string::AtUri<'a>>,
}

impl jacquard_common::IntoStatic for GetRecords<'_> {
    type Output = GetRecords<'static>;
    fn into_static(self) -> Self::Output {
        GetRecords {
            uris: self.uris.into_static(),
        }
    }
}

#[jacquard_derive::lexicon]
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct GetRecordsOutput<'a> {
    #[serde(borrow)]
    pub records: Vec<jacquard_common::types::value::Data<'a>>,
}

impl jacquard_common::IntoStatic for GetRecordsOutput<'_> {
    type Output = GetRecordsOutput<'static>;
    fn into_static(self) -> Self::Output {
        GetRecordsOutput {
            records: self.records.into_static(),
            extra_data: self.extra_data.into_static(),
        }
    }
}

impl jacquard_common::types::xrpc::XrpcRequest for GetRecords<'_> {
    const NSID: &'static str = "tools.ozone.moderation.getRecords";
    const METHOD: jacquard_common::types::xrpc::XrpcMethod = jacquard_common::types::xrpc::XrpcMethod::Query;
    const OUTPUT_ENCODING: &'static str = "application/json";
    type Output<'de> = GetRecordsOutput<'de>;
    type Err<'de> = jacquard_common::types::xrpc::GenericError<'de>;
}