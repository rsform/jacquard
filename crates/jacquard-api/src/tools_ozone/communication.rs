// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: tools.ozone.communication.defs
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

pub mod create_template;
pub mod delete_template;
pub mod list_templates;
pub mod update_template;

#[jacquard_derive::lexicon]
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct TemplateView<'a> {
    ///Subject of the message, used in emails.
    #[serde(borrow)]
    pub content_markdown: jacquard_common::CowStr<'a>,
    pub created_at: jacquard_common::types::string::Datetime,
    pub disabled: bool,
    #[serde(borrow)]
    pub id: jacquard_common::CowStr<'a>,
    ///Message language.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub lang: std::option::Option<jacquard_common::types::string::Language>,
    ///DID of the user who last updated the template.
    #[serde(borrow)]
    pub last_updated_by: jacquard_common::types::string::Did<'a>,
    ///Name of the template.
    #[serde(borrow)]
    pub name: jacquard_common::CowStr<'a>,
    ///Content of the template, can contain markdown and variable placeholders.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub subject: std::option::Option<jacquard_common::CowStr<'a>>,
    pub updated_at: jacquard_common::types::string::Datetime,
}

impl jacquard_common::IntoStatic for TemplateView<'_> {
    type Output = TemplateView<'static>;
    fn into_static(self) -> Self::Output {
        TemplateView {
            content_markdown: self.content_markdown.into_static(),
            created_at: self.created_at.into_static(),
            disabled: self.disabled.into_static(),
            id: self.id.into_static(),
            lang: self.lang.into_static(),
            last_updated_by: self.last_updated_by.into_static(),
            name: self.name.into_static(),
            subject: self.subject.into_static(),
            updated_at: self.updated_at.into_static(),
            extra_data: self.extra_data.into_static(),
        }
    }
}