// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: tools.ozone.server.getConfig
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

#[jacquard_derive::lexicon]
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct GetConfigOutput<'a> {
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub appview: std::option::Option<jacquard_common::types::value::Data<'a>>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub blob_divert: std::option::Option<jacquard_common::types::value::Data<'a>>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub chat: std::option::Option<jacquard_common::types::value::Data<'a>>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub pds: std::option::Option<jacquard_common::types::value::Data<'a>>,
    ///The did of the verifier used for verification.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub verifier_did: std::option::Option<jacquard_common::types::string::Did<'a>>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub viewer: std::option::Option<jacquard_common::types::value::Data<'a>>,
}

impl jacquard_common::IntoStatic for GetConfigOutput<'_> {
    type Output = GetConfigOutput<'static>;
    fn into_static(self) -> Self::Output {
        GetConfigOutput {
            appview: self.appview.into_static(),
            blob_divert: self.blob_divert.into_static(),
            chat: self.chat.into_static(),
            pds: self.pds.into_static(),
            verifier_did: self.verifier_did.into_static(),
            viewer: self.viewer.into_static(),
            extra_data: self.extra_data.into_static(),
        }
    }
}

/// XRPC request marker type
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize, serde::Deserialize)]
pub struct GetConfig;
impl<'de> jacquard_common::types::xrpc::XrpcRequest<'de> for GetConfig {
    const NSID: &'static str = "tools.ozone.server.getConfig";
    const METHOD: jacquard_common::types::xrpc::XrpcMethod = jacquard_common::types::xrpc::XrpcMethod::Query;
    const OUTPUT_ENCODING: &'static str = "application/json";
    type Output = GetConfigOutput<'de>;
    type Err = jacquard_common::types::xrpc::GenericError<'de>;
}

#[jacquard_derive::lexicon]
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct ServiceConfig<'a> {
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub url: std::option::Option<jacquard_common::types::string::Uri<'a>>,
}

impl jacquard_common::IntoStatic for ServiceConfig<'_> {
    type Output = ServiceConfig<'static>;
    fn into_static(self) -> Self::Output {
        ServiceConfig {
            url: self.url.into_static(),
            extra_data: self.extra_data.into_static(),
        }
    }
}

#[jacquard_derive::lexicon]
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct ViewerConfig<'a> {
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub role: std::option::Option<jacquard_common::CowStr<'a>>,
}

impl jacquard_common::IntoStatic for ViewerConfig<'_> {
    type Output = ViewerConfig<'static>;
    fn into_static(self) -> Self::Output {
        ViewerConfig {
            role: self.role.into_static(),
            extra_data: self.extra_data.into_static(),
        }
    }
}