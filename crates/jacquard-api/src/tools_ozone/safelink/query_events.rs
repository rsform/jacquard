// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: tools.ozone.safelink.queryEvents
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

#[jacquard_derive::lexicon]
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq, bon::Builder)]
#[serde(rename_all = "camelCase")]
#[builder(start_fn = new)]
pub struct QueryEvents<'a> {
    ///Cursor for pagination
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    #[builder(into)]
    pub cursor: std::option::Option<jacquard_common::CowStr<'a>>,
    ///Maximum number of results to return
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub limit: std::option::Option<i64>,
    ///Filter by pattern type
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    #[builder(into)]
    pub pattern_type: std::option::Option<jacquard_common::CowStr<'a>>,
    ///Sort direction
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    #[builder(into)]
    pub sort_direction: std::option::Option<jacquard_common::CowStr<'a>>,
    ///Filter by specific URLs or domains
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub urls: std::option::Option<Vec<jacquard_common::CowStr<'a>>>,
    #[serde(flatten)]
    #[serde(borrow)]
    #[builder(default)]
    pub extra_data: ::std::collections::BTreeMap<
        ::jacquard_common::smol_str::SmolStr,
        ::jacquard_common::types::value::Data<'a>,
    >,
}

impl jacquard_common::IntoStatic for QueryEvents<'_> {
    type Output = QueryEvents<'static>;
    fn into_static(self) -> Self::Output {
        QueryEvents {
            cursor: self.cursor.into_static(),
            limit: self.limit.into_static(),
            pattern_type: self.pattern_type.into_static(),
            sort_direction: self.sort_direction.into_static(),
            urls: self.urls.into_static(),
            extra_data: self.extra_data.into_static(),
        }
    }
}

#[jacquard_derive::lexicon]
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct QueryEventsOutput<'a> {
    ///Next cursor for pagination. Only present if there are more results.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub cursor: std::option::Option<jacquard_common::CowStr<'a>>,
    #[serde(borrow)]
    pub events: Vec<crate::tools_ozone::safelink::Event<'a>>,
}

impl jacquard_common::IntoStatic for QueryEventsOutput<'_> {
    type Output = QueryEventsOutput<'static>;
    fn into_static(self) -> Self::Output {
        QueryEventsOutput {
            cursor: self.cursor.into_static(),
            events: self.events.into_static(),
            extra_data: self.extra_data.into_static(),
        }
    }
}

///Response type for
///tools.ozone.safelink.queryEvents
pub struct QueryEventsResponse;
impl<'de> jacquard_common::types::xrpc::XrpcResp<'de> for QueryEventsResponse {
    const ENCODING: &'static str = "application/json";
    type Output = QueryEventsOutput<'de>;
    type Err = jacquard_common::types::xrpc::GenericError<'de>;
}

impl<'de> jacquard_common::types::xrpc::XrpcRequest<'de> for QueryEvents<'de> {
    const NSID: &'static str = "tools.ozone.safelink.queryEvents";
    const METHOD: jacquard_common::types::xrpc::XrpcMethod =
        jacquard_common::types::xrpc::XrpcMethod::Procedure("application/json");
    type Response<'de1> = QueryEventsResponse;
}
