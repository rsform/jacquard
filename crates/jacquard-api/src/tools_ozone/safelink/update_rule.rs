// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: tools.ozone.safelink.updateRule
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    bon::Builder
)]
#[serde(rename_all = "camelCase")]
#[builder(start_fn = new)]
pub struct UpdateRule<'a> {
    #[serde(borrow)]
    pub action: crate::tools_ozone::safelink::ActionType<'a>,
    ///Optional comment about the update
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    #[builder(into)]
    pub comment: std::option::Option<jacquard_common::CowStr<'a>>,
    ///Optional DID to credit as the creator. Only respected for admin_token authentication.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub created_by: std::option::Option<jacquard_common::types::string::Did<'a>>,
    #[serde(borrow)]
    pub pattern: crate::tools_ozone::safelink::PatternType<'a>,
    #[serde(borrow)]
    pub reason: crate::tools_ozone::safelink::ReasonType<'a>,
    ///The URL or domain to update the rule for
    #[serde(borrow)]
    #[builder(into)]
    pub url: jacquard_common::CowStr<'a>,
    #[serde(flatten)]
    #[serde(borrow)]
    #[builder(default)]
    pub extra_data: ::std::collections::BTreeMap<
        ::jacquard_common::smol_str::SmolStr,
        ::jacquard_common::types::value::Data<'a>,
    >,
}

impl jacquard_common::IntoStatic for UpdateRule<'_> {
    type Output = UpdateRule<'static>;
    fn into_static(self) -> Self::Output {
        UpdateRule {
            action: self.action.into_static(),
            comment: self.comment.into_static(),
            created_by: self.created_by.into_static(),
            pattern: self.pattern.into_static(),
            reason: self.reason.into_static(),
            url: self.url.into_static(),
            extra_data: self.extra_data.into_static(),
        }
    }
}

#[jacquard_derive::lexicon]
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct UpdateRuleOutput<'a> {
    #[serde(flatten)]
    #[serde(borrow)]
    pub value: crate::tools_ozone::safelink::Event<'a>,
}

impl jacquard_common::IntoStatic for UpdateRuleOutput<'_> {
    type Output = UpdateRuleOutput<'static>;
    fn into_static(self) -> Self::Output {
        UpdateRuleOutput {
            value: self.value.into_static(),
            extra_data: self.extra_data.into_static(),
        }
    }
}

#[jacquard_derive::open_union]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    thiserror::Error,
    miette::Diagnostic
)]
#[serde(tag = "error", content = "message")]
#[serde(bound(deserialize = "'de: 'a"))]
pub enum UpdateRuleError<'a> {
    ///No active rule found for this URL/domain
    #[serde(rename = "RuleNotFound")]
    RuleNotFound(std::option::Option<String>),
}

impl std::fmt::Display for UpdateRuleError<'_> {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Self::RuleNotFound(msg) => {
                write!(f, "RuleNotFound")?;
                if let Some(msg) = msg {
                    write!(f, ": {}", msg)?;
                }
                Ok(())
            }
            Self::Unknown(err) => write!(f, "Unknown error: {:?}", err),
        }
    }
}

impl jacquard_common::IntoStatic for UpdateRuleError<'_> {
    type Output = UpdateRuleError<'static>;
    fn into_static(self) -> Self::Output {
        match self {
            UpdateRuleError::RuleNotFound(v) => {
                UpdateRuleError::RuleNotFound(v.into_static())
            }
            UpdateRuleError::Unknown(v) => UpdateRuleError::Unknown(v.into_static()),
        }
    }
}

impl<'de> jacquard_common::types::xrpc::XrpcRequest<'de> for UpdateRule<'de> {
    const NSID: &'static str = "tools.ozone.safelink.updateRule";
    const METHOD: jacquard_common::types::xrpc::XrpcMethod = jacquard_common::types::xrpc::XrpcMethod::Procedure(
        "application/json",
    );
    const OUTPUT_ENCODING: &'static str = "application/json";
    type Output = UpdateRuleOutput<'de>;
    type Err = UpdateRuleError<'de>;
}