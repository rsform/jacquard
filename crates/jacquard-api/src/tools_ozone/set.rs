// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: tools.ozone.set.defs
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

pub mod add_values;
pub mod delete_set;
pub mod delete_values;
pub mod get_values;
pub mod query_sets;
pub mod upsert_set;

#[jacquard_derive::lexicon]
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct Set<'a> {
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub description: std::option::Option<jacquard_common::CowStr<'a>>,
    #[serde(borrow)]
    pub name: jacquard_common::CowStr<'a>,
}

impl jacquard_common::IntoStatic for Set<'_> {
    type Output = Set<'static>;
    fn into_static(self) -> Self::Output {
        Set {
            description: self.description.into_static(),
            name: self.name.into_static(),
            extra_data: self.extra_data.into_static(),
        }
    }
}

#[jacquard_derive::lexicon]
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct SetView<'a> {
    pub created_at: jacquard_common::types::string::Datetime,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub description: std::option::Option<jacquard_common::CowStr<'a>>,
    #[serde(borrow)]
    pub name: jacquard_common::CowStr<'a>,
    pub set_size: i64,
    pub updated_at: jacquard_common::types::string::Datetime,
}

impl jacquard_common::IntoStatic for SetView<'_> {
    type Output = SetView<'static>;
    fn into_static(self) -> Self::Output {
        SetView {
            created_at: self.created_at.into_static(),
            description: self.description.into_static(),
            name: self.name.into_static(),
            set_size: self.set_size.into_static(),
            updated_at: self.updated_at.into_static(),
            extra_data: self.extra_data.into_static(),
        }
    }
}