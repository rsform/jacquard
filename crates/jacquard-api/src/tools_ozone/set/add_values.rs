// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: tools.ozone.set.addValues
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

#[jacquard_derive::lexicon]
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq, bon::Builder)]
#[serde(rename_all = "camelCase")]
#[builder(start_fn = new)]
pub struct AddValues<'a> {
    ///Name of the set to add values to
    #[serde(borrow)]
    #[builder(into)]
    pub name: jacquard_common::CowStr<'a>,
    ///Array of string values to add to the set
    #[serde(borrow)]
    pub values: Vec<jacquard_common::CowStr<'a>>,
    #[serde(flatten)]
    #[serde(borrow)]
    #[builder(default)]
    pub extra_data: ::std::collections::BTreeMap<
        ::jacquard_common::smol_str::SmolStr,
        ::jacquard_common::types::value::Data<'a>,
    >,
}

impl jacquard_common::IntoStatic for AddValues<'_> {
    type Output = AddValues<'static>;
    fn into_static(self) -> Self::Output {
        AddValues {
            name: self.name.into_static(),
            values: self.values.into_static(),
            extra_data: self.extra_data.into_static(),
        }
    }
}

///Response type for
///tools.ozone.set.addValues
pub struct AddValuesResponse;
impl<'de> jacquard_common::types::xrpc::XrpcResp<'de> for AddValuesResponse {
    const ENCODING: &'static str = "application/json";
    type Output = ();
    type Err = jacquard_common::types::xrpc::GenericError<'de>;
}

impl<'de> jacquard_common::types::xrpc::XrpcRequest<'de> for AddValues<'de> {
    const NSID: &'static str = "tools.ozone.set.addValues";
    const METHOD: jacquard_common::types::xrpc::XrpcMethod =
        jacquard_common::types::xrpc::XrpcMethod::Procedure("application/json");
    type Response<'de1> = AddValuesResponse;
}
