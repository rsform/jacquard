// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: dev.baileytownsend.health.rings
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

///A record of daily activity rings (Apple Fitness), including move, exercise, and stand goals.
#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
pub struct Rings<'a> {
    pub created_at: jacquard_common::types::string::Datetime,
    ///The total minutes of exercise completed.
    pub exercise: i64,
    ///The daily exercise goal in minutes.
    pub exercise_goal: i64,
    ///The total active calories burned for the day.
    pub r#move: i64,
    ///The daily move goal in calories.
    pub move_goal: i64,
    ///The daily stand goal in hours.
    pub stand_goal: i64,
    ///The number of hours the user stood up and moved around.
    pub stand_hours: i64,
}

/// Typed wrapper for GetRecord response with this collection's record type.
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
pub struct RingsGetRecordOutput<'a> {
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub cid: std::option::Option<jacquard_common::types::string::Cid<'a>>,
    #[serde(borrow)]
    pub uri: jacquard_common::types::string::AtUri<'a>,
    #[serde(borrow)]
    pub value: Rings<'a>,
}

/// Marker type for deserializing records from this collection.
pub struct RingsRecord;
impl jacquard_common::xrpc::XrpcResp for RingsRecord {
    const NSID: &'static str = "dev.baileytownsend.health.rings";
    const ENCODING: &'static str = "application/json";
    type Output<'de> = RingsGetRecordOutput<'de>;
    type Err<'de> = jacquard_common::types::collection::RecordError<'de>;
}

impl jacquard_common::types::collection::Collection for Rings<'_> {
    const NSID: &'static str = "dev.baileytownsend.health.rings";
    type Record = RingsRecord;
}

impl From<RingsGetRecordOutput<'_>> for Rings<'_> {
    fn from(output: RingsGetRecordOutput<'_>) -> Self {
        use jacquard_common::IntoStatic;
        output.value.into_static()
    }
}