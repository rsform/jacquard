// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: sh.weaver.embed.images
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
pub struct Image<'a> {
    ///alt text description of the image
    #[serde(borrow)]
    pub alt: jacquard_common::CowStr<'a>,
    ///Blurhash string for the image, used for low-resolution placeholders. This must be a valid Blurhash string.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub blurhash: std::option::Option<jacquard_common::CowStr<'a>>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub dimensions: std::option::Option<ImageRecordDimensions<'a>>,
    #[serde(borrow)]
    pub image: jacquard_common::types::blob::Blob<'a>,
}

#[jacquard_derive::open_union]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(tag = "$type")]
#[serde(bound(deserialize = "'de: 'a"))]
pub enum ImageRecordDimensions<'a> {
    #[serde(rename = "app.bsky.embed.defs#aspectRatio")]
    DefsAspectRatio(Box<crate::app_bsky::embed::AspectRatio<'a>>),
    #[serde(rename = "sh.weaver.embed.defs#percentSize")]
    DefsPercentSize(Box<crate::sh_weaver::embed::PercentSize<'a>>),
    #[serde(rename = "sh.weaver.embed.defs#pixelSize")]
    DefsPixelSize(Box<crate::sh_weaver::embed::PixelSize<'a>>),
}

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
pub struct Images<'a> {
    #[serde(borrow)]
    pub images: Vec<crate::sh_weaver::embed::images::Image<'a>>,
}