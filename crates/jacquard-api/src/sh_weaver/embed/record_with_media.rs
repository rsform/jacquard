// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: sh.weaver.embed.recordWithMedia
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
pub struct RecordWithMedia<'a> {
    #[serde(borrow)]
    pub media: RecordWithMediaMedia<'a>,
    #[serde(borrow)]
    pub record: RecordWithMediaRecord<'a>,
}

#[jacquard_derive::open_union]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(tag = "$type")]
#[serde(bound(deserialize = "'de: 'a"))]
pub enum RecordWithMediaMedia<'a> {
    #[serde(rename = "sh.weaver.embed.images")]
    Images(Box<crate::sh_weaver::embed::images::Images<'a>>),
    #[serde(rename = "sh.weaver.embed.external")]
    External(Box<crate::sh_weaver::embed::external::ExternalRecord<'a>>),
    #[serde(rename = "app.bsky.embed.images")]
    BskyImages(Box<crate::app_bsky::embed::images::Images<'a>>),
    #[serde(rename = "app.bsky.embed.video")]
    Video(Box<crate::app_bsky::embed::video::Video<'a>>),
    #[serde(rename = "app.bsky.embed.external")]
    BskyExternal(Box<crate::app_bsky::embed::external::ExternalRecord<'a>>),
}

#[jacquard_derive::open_union]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(tag = "$type")]
#[serde(bound(deserialize = "'de: 'a"))]
pub enum RecordWithMediaRecord<'a> {
    #[serde(rename = "app.bsky.embed.record")]
    Record(Box<crate::app_bsky::embed::record::Record<'a>>),
    #[serde(rename = "sh.weaver.embed.records")]
    Records(Box<crate::sh_weaver::embed::records::Records<'a>>),
}

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
pub struct View<'a> {
    #[serde(borrow)]
    pub media: ViewMedia<'a>,
    #[serde(borrow)]
    pub record: ViewRecord<'a>,
}

#[jacquard_derive::open_union]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(tag = "$type")]
#[serde(bound(deserialize = "'de: 'a"))]
pub enum ViewMedia<'a> {
    #[serde(rename = "sh.weaver.embed.images")]
    Images(Box<crate::sh_weaver::embed::images::Images<'a>>),
    #[serde(rename = "sh.weaver.embed.external#view")]
    ExternalView(Box<crate::sh_weaver::embed::external::View<'a>>),
    #[serde(rename = "app.bsky.embed.images#view")]
    ImagesView(Box<crate::app_bsky::embed::images::View<'a>>),
    #[serde(rename = "app.bsky.embed.video#view")]
    VideoView(Box<crate::app_bsky::embed::video::View<'a>>),
    #[serde(rename = "app.bsky.embed.external#view")]
    BskyExternalView(Box<crate::app_bsky::embed::external::View<'a>>),
}

#[jacquard_derive::open_union]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(tag = "$type")]
#[serde(bound(deserialize = "'de: 'a"))]
pub enum ViewRecord<'a> {
    #[serde(rename = "sh.weaver.embed.records#view")]
    RecordsView(Box<crate::sh_weaver::embed::records::View<'a>>),
    #[serde(rename = "app.bsky.embed.record#view")]
    RecordView(Box<crate::app_bsky::embed::record::View<'a>>),
}