// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: sh.weaver.notebook.authors
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

///A single author in a Weaver notebook.
#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
pub struct AuthorListItem<'a> {
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub index: std::option::Option<i64>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub profile: std::option::Option<AuthorListItemProfile<'a>>,
}

#[jacquard_derive::open_union]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(tag = "$type")]
#[serde(bound(deserialize = "'de: 'a"))]
pub enum AuthorListItemProfile<'a> {
    #[serde(rename = "app.bsky.actor.defs#profileViewBasic")]
    ProfileViewBasic(Box<crate::app_bsky::actor::ProfileViewBasic<'a>>),
    #[serde(rename = "sh.weaver.actor.defs#profileView")]
    ProfileView(Box<crate::sh_weaver::actor::ProfileView<'a>>),
}

///Authors of a Weaver notebook.
#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
pub struct Authors<'a> {
    #[serde(borrow)]
    pub author_list: Vec<crate::sh_weaver::notebook::authors::AuthorListItem<'a>>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub created_at: std::option::Option<jacquard_common::types::string::Datetime>,
}

impl jacquard_common::types::collection::Collection for Authors<'_> {
    const NSID: &'static str = "sh.weaver.notebook.authors";
}