// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: sh.weaver.actor.profile
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

/// A declaration of a Weaver account profile.
#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic,
    bon::Builder
)]
#[serde(rename_all = "camelCase")]
pub struct Profile<'a> {
    /// Small image to be displayed next to posts from account. AKA, 'profile picture'
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub avatar: Option<jacquard_common::types::blob::BlobRef<'a>>,
    /// Include link to this account on Bluesky.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    pub bluesky: Option<bool>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    pub created_at: Option<jacquard_common::types::string::Datetime>,
    /// Free-form profile description text.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub description: Option<jacquard_common::CowStr<'a>>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub display_name: Option<jacquard_common::CowStr<'a>>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub links: Option<Vec<jacquard_common::types::string::Uri<'a>>>,
    /// Free-form location text.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub location: Option<jacquard_common::CowStr<'a>>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub pinned_post: Option<crate::com_atproto::repo::strong_ref::StrongRef<'a>>,
    /// Pronouns to use in user-generated content.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub pronouns: Option<crate::sh_weaver::actor::profile::PronounsList<'a>>,
    /// Include link to this account on Tangled.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    pub tangled: Option<bool>,
}

impl<'a> Profile<'a> {
    pub fn uri(
        uri: impl Into<jacquard_common::CowStr<'a>>,
    ) -> Result<
        jacquard_common::types::uri::RecordUri<'a, ProfileRecord>,
        jacquard_common::types::uri::UriError,
    > {
        jacquard_common::types::uri::RecordUri::try_from_uri(
            jacquard_common::types::string::AtUri::new_cow(uri.into())?,
        )
    }
}

/// Typed wrapper for GetRecord response with this collection's record type.
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
pub struct ProfileGetRecordOutput<'a> {
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub cid: std::option::Option<jacquard_common::types::string::Cid<'a>>,
    #[serde(borrow)]
    pub uri: jacquard_common::types::string::AtUri<'a>,
    #[serde(borrow)]
    pub value: Profile<'a>,
}

impl From<ProfileGetRecordOutput<'_>> for Profile<'_> {
    fn from(output: ProfileGetRecordOutput<'_>) -> Self {
        use jacquard_common::IntoStatic;
        output.value.into_static()
    }
}

impl jacquard_common::types::collection::Collection for Profile<'_> {
    const NSID: &'static str = "sh.weaver.actor.profile";
    type Record = ProfileRecord;
}

/// Marker type for deserializing records from this collection.
#[derive(Debug, serde::Serialize, serde::Deserialize)]
pub struct ProfileRecord;
impl jacquard_common::xrpc::XrpcResp for ProfileRecord {
    const NSID: &'static str = "sh.weaver.actor.profile";
    const ENCODING: &'static str = "application/json";
    type Output<'de> = ProfileGetRecordOutput<'de>;
    type Err<'de> = jacquard_common::types::collection::RecordError<'de>;
}

impl jacquard_common::types::collection::Collection for ProfileRecord {
    const NSID: &'static str = "sh.weaver.actor.profile";
    type Record = ProfileRecord;
}

pub type PronounsList<'a> = Vec<jacquard_common::CowStr<'a>>;