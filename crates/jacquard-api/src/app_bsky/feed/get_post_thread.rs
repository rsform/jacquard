// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: app.bsky.feed.getPostThread
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    bon::Builder,
    jacquard_derive::IntoStatic
)]
#[builder(start_fn = new)]
#[serde(rename_all = "camelCase")]
pub struct GetPostThread<'a> {
    ///(default: 6, min: 0, max: 1000)
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub depth: std::option::Option<i64>,
    ///(default: 80, min: 0, max: 1000)
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub parent_height: std::option::Option<i64>,
    #[serde(borrow)]
    pub uri: jacquard_common::types::string::AtUri<'a>,
}

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
pub struct GetPostThreadOutput<'a> {
    #[serde(borrow)]
    pub thread: GetPostThreadOutputRecordThread<'a>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub threadgate: std::option::Option<crate::app_bsky::feed::ThreadgateView<'a>>,
}

#[jacquard_derive::open_union]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(tag = "$type")]
#[serde(bound(deserialize = "'de: 'a"))]
pub enum GetPostThreadOutputRecordThread<'a> {
    #[serde(rename = "app.bsky.feed.defs#threadViewPost")]
    DefsThreadViewPost(Box<crate::app_bsky::feed::ThreadViewPost<'a>>),
    #[serde(rename = "app.bsky.feed.defs#notFoundPost")]
    DefsNotFoundPost(Box<crate::app_bsky::feed::NotFoundPost<'a>>),
    #[serde(rename = "app.bsky.feed.defs#blockedPost")]
    DefsBlockedPost(Box<crate::app_bsky::feed::BlockedPost<'a>>),
}

#[jacquard_derive::open_union]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    thiserror::Error,
    miette::Diagnostic
)]
#[serde(tag = "error", content = "message")]
#[serde(bound(deserialize = "'de: 'a"))]
pub enum GetPostThreadError<'a> {
    #[serde(rename = "NotFound")]
    NotFound(std::option::Option<String>),
}

impl std::fmt::Display for GetPostThreadError<'_> {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Self::NotFound(msg) => {
                write!(f, "NotFound")?;
                if let Some(msg) = msg {
                    write!(f, ": {}", msg)?;
                }
                Ok(())
            }
            Self::Unknown(err) => write!(f, "Unknown error: {:?}", err),
        }
    }
}

impl jacquard_common::IntoStatic for GetPostThreadError<'_> {
    type Output = GetPostThreadError<'static>;
    fn into_static(self) -> Self::Output {
        match self {
            GetPostThreadError::NotFound(v) => {
                GetPostThreadError::NotFound(v.into_static())
            }
            GetPostThreadError::Unknown(v) => {
                GetPostThreadError::Unknown(v.into_static())
            }
        }
    }
}

///Response type for
///app.bsky.feed.getPostThread
pub struct GetPostThreadResponse;
impl jacquard_common::xrpc::XrpcResp for GetPostThreadResponse {
    const NSID: &'static str = "app.bsky.feed.getPostThread";
    const ENCODING: &'static str = "application/json";
    type Output<'de> = GetPostThreadOutput<'de>;
    type Err<'de> = GetPostThreadError<'de>;
}

impl<'de> jacquard_common::xrpc::XrpcRequest<'de> for GetPostThread<'de> {
    const NSID: &'static str = "app.bsky.feed.getPostThread";
    const METHOD: jacquard_common::xrpc::XrpcMethod = jacquard_common::xrpc::XrpcMethod::Query;
    type Response = GetPostThreadResponse;
}

///Endpoint type for
///app.bsky.feed.getPostThread
pub struct GetPostThreadRequest;
impl jacquard_common::xrpc::XrpcEndpoint for GetPostThreadRequest {
    const PATH: &'static str = "/xrpc/app.bsky.feed.getPostThread";
    const METHOD: jacquard_common::xrpc::XrpcMethod = jacquard_common::xrpc::XrpcMethod::Query;
    type Request<'de> = GetPostThread<'de>;
    type Response = GetPostThreadResponse;
}