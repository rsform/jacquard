// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: app.bsky.feed.getFeedGenerator
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    bon::Builder
)]
#[builder(start_fn = new)]
#[serde(rename_all = "camelCase")]
pub struct GetFeedGenerator<'a> {
    #[serde(borrow)]
    pub feed: jacquard_common::types::string::AtUri<'a>,
}

impl jacquard_common::IntoStatic for GetFeedGenerator<'_> {
    type Output = GetFeedGenerator<'static>;
    fn into_static(self) -> Self::Output {
        GetFeedGenerator {
            feed: self.feed.into_static(),
        }
    }
}

#[jacquard_derive::lexicon]
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct GetFeedGeneratorOutput<'a> {
    ///Indicates whether the feed generator service has been online recently, or else seems to be inactive.
    pub is_online: bool,
    ///Indicates whether the feed generator service is compatible with the record declaration.
    pub is_valid: bool,
    #[serde(borrow)]
    pub view: crate::app_bsky::feed::GeneratorView<'a>,
}

impl jacquard_common::IntoStatic for GetFeedGeneratorOutput<'_> {
    type Output = GetFeedGeneratorOutput<'static>;
    fn into_static(self) -> Self::Output {
        GetFeedGeneratorOutput {
            is_online: self.is_online.into_static(),
            is_valid: self.is_valid.into_static(),
            view: self.view.into_static(),
            extra_data: self.extra_data.into_static(),
        }
    }
}

impl<'de> jacquard_common::types::xrpc::XrpcRequest<'de> for GetFeedGenerator<'de> {
    const NSID: &'static str = "app.bsky.feed.getFeedGenerator";
    const METHOD: jacquard_common::types::xrpc::XrpcMethod = jacquard_common::types::xrpc::XrpcMethod::Query;
    const OUTPUT_ENCODING: &'static str = "application/json";
    type Output = GetFeedGeneratorOutput<'de>;
    type Err = jacquard_common::types::xrpc::GenericError<'de>;
}