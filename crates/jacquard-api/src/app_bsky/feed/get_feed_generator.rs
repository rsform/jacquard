// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: app.bsky.feed.getFeedGenerator
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct GetFeedGenerator<'a> {
    #[serde(borrow)]
    pub feed: jacquard_common::types::string::AtUri<'a>,
}

#[jacquard_derive::lexicon]
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct GetFeedGeneratorOutput<'a> {
    ///Indicates whether the feed generator service has been online recently, or else seems to be inactive.
    pub is_online: bool,
    ///Indicates whether the feed generator service is compatible with the record declaration.
    pub is_valid: bool,
    #[serde(borrow)]
    pub view: crate::app_bsky::feed::GeneratorView<'a>,
}

impl jacquard_common::types::xrpc::XrpcRequest for GetFeedGenerator<'_> {
    const NSID: &'static str = "app.bsky.feed.getFeedGenerator";
    const METHOD: jacquard_common::types::xrpc::XrpcMethod = jacquard_common::types::xrpc::XrpcMethod::Query;
    const OUTPUT_ENCODING: &'static str = "application/json";
    type Output<'de> = GetFeedGeneratorOutput<'de>;
    type Err<'de> = jacquard_common::types::xrpc::GenericError;
}