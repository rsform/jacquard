// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: app.bsky.feed.generator
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

///Record declaring of the existence of a feed generator, and containing metadata about it. The record can exist in any repository.
#[jacquard_derive::lexicon]
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct Generator<'a> {
    ///Declaration that a feed accepts feedback interactions from a client through app.bsky.feed.sendInteractions
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub accepts_interactions: std::option::Option<bool>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub avatar: std::option::Option<jacquard_common::types::blob::Blob<'a>>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub content_mode: std::option::Option<jacquard_common::CowStr<'a>>,
    pub created_at: jacquard_common::types::string::Datetime,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub description: std::option::Option<jacquard_common::CowStr<'a>>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub description_facets: std::option::Option<
        Vec<crate::app_bsky::richtext::facet::Facet<'a>>,
    >,
    #[serde(borrow)]
    pub did: jacquard_common::types::string::Did<'a>,
    #[serde(borrow)]
    pub display_name: jacquard_common::CowStr<'a>,
    ///Self-label values
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub labels: std::option::Option<GeneratorRecordLabels<'a>>,
}

#[jacquard_derive::open_union]
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(tag = "$type")]
#[serde(bound(deserialize = "'de: 'a"))]
pub enum GeneratorRecordLabels<'a> {
    #[serde(rename = "com.atproto.label.defs#selfLabels")]
    DefsSelfLabels(Box<crate::com_atproto::label::SelfLabels<'a>>),
}

impl jacquard_common::IntoStatic for GeneratorRecordLabels<'_> {
    type Output = GeneratorRecordLabels<'static>;
    fn into_static(self) -> Self::Output {
        match self {
            GeneratorRecordLabels::DefsSelfLabels(v) => {
                GeneratorRecordLabels::DefsSelfLabels(v.into_static())
            }
            GeneratorRecordLabels::Unknown(v) => {
                GeneratorRecordLabels::Unknown(v.into_static())
            }
        }
    }
}

impl jacquard_common::types::collection::Collection for Generator<'_> {
    const NSID: &'static str = "app.bsky.feed.generator";
}

impl jacquard_common::IntoStatic for Generator<'_> {
    type Output = Generator<'static>;
    fn into_static(self) -> Self::Output {
        Generator {
            accepts_interactions: self.accepts_interactions.into_static(),
            avatar: self.avatar.into_static(),
            content_mode: self.content_mode.into_static(),
            created_at: self.created_at.into_static(),
            description: self.description.into_static(),
            description_facets: self.description_facets.into_static(),
            did: self.did.into_static(),
            display_name: self.display_name.into_static(),
            labels: self.labels.into_static(),
            extra_data: self.extra_data.into_static(),
        }
    }
}