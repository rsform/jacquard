// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: app.bsky.feed.postgate
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

///Disables embedding of this post.
#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
pub struct DisableRule<'a> {}
///Record defining interaction rules for a post. The record key (rkey) of the postgate record must match the record key of the post, and that record must be in the same repository.
#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
pub struct Postgate<'a> {
    pub created_at: jacquard_common::types::string::Datetime,
    ///List of AT-URIs embedding this post that the author has detached from.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub detached_embedding_uris: std::option::Option<
        Vec<jacquard_common::types::string::AtUri<'a>>,
    >,
    ///List of rules defining who can embed this post. If value is an empty array or is undefined, no particular rules apply and anyone can embed.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub embedding_rules: std::option::Option<
        Vec<jacquard_common::types::value::Data<'a>>,
    >,
    ///Reference (AT-URI) to the post record.
    #[serde(borrow)]
    pub post: jacquard_common::types::string::AtUri<'a>,
}

impl jacquard_common::types::collection::Collection for Postgate<'_> {
    const NSID: &'static str = "app.bsky.feed.postgate";
}