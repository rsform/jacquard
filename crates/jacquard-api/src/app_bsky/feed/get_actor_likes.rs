// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: app.bsky.feed.getActorLikes
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    bon::Builder
)]
#[builder(start_fn = new)]
#[serde(rename_all = "camelCase")]
pub struct GetActorLikes<'a> {
    #[serde(borrow)]
    pub actor: jacquard_common::types::ident::AtIdentifier<'a>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    #[builder(into)]
    pub cursor: std::option::Option<jacquard_common::CowStr<'a>>,
    ///(default: 50, min: 1, max: 100)
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub limit: std::option::Option<i64>,
}

impl jacquard_common::IntoStatic for GetActorLikes<'_> {
    type Output = GetActorLikes<'static>;
    fn into_static(self) -> Self::Output {
        GetActorLikes {
            actor: self.actor.into_static(),
            cursor: self.cursor.into_static(),
            limit: self.limit.into_static(),
        }
    }
}

#[jacquard_derive::lexicon]
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct GetActorLikesOutput<'a> {
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub cursor: std::option::Option<jacquard_common::CowStr<'a>>,
    #[serde(borrow)]
    pub feed: Vec<crate::app_bsky::feed::FeedViewPost<'a>>,
}

impl jacquard_common::IntoStatic for GetActorLikesOutput<'_> {
    type Output = GetActorLikesOutput<'static>;
    fn into_static(self) -> Self::Output {
        GetActorLikesOutput {
            cursor: self.cursor.into_static(),
            feed: self.feed.into_static(),
            extra_data: self.extra_data.into_static(),
        }
    }
}

#[jacquard_derive::open_union]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    thiserror::Error,
    miette::Diagnostic
)]
#[serde(tag = "error", content = "message")]
#[serde(bound(deserialize = "'de: 'a"))]
pub enum GetActorLikesError<'a> {
    #[serde(rename = "BlockedActor")]
    BlockedActor(std::option::Option<String>),
    #[serde(rename = "BlockedByActor")]
    BlockedByActor(std::option::Option<String>),
}

impl std::fmt::Display for GetActorLikesError<'_> {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Self::BlockedActor(msg) => {
                write!(f, "BlockedActor")?;
                if let Some(msg) = msg {
                    write!(f, ": {}", msg)?;
                }
                Ok(())
            }
            Self::BlockedByActor(msg) => {
                write!(f, "BlockedByActor")?;
                if let Some(msg) = msg {
                    write!(f, ": {}", msg)?;
                }
                Ok(())
            }
            Self::Unknown(err) => write!(f, "Unknown error: {:?}", err),
        }
    }
}

impl jacquard_common::IntoStatic for GetActorLikesError<'_> {
    type Output = GetActorLikesError<'static>;
    fn into_static(self) -> Self::Output {
        match self {
            GetActorLikesError::BlockedActor(v) => {
                GetActorLikesError::BlockedActor(v.into_static())
            }
            GetActorLikesError::BlockedByActor(v) => {
                GetActorLikesError::BlockedByActor(v.into_static())
            }
            GetActorLikesError::Unknown(v) => {
                GetActorLikesError::Unknown(v.into_static())
            }
        }
    }
}

impl jacquard_common::types::xrpc::XrpcRequest for GetActorLikes<'_> {
    const NSID: &'static str = "app.bsky.feed.getActorLikes";
    const METHOD: jacquard_common::types::xrpc::XrpcMethod = jacquard_common::types::xrpc::XrpcMethod::Query;
    const OUTPUT_ENCODING: &'static str = "application/json";
    type Output<'de> = GetActorLikesOutput<'de>;
    type Err<'de> = GetActorLikesError<'de>;
}