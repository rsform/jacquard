// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: app.bsky.feed.getPosts
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    bon::Builder
)]
#[builder(start_fn = new)]
#[serde(rename_all = "camelCase")]
pub struct GetPosts<'a> {
    #[serde(borrow)]
    pub uris: Vec<jacquard_common::types::string::AtUri<'a>>,
}

impl jacquard_common::IntoStatic for GetPosts<'_> {
    type Output = GetPosts<'static>;
    fn into_static(self) -> Self::Output {
        GetPosts {
            uris: self.uris.into_static(),
        }
    }
}

#[jacquard_derive::lexicon]
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct GetPostsOutput<'a> {
    #[serde(borrow)]
    pub posts: Vec<crate::app_bsky::feed::PostView<'a>>,
}

impl jacquard_common::IntoStatic for GetPostsOutput<'_> {
    type Output = GetPostsOutput<'static>;
    fn into_static(self) -> Self::Output {
        GetPostsOutput {
            posts: self.posts.into_static(),
            extra_data: self.extra_data.into_static(),
        }
    }
}

///Response type for
///app.bsky.feed.getPosts
pub struct GetPostsResponse;
impl jacquard_common::xrpc::XrpcResp for GetPostsResponse {
    const NSID: &'static str = "app.bsky.feed.getPosts";
    const ENCODING: &'static str = "application/json";
    type Output<'de> = GetPostsOutput<'de>;
    type Err<'de> = jacquard_common::xrpc::GenericError<'de>;
}

impl<'de> jacquard_common::xrpc::XrpcRequest<'de> for GetPosts<'de> {
    const NSID: &'static str = "app.bsky.feed.getPosts";
    const METHOD: jacquard_common::xrpc::XrpcMethod = jacquard_common::xrpc::XrpcMethod::Query;
    type Response = GetPostsResponse;
}