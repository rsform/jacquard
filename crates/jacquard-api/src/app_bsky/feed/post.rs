// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: app.bsky.feed.post
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

/// Deprecated: use facets instead.
#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic,
    bon::Builder
)]
#[serde(rename_all = "camelCase")]
pub struct Entity<'a> {
    #[serde(borrow)]
    pub index: crate::app_bsky::feed::post::TextSlice<'a>,
    /// Expected values are 'mention' and 'link'.
    #[serde(borrow)]
    #[builder(into)]
    pub r#type: jacquard_common::CowStr<'a>,
    #[serde(borrow)]
    #[builder(into)]
    pub value: jacquard_common::CowStr<'a>,
}

/// Record containing a Bluesky post.
#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic,
    bon::Builder
)]
#[serde(rename_all = "camelCase")]
pub struct Post<'a> {
    /// Client-declared timestamp when this post was originally created.
    pub created_at: jacquard_common::types::string::Datetime,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub embed: Option<PostEmbed<'a>>,
    /// DEPRECATED: replaced by app.bsky.richtext.facet.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub entities: Option<Vec<crate::app_bsky::feed::post::Entity<'a>>>,
    /// Annotations of text (mentions, URLs, hashtags, etc)
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub facets: Option<Vec<crate::app_bsky::richtext::facet::Facet<'a>>>,
    /// Self-label values for this post. Effectively content warnings.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub labels: Option<crate::com_atproto::label::SelfLabels<'a>>,
    /// Indicates human language of post primary text content.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    pub langs: Option<Vec<jacquard_common::types::string::Language>>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub reply: Option<crate::app_bsky::feed::post::ReplyRef<'a>>,
    /// Additional hashtags, in addition to any included in post text and facets.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub tags: Option<Vec<jacquard_common::CowStr<'a>>>,
    /// The primary post content. May be an empty string, if there are embeds.
    #[serde(borrow)]
    #[builder(into)]
    pub text: jacquard_common::CowStr<'a>,
}

impl<'a> Post<'a> {
    pub fn uri(
        uri: impl Into<jacquard_common::CowStr<'a>>,
    ) -> Result<
        jacquard_common::types::uri::RecordUri<'a, PostRecord>,
        jacquard_common::types::uri::UriError,
    > {
        jacquard_common::types::uri::RecordUri::try_from_uri(
            jacquard_common::types::string::AtUri::new_cow(uri.into())?,
        )
    }
}

#[jacquard_derive::open_union]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(tag = "$type")]
#[serde(bound(deserialize = "'de: 'a"))]
pub enum PostEmbed<'a> {
    #[serde(rename = "app.bsky.embed.images")]
    Images(Box<crate::app_bsky::embed::images::Images<'a>>),
    #[serde(rename = "app.bsky.embed.video")]
    Video(Box<crate::app_bsky::embed::video::Video<'a>>),
    #[serde(rename = "app.bsky.embed.external")]
    External(Box<crate::app_bsky::embed::external::ExternalRecord<'a>>),
    #[serde(rename = "app.bsky.embed.record")]
    Record(Box<crate::app_bsky::embed::record::Record<'a>>),
    #[serde(rename = "app.bsky.embed.recordWithMedia")]
    RecordWithMedia(Box<crate::app_bsky::embed::record_with_media::RecordWithMedia<'a>>),
}

/// Typed wrapper for GetRecord response with this collection's record type.
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
pub struct PostGetRecordOutput<'a> {
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub cid: std::option::Option<jacquard_common::types::string::Cid<'a>>,
    #[serde(borrow)]
    pub uri: jacquard_common::types::string::AtUri<'a>,
    #[serde(borrow)]
    pub value: Post<'a>,
}

impl From<PostGetRecordOutput<'_>> for Post<'_> {
    fn from(output: PostGetRecordOutput<'_>) -> Self {
        use jacquard_common::IntoStatic;
        output.value.into_static()
    }
}

impl jacquard_common::types::collection::Collection for Post<'_> {
    const NSID: &'static str = "app.bsky.feed.post";
    type Record = PostRecord;
}

/// Marker type for deserializing records from this collection.
#[derive(Debug, serde::Serialize, serde::Deserialize)]
pub struct PostRecord;
impl jacquard_common::xrpc::XrpcResp for PostRecord {
    const NSID: &'static str = "app.bsky.feed.post";
    const ENCODING: &'static str = "application/json";
    type Output<'de> = PostGetRecordOutput<'de>;
    type Err<'de> = jacquard_common::types::collection::RecordError<'de>;
}

impl jacquard_common::types::collection::Collection for PostRecord {
    const NSID: &'static str = "app.bsky.feed.post";
    type Record = PostRecord;
}

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic,
    bon::Builder
)]
#[serde(rename_all = "camelCase")]
pub struct ReplyRef<'a> {
    #[serde(borrow)]
    pub parent: crate::com_atproto::repo::strong_ref::StrongRef<'a>,
    #[serde(borrow)]
    pub root: crate::com_atproto::repo::strong_ref::StrongRef<'a>,
}

/// Deprecated. Use app.bsky.richtext instead -- A text segment. Start is inclusive, end is exclusive. Indices are for utf16-encoded strings.
#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic,
    bon::Builder
)]
#[serde(rename_all = "camelCase")]
pub struct TextSlice<'a> {
    pub end: i64,
    pub start: i64,
}