// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: app.bsky.feed.getRepostedBy
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    bon::Builder,
    jacquard_derive::IntoStatic
)]
#[builder(start_fn = new)]
#[serde(rename_all = "camelCase")]
pub struct GetRepostedBy<'a> {
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub cid: std::option::Option<jacquard_common::types::string::Cid<'a>>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    #[builder(into)]
    pub cursor: std::option::Option<jacquard_common::CowStr<'a>>,
    ///(default: 50, min: 1, max: 100)
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub limit: std::option::Option<i64>,
    #[serde(borrow)]
    pub uri: jacquard_common::types::string::AtUri<'a>,
}

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
pub struct GetRepostedByOutput<'a> {
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub cid: std::option::Option<jacquard_common::types::string::Cid<'a>>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub cursor: std::option::Option<jacquard_common::CowStr<'a>>,
    #[serde(borrow)]
    pub reposted_by: Vec<crate::app_bsky::actor::ProfileView<'a>>,
    #[serde(borrow)]
    pub uri: jacquard_common::types::string::AtUri<'a>,
}

///Response type for
///app.bsky.feed.getRepostedBy
pub struct GetRepostedByResponse;
impl jacquard_common::xrpc::XrpcResp for GetRepostedByResponse {
    const NSID: &'static str = "app.bsky.feed.getRepostedBy";
    const ENCODING: &'static str = "application/json";
    type Output<'de> = GetRepostedByOutput<'de>;
    type Err<'de> = jacquard_common::xrpc::GenericError<'de>;
}

impl<'a> jacquard_common::xrpc::XrpcRequest for GetRepostedBy<'a> {
    const NSID: &'static str = "app.bsky.feed.getRepostedBy";
    const METHOD: jacquard_common::xrpc::XrpcMethod = jacquard_common::xrpc::XrpcMethod::Query;
    type Response = GetRepostedByResponse;
}

///Endpoint type for
///app.bsky.feed.getRepostedBy
pub struct GetRepostedByRequest;
impl jacquard_common::xrpc::XrpcEndpoint for GetRepostedByRequest {
    const PATH: &'static str = "/xrpc/app.bsky.feed.getRepostedBy";
    const METHOD: jacquard_common::xrpc::XrpcMethod = jacquard_common::xrpc::XrpcMethod::Query;
    type Request<'de> = GetRepostedBy<'de>;
    type Response = GetRepostedByResponse;
}