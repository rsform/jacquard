// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: app.bsky.feed.describeFeedGenerator
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

#[jacquard_derive::lexicon]
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct Feed<'a> {
    #[serde(borrow)]
    pub uri: jacquard_common::types::string::AtUri<'a>,
}

impl jacquard_common::IntoStatic for Feed<'_> {
    type Output = Feed<'static>;
    fn into_static(self) -> Self::Output {
        Feed {
            uri: self.uri.into_static(),
            extra_data: self.extra_data.into_static(),
        }
    }
}

#[jacquard_derive::lexicon]
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct Links<'a> {
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub privacy_policy: std::option::Option<jacquard_common::CowStr<'a>>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub terms_of_service: std::option::Option<jacquard_common::CowStr<'a>>,
}

impl jacquard_common::IntoStatic for Links<'_> {
    type Output = Links<'static>;
    fn into_static(self) -> Self::Output {
        Links {
            privacy_policy: self.privacy_policy.into_static(),
            terms_of_service: self.terms_of_service.into_static(),
            extra_data: self.extra_data.into_static(),
        }
    }
}

#[jacquard_derive::lexicon]
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct DescribeFeedGeneratorOutput<'a> {
    #[serde(borrow)]
    pub did: jacquard_common::types::string::Did<'a>,
    #[serde(borrow)]
    pub feeds: Vec<jacquard_common::types::value::Data<'a>>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub links: std::option::Option<jacquard_common::types::value::Data<'a>>,
}

impl jacquard_common::IntoStatic for DescribeFeedGeneratorOutput<'_> {
    type Output = DescribeFeedGeneratorOutput<'static>;
    fn into_static(self) -> Self::Output {
        DescribeFeedGeneratorOutput {
            did: self.did.into_static(),
            feeds: self.feeds.into_static(),
            links: self.links.into_static(),
            extra_data: self.extra_data.into_static(),
        }
    }
}

/// XRPC request marker type
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize, serde::Deserialize)]
pub struct DescribeFeedGenerator;
///Response type for
///app.bsky.feed.describeFeedGenerator
pub struct DescribeFeedGeneratorResponse;
impl<'de> jacquard_common::types::xrpc::XrpcResp<'de> for DescribeFeedGeneratorResponse {
    const ENCODING: &'static str = "application/json";
    type Output = DescribeFeedGeneratorOutput<'de>;
    type Err = jacquard_common::types::xrpc::GenericError<'de>;
}

impl<'de> jacquard_common::types::xrpc::XrpcRequest<'de> for DescribeFeedGenerator {
    const NSID: &'static str = "app.bsky.feed.describeFeedGenerator";
    const METHOD: jacquard_common::types::xrpc::XrpcMethod =
        jacquard_common::types::xrpc::XrpcMethod::Query;
    type Response<'de1> = DescribeFeedGeneratorResponse;
}
