// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: app.bsky.actor.searchActors
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq, bon::Builder)]
#[builder(start_fn = new)]
#[serde(rename_all = "camelCase")]
pub struct SearchActors<'a> {
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    #[builder(into)]
    pub cursor: std::option::Option<jacquard_common::CowStr<'a>>,
    ///(default: 25, min: 1, max: 100)
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub limit: std::option::Option<i64>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    #[builder(into)]
    pub q: std::option::Option<jacquard_common::CowStr<'a>>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    #[builder(into)]
    pub term: std::option::Option<jacquard_common::CowStr<'a>>,
}

impl jacquard_common::IntoStatic for SearchActors<'_> {
    type Output = SearchActors<'static>;
    fn into_static(self) -> Self::Output {
        SearchActors {
            cursor: self.cursor.into_static(),
            limit: self.limit.into_static(),
            q: self.q.into_static(),
            term: self.term.into_static(),
        }
    }
}

#[jacquard_derive::lexicon]
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct SearchActorsOutput<'a> {
    #[serde(borrow)]
    pub actors: Vec<crate::app_bsky::actor::ProfileView<'a>>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub cursor: std::option::Option<jacquard_common::CowStr<'a>>,
}

impl jacquard_common::IntoStatic for SearchActorsOutput<'_> {
    type Output = SearchActorsOutput<'static>;
    fn into_static(self) -> Self::Output {
        SearchActorsOutput {
            actors: self.actors.into_static(),
            cursor: self.cursor.into_static(),
            extra_data: self.extra_data.into_static(),
        }
    }
}

///Response type for
///app.bsky.actor.searchActors
pub struct SearchActorsResponse;
impl<'de> jacquard_common::types::xrpc::XrpcResp<'de> for SearchActorsResponse {
    const ENCODING: &'static str = "application/json";
    type Output = SearchActorsOutput<'de>;
    type Err = jacquard_common::types::xrpc::GenericError<'de>;
}

impl<'de> jacquard_common::types::xrpc::XrpcRequest<'de> for SearchActors<'de> {
    const NSID: &'static str = "app.bsky.actor.searchActors";
    const METHOD: jacquard_common::types::xrpc::XrpcMethod =
        jacquard_common::types::xrpc::XrpcMethod::Query;
    type Response<'de1> = SearchActorsResponse;
}
