// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: app.bsky.actor.getProfile
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct GetProfile<'a> {
    #[serde(borrow)]
    pub actor: jacquard_common::types::ident::AtIdentifier<'a>,
}

impl jacquard_common::IntoStatic for GetProfile<'_> {
    type Output = GetProfile<'static>;
    fn into_static(self) -> Self::Output {
        GetProfile {
            actor: self.actor.into_static(),
        }
    }
}

#[jacquard_derive::lexicon]
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct GetProfileOutput<'a> {
    #[serde(flatten)]
    #[serde(borrow)]
    pub value: crate::app_bsky::actor::ProfileViewDetailed<'a>,
}

impl jacquard_common::IntoStatic for GetProfileOutput<'_> {
    type Output = GetProfileOutput<'static>;
    fn into_static(self) -> Self::Output {
        GetProfileOutput {
            value: self.value.into_static(),
            extra_data: self.extra_data.into_static(),
        }
    }
}

impl jacquard_common::types::xrpc::XrpcRequest for GetProfile<'_> {
    const NSID: &'static str = "app.bsky.actor.getProfile";
    const METHOD: jacquard_common::types::xrpc::XrpcMethod = jacquard_common::types::xrpc::XrpcMethod::Query;
    const OUTPUT_ENCODING: &'static str = "application/json";
    type Output<'de> = GetProfileOutput<'de>;
    type Err<'de> = jacquard_common::types::xrpc::GenericError<'de>;
}