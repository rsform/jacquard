// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: app.bsky.actor.status
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

///Advertises an account as currently offering live content.
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    Hash,
    jacquard_derive::IntoStatic
)]
pub struct Live;
impl std::fmt::Display for Live {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "live")
    }
}

///A declaration of a Bluesky account status.
#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
pub struct Status<'a> {
    pub created_at: jacquard_common::types::string::Datetime,
    ///The duration of the status in minutes. Applications can choose to impose minimum and maximum limits.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub duration_minutes: std::option::Option<i64>,
    ///An optional embed associated with the status.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub embed: std::option::Option<StatusRecordEmbed<'a>>,
    ///The status for the account.
    #[serde(borrow)]
    pub status: jacquard_common::CowStr<'a>,
}

#[jacquard_derive::open_union]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(tag = "$type")]
#[serde(bound(deserialize = "'de: 'a"))]
pub enum StatusRecordEmbed<'a> {
    #[serde(rename = "app.bsky.embed.external")]
    External(Box<crate::app_bsky::embed::external::ExternalRecord<'a>>),
}

impl jacquard_common::types::collection::Collection for Status<'_> {
    const NSID: &'static str = "app.bsky.actor.status";
}