// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: app.bsky.actor.profile
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

///A declaration of a Bluesky account profile.
#[jacquard_derive::lexicon]
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct Profile<'a> {
    ///Small image to be displayed next to posts from account. AKA, 'profile picture'
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub avatar: std::option::Option<jacquard_common::types::blob::Blob<'a>>,
    ///Larger horizontal image to display behind profile view.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub banner: std::option::Option<jacquard_common::types::blob::Blob<'a>>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub created_at: std::option::Option<jacquard_common::types::string::Datetime>,
    ///Free-form profile description text.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub description: std::option::Option<jacquard_common::CowStr<'a>>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub display_name: std::option::Option<jacquard_common::CowStr<'a>>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub joined_via_starter_pack: std::option::Option<
        crate::com_atproto::repo::strong_ref::StrongRef<'a>,
    >,
    ///Self-label values, specific to the Bluesky application, on the overall account.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub labels: std::option::Option<ProfileRecordLabels<'a>>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub pinned_post: std::option::Option<
        crate::com_atproto::repo::strong_ref::StrongRef<'a>,
    >,
    ///Free-form pronouns text.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub pronouns: std::option::Option<jacquard_common::CowStr<'a>>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub website: std::option::Option<jacquard_common::types::string::Uri<'a>>,
}

#[jacquard_derive::open_union]
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(tag = "$type")]
#[serde(bound(deserialize = "'de: 'a"))]
pub enum ProfileRecordLabels<'a> {
    #[serde(rename = "com.atproto.label.defs#selfLabels")]
    DefsSelfLabels(Box<crate::com_atproto::label::SelfLabels<'a>>),
}

impl jacquard_common::IntoStatic for ProfileRecordLabels<'_> {
    type Output = ProfileRecordLabels<'static>;
    fn into_static(self) -> Self::Output {
        match self {
            ProfileRecordLabels::DefsSelfLabels(v) => {
                ProfileRecordLabels::DefsSelfLabels(v.into_static())
            }
            ProfileRecordLabels::Unknown(v) => {
                ProfileRecordLabels::Unknown(v.into_static())
            }
        }
    }
}

impl jacquard_common::types::collection::Collection for Profile<'_> {
    const NSID: &'static str = "app.bsky.actor.profile";
}

impl jacquard_common::IntoStatic for Profile<'_> {
    type Output = Profile<'static>;
    fn into_static(self) -> Self::Output {
        Profile {
            avatar: self.avatar.into_static(),
            banner: self.banner.into_static(),
            created_at: self.created_at.into_static(),
            description: self.description.into_static(),
            display_name: self.display_name.into_static(),
            joined_via_starter_pack: self.joined_via_starter_pack.into_static(),
            labels: self.labels.into_static(),
            pinned_post: self.pinned_post.into_static(),
            pronouns: self.pronouns.into_static(),
            website: self.website.into_static(),
            extra_data: self.extra_data.into_static(),
        }
    }
}