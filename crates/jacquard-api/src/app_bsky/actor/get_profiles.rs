// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: app.bsky.actor.getProfiles
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq, bon::Builder)]
#[builder(start_fn = new)]
#[serde(rename_all = "camelCase")]
pub struct GetProfiles<'a> {
    #[serde(borrow)]
    pub actors: Vec<jacquard_common::types::ident::AtIdentifier<'a>>,
}

impl jacquard_common::IntoStatic for GetProfiles<'_> {
    type Output = GetProfiles<'static>;
    fn into_static(self) -> Self::Output {
        GetProfiles {
            actors: self.actors.into_static(),
        }
    }
}

#[jacquard_derive::lexicon]
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct GetProfilesOutput<'a> {
    #[serde(borrow)]
    pub profiles: Vec<crate::app_bsky::actor::ProfileViewDetailed<'a>>,
}

impl jacquard_common::IntoStatic for GetProfilesOutput<'_> {
    type Output = GetProfilesOutput<'static>;
    fn into_static(self) -> Self::Output {
        GetProfilesOutput {
            profiles: self.profiles.into_static(),
            extra_data: self.extra_data.into_static(),
        }
    }
}

///Response type for
///app.bsky.actor.getProfiles
pub struct GetProfilesResponse;
impl<'de> jacquard_common::types::xrpc::XrpcResp<'de> for GetProfilesResponse {
    const ENCODING: &'static str = "application/json";
    type Output = GetProfilesOutput<'de>;
    type Err = jacquard_common::types::xrpc::GenericError<'de>;
}

impl<'de> jacquard_common::types::xrpc::XrpcRequest<'de> for GetProfiles<'de> {
    const NSID: &'static str = "app.bsky.actor.getProfiles";
    const METHOD: jacquard_common::types::xrpc::XrpcMethod =
        jacquard_common::types::xrpc::XrpcMethod::Query;
    type Response<'de1> = GetProfilesResponse;
}
