// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: app.bsky.unspecced.searchStarterPacksSkeleton
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    bon::Builder
)]
#[builder(start_fn = new)]
#[serde(rename_all = "camelCase")]
pub struct SearchStarterPacksSkeleton<'a> {
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    #[builder(into)]
    pub cursor: std::option::Option<jacquard_common::CowStr<'a>>,
    ///(default: 25, min: 1, max: 100)
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub limit: std::option::Option<i64>,
    #[serde(borrow)]
    #[builder(into)]
    pub q: jacquard_common::CowStr<'a>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub viewer: std::option::Option<jacquard_common::types::string::Did<'a>>,
}

impl jacquard_common::IntoStatic for SearchStarterPacksSkeleton<'_> {
    type Output = SearchStarterPacksSkeleton<'static>;
    fn into_static(self) -> Self::Output {
        SearchStarterPacksSkeleton {
            cursor: self.cursor.into_static(),
            limit: self.limit.into_static(),
            q: self.q.into_static(),
            viewer: self.viewer.into_static(),
        }
    }
}

#[jacquard_derive::lexicon]
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct SearchStarterPacksSkeletonOutput<'a> {
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub cursor: std::option::Option<jacquard_common::CowStr<'a>>,
    ///Count of search hits. Optional, may be rounded/truncated, and may not be possible to paginate through all hits.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub hits_total: std::option::Option<i64>,
    #[serde(borrow)]
    pub starter_packs: Vec<crate::app_bsky::unspecced::SkeletonSearchStarterPack<'a>>,
}

impl jacquard_common::IntoStatic for SearchStarterPacksSkeletonOutput<'_> {
    type Output = SearchStarterPacksSkeletonOutput<'static>;
    fn into_static(self) -> Self::Output {
        SearchStarterPacksSkeletonOutput {
            cursor: self.cursor.into_static(),
            hits_total: self.hits_total.into_static(),
            starter_packs: self.starter_packs.into_static(),
            extra_data: self.extra_data.into_static(),
        }
    }
}

#[jacquard_derive::open_union]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    thiserror::Error,
    miette::Diagnostic
)]
#[serde(tag = "error", content = "message")]
#[serde(bound(deserialize = "'de: 'a"))]
pub enum SearchStarterPacksSkeletonError<'a> {
    #[serde(rename = "BadQueryString")]
    BadQueryString(std::option::Option<String>),
}

impl std::fmt::Display for SearchStarterPacksSkeletonError<'_> {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Self::BadQueryString(msg) => {
                write!(f, "BadQueryString")?;
                if let Some(msg) = msg {
                    write!(f, ": {}", msg)?;
                }
                Ok(())
            }
            Self::Unknown(err) => write!(f, "Unknown error: {:?}", err),
        }
    }
}

impl jacquard_common::IntoStatic for SearchStarterPacksSkeletonError<'_> {
    type Output = SearchStarterPacksSkeletonError<'static>;
    fn into_static(self) -> Self::Output {
        match self {
            SearchStarterPacksSkeletonError::BadQueryString(v) => {
                SearchStarterPacksSkeletonError::BadQueryString(v.into_static())
            }
            SearchStarterPacksSkeletonError::Unknown(v) => {
                SearchStarterPacksSkeletonError::Unknown(v.into_static())
            }
        }
    }
}

impl jacquard_common::types::xrpc::XrpcRequest for SearchStarterPacksSkeleton<'_> {
    const NSID: &'static str = "app.bsky.unspecced.searchStarterPacksSkeleton";
    const METHOD: jacquard_common::types::xrpc::XrpcMethod = jacquard_common::types::xrpc::XrpcMethod::Query;
    const OUTPUT_ENCODING: &'static str = "application/json";
    type Output<'de> = SearchStarterPacksSkeletonOutput<'de>;
    type Err<'de> = SearchStarterPacksSkeletonError<'de>;
}