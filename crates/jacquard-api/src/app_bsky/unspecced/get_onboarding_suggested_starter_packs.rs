// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: app.bsky.unspecced.getOnboardingSuggestedStarterPacks
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    bon::Builder
)]
#[builder(start_fn = new)]
#[serde(rename_all = "camelCase")]
pub struct GetOnboardingSuggestedStarterPacks {
    ///(default: 10, min: 1, max: 25)
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub limit: std::option::Option<i64>,
}

impl jacquard_common::IntoStatic for GetOnboardingSuggestedStarterPacks {
    type Output = GetOnboardingSuggestedStarterPacks;
    fn into_static(self) -> Self::Output {
        self
    }
}

#[jacquard_derive::lexicon]
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct GetOnboardingSuggestedStarterPacksOutput<'a> {
    #[serde(borrow)]
    pub starter_packs: Vec<crate::app_bsky::graph::StarterPackView<'a>>,
}

impl jacquard_common::IntoStatic for GetOnboardingSuggestedStarterPacksOutput<'_> {
    type Output = GetOnboardingSuggestedStarterPacksOutput<'static>;
    fn into_static(self) -> Self::Output {
        GetOnboardingSuggestedStarterPacksOutput {
            starter_packs: self.starter_packs.into_static(),
            extra_data: self.extra_data.into_static(),
        }
    }
}

impl jacquard_common::types::xrpc::XrpcRequest for GetOnboardingSuggestedStarterPacks {
    const NSID: &'static str = "app.bsky.unspecced.getOnboardingSuggestedStarterPacks";
    const METHOD: jacquard_common::types::xrpc::XrpcMethod = jacquard_common::types::xrpc::XrpcMethod::Query;
    const OUTPUT_ENCODING: &'static str = "application/json";
    type Output<'de> = GetOnboardingSuggestedStarterPacksOutput<'de>;
    type Err<'de> = jacquard_common::types::xrpc::GenericError<'de>;
}