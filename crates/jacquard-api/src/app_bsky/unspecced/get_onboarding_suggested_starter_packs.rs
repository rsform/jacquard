// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: app.bsky.unspecced.getOnboardingSuggestedStarterPacks
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    bon::Builder,
    jacquard_derive::IntoStatic
)]
#[builder(start_fn = new)]
#[serde(rename_all = "camelCase")]
pub struct GetOnboardingSuggestedStarterPacks {
    ///(default: 10, min: 1, max: 25)
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub limit: std::option::Option<i64>,
}

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
pub struct GetOnboardingSuggestedStarterPacksOutput<'a> {
    #[serde(borrow)]
    pub starter_packs: Vec<crate::app_bsky::graph::StarterPackView<'a>>,
}

///Response type for
///app.bsky.unspecced.getOnboardingSuggestedStarterPacks
pub struct GetOnboardingSuggestedStarterPacksResponse;
impl jacquard_common::xrpc::XrpcResp for GetOnboardingSuggestedStarterPacksResponse {
    const NSID: &'static str = "app.bsky.unspecced.getOnboardingSuggestedStarterPacks";
    const ENCODING: &'static str = "application/json";
    type Output<'de> = GetOnboardingSuggestedStarterPacksOutput<'de>;
    type Err<'de> = jacquard_common::xrpc::GenericError<'de>;
}

impl<'de> jacquard_common::xrpc::XrpcRequest<'de>
for GetOnboardingSuggestedStarterPacks {
    const NSID: &'static str = "app.bsky.unspecced.getOnboardingSuggestedStarterPacks";
    const METHOD: jacquard_common::xrpc::XrpcMethod = jacquard_common::xrpc::XrpcMethod::Query;
    type Response = GetOnboardingSuggestedStarterPacksResponse;
}