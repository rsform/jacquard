// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: app.bsky.unspecced.searchPostsSkeleton
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct SearchPostsSkeleton<'a> {
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub author: std::option::Option<jacquard_common::types::ident::AtIdentifier<'a>>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub cursor: std::option::Option<jacquard_common::CowStr<'a>>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub domain: std::option::Option<jacquard_common::CowStr<'a>>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub lang: std::option::Option<jacquard_common::types::string::Language>,
    ///(default: 25, min: 1, max: 100)
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub limit: std::option::Option<i64>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub mentions: std::option::Option<jacquard_common::types::ident::AtIdentifier<'a>>,
    #[serde(borrow)]
    pub q: jacquard_common::CowStr<'a>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub since: std::option::Option<jacquard_common::CowStr<'a>>,
    ///(default: "latest")
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub sort: std::option::Option<jacquard_common::CowStr<'a>>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub tag: std::option::Option<Vec<jacquard_common::CowStr<'a>>>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub until: std::option::Option<jacquard_common::CowStr<'a>>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub url: std::option::Option<jacquard_common::types::string::Uri<'a>>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub viewer: std::option::Option<jacquard_common::types::string::Did<'a>>,
}

impl jacquard_common::IntoStatic for SearchPostsSkeleton<'_> {
    type Output = SearchPostsSkeleton<'static>;
    fn into_static(self) -> Self::Output {
        SearchPostsSkeleton {
            author: self.author.into_static(),
            cursor: self.cursor.into_static(),
            domain: self.domain.into_static(),
            lang: self.lang.into_static(),
            limit: self.limit.into_static(),
            mentions: self.mentions.into_static(),
            q: self.q.into_static(),
            since: self.since.into_static(),
            sort: self.sort.into_static(),
            tag: self.tag.into_static(),
            until: self.until.into_static(),
            url: self.url.into_static(),
            viewer: self.viewer.into_static(),
        }
    }
}

#[jacquard_derive::lexicon]
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct SearchPostsSkeletonOutput<'a> {
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub cursor: std::option::Option<jacquard_common::CowStr<'a>>,
    ///Count of search hits. Optional, may be rounded/truncated, and may not be possible to paginate through all hits.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub hits_total: std::option::Option<i64>,
    #[serde(borrow)]
    pub posts: Vec<crate::app_bsky::unspecced::SkeletonSearchPost<'a>>,
}

impl jacquard_common::IntoStatic for SearchPostsSkeletonOutput<'_> {
    type Output = SearchPostsSkeletonOutput<'static>;
    fn into_static(self) -> Self::Output {
        SearchPostsSkeletonOutput {
            cursor: self.cursor.into_static(),
            hits_total: self.hits_total.into_static(),
            posts: self.posts.into_static(),
            extra_data: self.extra_data.into_static(),
        }
    }
}

#[jacquard_derive::open_union]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    thiserror::Error,
    miette::Diagnostic
)]
#[serde(tag = "error", content = "message")]
#[serde(bound(deserialize = "'de: 'a"))]
pub enum SearchPostsSkeletonError<'a> {
    #[serde(rename = "BadQueryString")]
    BadQueryString(std::option::Option<String>),
}

impl std::fmt::Display for SearchPostsSkeletonError<'_> {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Self::BadQueryString(msg) => {
                write!(f, "BadQueryString")?;
                if let Some(msg) = msg {
                    write!(f, ": {}", msg)?;
                }
                Ok(())
            }
            Self::Unknown(err) => write!(f, "Unknown error: {:?}", err),
        }
    }
}

impl jacquard_common::IntoStatic for SearchPostsSkeletonError<'_> {
    type Output = SearchPostsSkeletonError<'static>;
    fn into_static(self) -> Self::Output {
        match self {
            SearchPostsSkeletonError::BadQueryString(v) => {
                SearchPostsSkeletonError::BadQueryString(v.into_static())
            }
            SearchPostsSkeletonError::Unknown(v) => {
                SearchPostsSkeletonError::Unknown(v.into_static())
            }
        }
    }
}

impl jacquard_common::types::xrpc::XrpcRequest for SearchPostsSkeleton<'_> {
    const NSID: &'static str = "app.bsky.unspecced.searchPostsSkeleton";
    const METHOD: jacquard_common::types::xrpc::XrpcMethod = jacquard_common::types::xrpc::XrpcMethod::Query;
    const OUTPUT_ENCODING: &'static str = "application/json";
    type Output<'de> = SearchPostsSkeletonOutput<'de>;
    type Err<'de> = SearchPostsSkeletonError<'de>;
}