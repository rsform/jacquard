// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: app.bsky.unspecced.getConfig
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
pub struct LiveNowConfig<'a> {
    #[serde(borrow)]
    pub did: jacquard_common::types::string::Did<'a>,
    #[serde(borrow)]
    pub domains: Vec<jacquard_common::CowStr<'a>>,
}

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
pub struct GetConfigOutput<'a> {
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub check_email_confirmed: std::option::Option<bool>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub live_now: std::option::Option<Vec<jacquard_common::types::value::Data<'a>>>,
}

/// XRPC request marker type
#[derive(
    Debug,
    Clone,
    Copy,
    PartialEq,
    Eq,
    serde::Serialize,
    serde::Deserialize,
    jacquard_derive::IntoStatic
)]
pub struct GetConfig;
///Response type for
///app.bsky.unspecced.getConfig
pub struct GetConfigResponse;
impl jacquard_common::xrpc::XrpcResp for GetConfigResponse {
    const NSID: &'static str = "app.bsky.unspecced.getConfig";
    const ENCODING: &'static str = "application/json";
    type Output<'de> = GetConfigOutput<'de>;
    type Err<'de> = jacquard_common::xrpc::GenericError<'de>;
}

impl<'de> jacquard_common::xrpc::XrpcRequest<'de> for GetConfig {
    const NSID: &'static str = "app.bsky.unspecced.getConfig";
    const METHOD: jacquard_common::xrpc::XrpcMethod = jacquard_common::xrpc::XrpcMethod::Query;
    type Response = GetConfigResponse;
}

///Endpoint type for
///app.bsky.unspecced.getConfig
pub struct GetConfigRequest;
impl jacquard_common::xrpc::XrpcEndpoint for GetConfigRequest {
    const PATH: &'static str = "/xrpc/app.bsky.unspecced.getConfig";
    const METHOD: jacquard_common::xrpc::XrpcMethod = jacquard_common::xrpc::XrpcMethod::Query;
    type Request<'de> = GetConfig;
    type Response = GetConfigResponse;
}