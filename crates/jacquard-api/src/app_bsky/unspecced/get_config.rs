// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: app.bsky.unspecced.getConfig
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

#[jacquard_derive::lexicon]
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct LiveNowConfig<'a> {
    #[serde(borrow)]
    pub did: jacquard_common::types::string::Did<'a>,
    #[serde(borrow)]
    pub domains: Vec<jacquard_common::CowStr<'a>>,
}

impl jacquard_common::IntoStatic for LiveNowConfig<'_> {
    type Output = LiveNowConfig<'static>;
    fn into_static(self) -> Self::Output {
        LiveNowConfig {
            did: self.did.into_static(),
            domains: self.domains.into_static(),
            extra_data: self.extra_data.into_static(),
        }
    }
}

#[jacquard_derive::lexicon]
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct GetConfigOutput<'a> {
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub check_email_confirmed: std::option::Option<bool>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub live_now: std::option::Option<Vec<jacquard_common::types::value::Data<'a>>>,
}

impl jacquard_common::IntoStatic for GetConfigOutput<'_> {
    type Output = GetConfigOutput<'static>;
    fn into_static(self) -> Self::Output {
        GetConfigOutput {
            check_email_confirmed: self.check_email_confirmed.into_static(),
            live_now: self.live_now.into_static(),
            extra_data: self.extra_data.into_static(),
        }
    }
}

/// XRPC request marker type
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize, serde::Deserialize)]
pub struct GetConfig;
///Response type for
///app.bsky.unspecced.getConfig
pub struct GetConfigResponse;
impl<'de> jacquard_common::types::xrpc::XrpcResp<'de> for GetConfigResponse {
    const ENCODING: &'static str = "application/json";
    type Output = GetConfigOutput<'de>;
    type Err = jacquard_common::types::xrpc::GenericError<'de>;
}

impl<'de> jacquard_common::types::xrpc::XrpcRequest<'de> for GetConfig {
    const NSID: &'static str = "app.bsky.unspecced.getConfig";
    const METHOD: jacquard_common::types::xrpc::XrpcMethod =
        jacquard_common::types::xrpc::XrpcMethod::Query;
    type Response<'de1> = GetConfigResponse;
}
