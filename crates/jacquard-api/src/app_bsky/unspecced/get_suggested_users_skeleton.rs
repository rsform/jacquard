// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: app.bsky.unspecced.getSuggestedUsersSkeleton
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq, Default)]
#[serde(rename_all = "camelCase")]
pub struct GetSuggestedUsersSkeleton<'a> {
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub category: std::option::Option<jacquard_common::CowStr<'a>>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub limit: std::option::Option<i64>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub viewer: std::option::Option<jacquard_common::types::string::Did<'a>>,
}

impl Default for GetSuggestedUsersSkeleton<'_> {
    fn default() -> Self {
        Self {
            category: Default::default(),
            limit: Some(25i64),
            viewer: Default::default(),
        }
    }
}

#[jacquard_derive::lexicon]
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct GetSuggestedUsersSkeletonOutput<'a> {
    #[serde(borrow)]
    pub dids: Vec<jacquard_common::types::string::Did<'a>>,
}

impl jacquard_common::types::xrpc::XrpcRequest for GetSuggestedUsersSkeleton<'_> {
    const NSID: &'static str = "app.bsky.unspecced.getSuggestedUsersSkeleton";
    const METHOD: jacquard_common::types::xrpc::XrpcMethod = jacquard_common::types::xrpc::XrpcMethod::Query;
    const OUTPUT_ENCODING: &'static str = "application/json";
    type Output<'de> = GetSuggestedUsersSkeletonOutput<'de>;
    type Err<'de> = jacquard_common::types::xrpc::GenericError;
}