// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: app.bsky.unspecced.getPostThreadV2
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq, Default)]
#[serde(rename_all = "camelCase")]
pub struct GetPostThreadV2<'a> {
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub above: std::option::Option<bool>,
    #[serde(borrow)]
    pub anchor: jacquard_common::types::string::AtUri<'a>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub below: std::option::Option<i64>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub branching_factor: std::option::Option<i64>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub prioritize_followed_users: std::option::Option<bool>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub sort: std::option::Option<jacquard_common::CowStr<'a>>,
}

impl Default for GetPostThreadV2<'_> {
    fn default() -> Self {
        Self {
            above: Some(true),
            anchor: Default::default(),
            below: Some(6i64),
            branching_factor: Some(10i64),
            prioritize_followed_users: Some(false),
            sort: Some(jacquard_common::CowStr::from("oldest")),
        }
    }
}

#[jacquard_derive::lexicon]
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct GetPostThreadV2Output<'a> {
    ///Whether this thread has additional replies. If true, a call can be made to the `getPostThreadOtherV2` endpoint to retrieve them.
    pub has_other_replies: bool,
    ///A flat list of thread items. The depth of each item is indicated by the depth property inside the item.
    #[serde(borrow)]
    pub thread: Vec<jacquard_common::types::value::Data<'a>>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub threadgate: std::option::Option<crate::app_bsky::feed::ThreadgateView<'a>>,
}

impl jacquard_common::types::xrpc::XrpcRequest for GetPostThreadV2<'_> {
    const NSID: &'static str = "app.bsky.unspecced.getPostThreadV2";
    const METHOD: jacquard_common::types::xrpc::XrpcMethod = jacquard_common::types::xrpc::XrpcMethod::Query;
    const OUTPUT_ENCODING: &'static str = "application/json";
    type Output<'de> = GetPostThreadV2Output<'de>;
    type Err<'de> = jacquard_common::types::xrpc::GenericError;
}

#[jacquard_derive::lexicon]
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct ThreadItem<'a> {
    ///The nesting level of this item in the thread. Depth 0 means the anchor item. Items above have negative depths, items below have positive depths.
    pub depth: i64,
    #[serde(borrow)]
    pub uri: jacquard_common::types::string::AtUri<'a>,
    #[serde(borrow)]
    pub value: ThreadItemRecordValue<'a>,
}

#[jacquard_derive::open_union]
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(tag = "$type")]
#[serde(bound(deserialize = "'de: 'a"))]
pub enum ThreadItemRecordValue<'a> {
    #[serde(rename = "app.bsky.unspecced.defs#threadItemPost")]
    DefsThreadItemPost(Box<crate::app_bsky::unspecced::ThreadItemPost<'a>>),
    #[serde(rename = "app.bsky.unspecced.defs#threadItemNoUnauthenticated")]
    DefsThreadItemNoUnauthenticated(
        Box<crate::app_bsky::unspecced::ThreadItemNoUnauthenticated<'a>>,
    ),
    #[serde(rename = "app.bsky.unspecced.defs#threadItemNotFound")]
    DefsThreadItemNotFound(Box<crate::app_bsky::unspecced::ThreadItemNotFound<'a>>),
    #[serde(rename = "app.bsky.unspecced.defs#threadItemBlocked")]
    DefsThreadItemBlocked(Box<crate::app_bsky::unspecced::ThreadItemBlocked<'a>>),
}