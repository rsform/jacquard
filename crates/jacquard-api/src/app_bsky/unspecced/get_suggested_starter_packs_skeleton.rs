// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: app.bsky.unspecced.getSuggestedStarterPacksSkeleton
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct GetSuggestedStarterPacksSkeleton<'a> {
    ///(default: 10, min: 1, max: 25)
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub limit: std::option::Option<i64>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub viewer: std::option::Option<jacquard_common::types::string::Did<'a>>,
}

impl jacquard_common::IntoStatic for GetSuggestedStarterPacksSkeleton<'_> {
    type Output = GetSuggestedStarterPacksSkeleton<'static>;
    fn into_static(self) -> Self::Output {
        GetSuggestedStarterPacksSkeleton {
            limit: self.limit.into_static(),
            viewer: self.viewer.into_static(),
        }
    }
}

#[jacquard_derive::lexicon]
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct GetSuggestedStarterPacksSkeletonOutput<'a> {
    #[serde(borrow)]
    pub starter_packs: Vec<jacquard_common::types::string::AtUri<'a>>,
}

impl jacquard_common::IntoStatic for GetSuggestedStarterPacksSkeletonOutput<'_> {
    type Output = GetSuggestedStarterPacksSkeletonOutput<'static>;
    fn into_static(self) -> Self::Output {
        GetSuggestedStarterPacksSkeletonOutput {
            starter_packs: self.starter_packs.into_static(),
            extra_data: self.extra_data.into_static(),
        }
    }
}

impl jacquard_common::types::xrpc::XrpcRequest for GetSuggestedStarterPacksSkeleton<'_> {
    const NSID: &'static str = "app.bsky.unspecced.getSuggestedStarterPacksSkeleton";
    const METHOD: jacquard_common::types::xrpc::XrpcMethod = jacquard_common::types::xrpc::XrpcMethod::Query;
    const OUTPUT_ENCODING: &'static str = "application/json";
    type Output<'de> = GetSuggestedStarterPacksSkeletonOutput<'de>;
    type Err<'de> = jacquard_common::types::xrpc::GenericError<'de>;
}