// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: app.bsky.embed.recordWithMedia
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

#[jacquard_derive::lexicon]
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct RecordWithMedia<'a> {
    #[serde(borrow)]
    pub media: RecordWithMediaRecordMedia<'a>,
    #[serde(borrow)]
    pub record: crate::app_bsky::embed::record::Record<'a>,
}

#[jacquard_derive::open_union]
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(tag = "$type")]
#[serde(bound(deserialize = "'de: 'a"))]
pub enum RecordWithMediaRecordMedia<'a> {
    #[serde(rename = "app.bsky.embed.images")]
    Images(Box<crate::app_bsky::embed::images::Images<'a>>),
    #[serde(rename = "app.bsky.embed.video")]
    Video(Box<crate::app_bsky::embed::video::Video<'a>>),
    #[serde(rename = "app.bsky.embed.external")]
    External(Box<crate::app_bsky::embed::external::ExternalRecord<'a>>),
}

impl jacquard_common::IntoStatic for RecordWithMediaRecordMedia<'_> {
    type Output = RecordWithMediaRecordMedia<'static>;
    fn into_static(self) -> Self::Output {
        match self {
            RecordWithMediaRecordMedia::Images(v) => {
                RecordWithMediaRecordMedia::Images(v.into_static())
            }
            RecordWithMediaRecordMedia::Video(v) => {
                RecordWithMediaRecordMedia::Video(v.into_static())
            }
            RecordWithMediaRecordMedia::External(v) => {
                RecordWithMediaRecordMedia::External(v.into_static())
            }
            RecordWithMediaRecordMedia::Unknown(v) => {
                RecordWithMediaRecordMedia::Unknown(v.into_static())
            }
        }
    }
}

impl jacquard_common::IntoStatic for RecordWithMedia<'_> {
    type Output = RecordWithMedia<'static>;
    fn into_static(self) -> Self::Output {
        RecordWithMedia {
            media: self.media.into_static(),
            record: self.record.into_static(),
            extra_data: self.extra_data.into_static(),
        }
    }
}

#[jacquard_derive::lexicon]
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct View<'a> {
    #[serde(borrow)]
    pub media: ViewRecordMedia<'a>,
    #[serde(borrow)]
    pub record: crate::app_bsky::embed::record::View<'a>,
}

#[jacquard_derive::open_union]
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(tag = "$type")]
#[serde(bound(deserialize = "'de: 'a"))]
pub enum ViewRecordMedia<'a> {
    #[serde(rename = "app.bsky.embed.images#view")]
    ImagesView(Box<crate::app_bsky::embed::images::View<'a>>),
    #[serde(rename = "app.bsky.embed.video#view")]
    VideoView(Box<crate::app_bsky::embed::video::View<'a>>),
    #[serde(rename = "app.bsky.embed.external#view")]
    ExternalView(Box<crate::app_bsky::embed::external::View<'a>>),
}

impl jacquard_common::IntoStatic for ViewRecordMedia<'_> {
    type Output = ViewRecordMedia<'static>;
    fn into_static(self) -> Self::Output {
        match self {
            ViewRecordMedia::ImagesView(v) => {
                ViewRecordMedia::ImagesView(v.into_static())
            }
            ViewRecordMedia::VideoView(v) => ViewRecordMedia::VideoView(v.into_static()),
            ViewRecordMedia::ExternalView(v) => {
                ViewRecordMedia::ExternalView(v.into_static())
            }
            ViewRecordMedia::Unknown(v) => ViewRecordMedia::Unknown(v.into_static()),
        }
    }
}

impl jacquard_common::IntoStatic for View<'_> {
    type Output = View<'static>;
    fn into_static(self) -> Self::Output {
        View {
            media: self.media.into_static(),
            record: self.record.into_static(),
            extra_data: self.extra_data.into_static(),
        }
    }
}