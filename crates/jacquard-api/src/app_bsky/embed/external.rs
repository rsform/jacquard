// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: app.bsky.embed.external
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic,
    bon::Builder
)]
#[serde(rename_all = "camelCase")]
pub struct External<'a> {
    #[serde(borrow)]
    #[builder(into)]
    pub description: jacquard_common::CowStr<'a>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub thumb: Option<jacquard_common::types::blob::Blob<'a>>,
    #[serde(borrow)]
    #[builder(into)]
    pub title: jacquard_common::CowStr<'a>,
    #[serde(borrow)]
    pub uri: jacquard_common::types::string::Uri<'a>,
}

/// A representation of some externally linked content (eg, a URL and 'card'), embedded in a Bluesky record (eg, a post).
#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic,
    bon::Builder
)]
#[serde(rename_all = "camelCase")]
pub struct ExternalRecord<'a> {
    #[serde(borrow)]
    pub external: crate::app_bsky::embed::external::External<'a>,
}

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic,
    bon::Builder
)]
#[serde(rename_all = "camelCase")]
pub struct View<'a> {
    #[serde(borrow)]
    pub external: crate::app_bsky::embed::external::ViewExternal<'a>,
}

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic,
    bon::Builder
)]
#[serde(rename_all = "camelCase")]
pub struct ViewExternal<'a> {
    #[serde(borrow)]
    #[builder(into)]
    pub description: jacquard_common::CowStr<'a>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub thumb: Option<jacquard_common::types::string::Uri<'a>>,
    #[serde(borrow)]
    #[builder(into)]
    pub title: jacquard_common::CowStr<'a>,
    #[serde(borrow)]
    pub uri: jacquard_common::types::string::Uri<'a>,
}