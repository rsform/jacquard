// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: app.bsky.embed.video
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

#[jacquard_derive::lexicon]
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct Caption<'a> {
    #[serde(borrow)]
    pub file: jacquard_common::types::blob::Blob<'a>,
    pub lang: jacquard_common::types::string::Language,
}

impl jacquard_common::IntoStatic for Caption<'_> {
    type Output = Caption<'static>;
    fn into_static(self) -> Self::Output {
        Caption {
            file: self.file.into_static(),
            lang: self.lang.into_static(),
            extra_data: self.extra_data.into_static(),
        }
    }
}

#[jacquard_derive::lexicon]
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct Video<'a> {
    ///Alt text description of the video, for accessibility.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub alt: std::option::Option<jacquard_common::CowStr<'a>>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub aspect_ratio: std::option::Option<crate::app_bsky::embed::AspectRatio<'a>>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub captions: std::option::Option<Vec<crate::app_bsky::embed::video::Caption<'a>>>,
    ///The mp4 video file. May be up to 100mb, formerly limited to 50mb.
    #[serde(borrow)]
    pub video: jacquard_common::types::blob::Blob<'a>,
}

impl jacquard_common::IntoStatic for Video<'_> {
    type Output = Video<'static>;
    fn into_static(self) -> Self::Output {
        Video {
            alt: self.alt.into_static(),
            aspect_ratio: self.aspect_ratio.into_static(),
            captions: self.captions.into_static(),
            video: self.video.into_static(),
            extra_data: self.extra_data.into_static(),
        }
    }
}

#[jacquard_derive::lexicon]
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct View<'a> {
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub alt: std::option::Option<jacquard_common::CowStr<'a>>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub aspect_ratio: std::option::Option<crate::app_bsky::embed::AspectRatio<'a>>,
    #[serde(borrow)]
    pub cid: jacquard_common::types::string::Cid<'a>,
    #[serde(borrow)]
    pub playlist: jacquard_common::types::string::Uri<'a>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub thumbnail: std::option::Option<jacquard_common::types::string::Uri<'a>>,
}

impl jacquard_common::IntoStatic for View<'_> {
    type Output = View<'static>;
    fn into_static(self) -> Self::Output {
        View {
            alt: self.alt.into_static(),
            aspect_ratio: self.aspect_ratio.into_static(),
            cid: self.cid.into_static(),
            playlist: self.playlist.into_static(),
            thumbnail: self.thumbnail.into_static(),
            extra_data: self.extra_data.into_static(),
        }
    }
}