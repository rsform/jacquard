// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: app.bsky.notification.defs
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

pub mod declaration;
pub mod get_preferences;
pub mod get_unread_count;
pub mod list_activity_subscriptions;
pub mod list_notifications;
pub mod put_activity_subscription;
pub mod put_preferences;
pub mod put_preferences_v2;
pub mod register_push;
pub mod unregister_push;
pub mod update_seen;

#[jacquard_derive::lexicon]
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct ActivitySubscription<'a> {
    pub post: bool,
    pub reply: bool,
}

impl jacquard_common::IntoStatic for ActivitySubscription<'_> {
    type Output = ActivitySubscription<'static>;
    fn into_static(self) -> Self::Output {
        ActivitySubscription {
            post: self.post.into_static(),
            reply: self.reply.into_static(),
            extra_data: self.extra_data.into_static(),
        }
    }
}

#[jacquard_derive::lexicon]
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct ChatPreference<'a> {
    #[serde(borrow)]
    pub include: jacquard_common::CowStr<'a>,
    pub push: bool,
}

impl jacquard_common::IntoStatic for ChatPreference<'_> {
    type Output = ChatPreference<'static>;
    fn into_static(self) -> Self::Output {
        ChatPreference {
            include: self.include.into_static(),
            push: self.push.into_static(),
            extra_data: self.extra_data.into_static(),
        }
    }
}

#[jacquard_derive::lexicon]
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct FilterablePreference<'a> {
    #[serde(borrow)]
    pub include: jacquard_common::CowStr<'a>,
    pub list: bool,
    pub push: bool,
}

impl jacquard_common::IntoStatic for FilterablePreference<'_> {
    type Output = FilterablePreference<'static>;
    fn into_static(self) -> Self::Output {
        FilterablePreference {
            include: self.include.into_static(),
            list: self.list.into_static(),
            push: self.push.into_static(),
            extra_data: self.extra_data.into_static(),
        }
    }
}

#[jacquard_derive::lexicon]
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct Preference<'a> {
    pub list: bool,
    pub push: bool,
}

impl jacquard_common::IntoStatic for Preference<'_> {
    type Output = Preference<'static>;
    fn into_static(self) -> Self::Output {
        Preference {
            list: self.list.into_static(),
            push: self.push.into_static(),
            extra_data: self.extra_data.into_static(),
        }
    }
}

#[jacquard_derive::lexicon]
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct Preferences<'a> {
    #[serde(borrow)]
    pub chat: crate::app_bsky::notification::ChatPreference<'a>,
    #[serde(borrow)]
    pub follow: crate::app_bsky::notification::FilterablePreference<'a>,
    #[serde(borrow)]
    pub like: crate::app_bsky::notification::FilterablePreference<'a>,
    #[serde(borrow)]
    pub like_via_repost: crate::app_bsky::notification::FilterablePreference<'a>,
    #[serde(borrow)]
    pub mention: crate::app_bsky::notification::FilterablePreference<'a>,
    #[serde(borrow)]
    pub quote: crate::app_bsky::notification::FilterablePreference<'a>,
    #[serde(borrow)]
    pub reply: crate::app_bsky::notification::FilterablePreference<'a>,
    #[serde(borrow)]
    pub repost: crate::app_bsky::notification::FilterablePreference<'a>,
    #[serde(borrow)]
    pub repost_via_repost: crate::app_bsky::notification::FilterablePreference<'a>,
    #[serde(borrow)]
    pub starterpack_joined: crate::app_bsky::notification::Preference<'a>,
    #[serde(borrow)]
    pub subscribed_post: crate::app_bsky::notification::Preference<'a>,
    #[serde(borrow)]
    pub unverified: crate::app_bsky::notification::Preference<'a>,
    #[serde(borrow)]
    pub verified: crate::app_bsky::notification::Preference<'a>,
}

impl jacquard_common::IntoStatic for Preferences<'_> {
    type Output = Preferences<'static>;
    fn into_static(self) -> Self::Output {
        Preferences {
            chat: self.chat.into_static(),
            follow: self.follow.into_static(),
            like: self.like.into_static(),
            like_via_repost: self.like_via_repost.into_static(),
            mention: self.mention.into_static(),
            quote: self.quote.into_static(),
            reply: self.reply.into_static(),
            repost: self.repost.into_static(),
            repost_via_repost: self.repost_via_repost.into_static(),
            starterpack_joined: self.starterpack_joined.into_static(),
            subscribed_post: self.subscribed_post.into_static(),
            unverified: self.unverified.into_static(),
            verified: self.verified.into_static(),
            extra_data: self.extra_data.into_static(),
        }
    }
}

#[jacquard_derive::lexicon]
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct RecordDeleted<'a> {}
impl jacquard_common::IntoStatic for RecordDeleted<'_> {
    type Output = RecordDeleted<'static>;
    fn into_static(self) -> Self::Output {
        RecordDeleted {
            extra_data: self.extra_data.into_static(),
        }
    }
}

///Object used to store activity subscription data in stash.
#[jacquard_derive::lexicon]
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct SubjectActivitySubscription<'a> {
    #[serde(borrow)]
    pub activity_subscription: crate::app_bsky::notification::ActivitySubscription<'a>,
    #[serde(borrow)]
    pub subject: jacquard_common::types::string::Did<'a>,
}

impl jacquard_common::IntoStatic for SubjectActivitySubscription<'_> {
    type Output = SubjectActivitySubscription<'static>;
    fn into_static(self) -> Self::Output {
        SubjectActivitySubscription {
            activity_subscription: self.activity_subscription.into_static(),
            subject: self.subject.into_static(),
            extra_data: self.extra_data.into_static(),
        }
    }
}