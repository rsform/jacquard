// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: app.bsky.notification.defs
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

pub mod declaration;
pub mod get_preferences;
pub mod get_unread_count;
pub mod list_activity_subscriptions;
pub mod list_notifications;
pub mod put_activity_subscription;
pub mod put_preferences;
pub mod put_preferences_v2;
pub mod register_push;
pub mod unregister_push;
pub mod update_seen;

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic,
    bon::Builder
)]
#[serde(rename_all = "camelCase")]
pub struct ActivitySubscription<'a> {
    pub post: bool,
    pub reply: bool,
}

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic,
    bon::Builder
)]
#[serde(rename_all = "camelCase")]
pub struct ChatPreference<'a> {
    #[serde(borrow)]
    #[builder(into)]
    pub include: jacquard_common::CowStr<'a>,
    pub push: bool,
}

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic,
    bon::Builder
)]
#[serde(rename_all = "camelCase")]
pub struct FilterablePreference<'a> {
    #[serde(borrow)]
    #[builder(into)]
    pub include: jacquard_common::CowStr<'a>,
    pub list: bool,
    pub push: bool,
}

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic,
    bon::Builder
)]
#[serde(rename_all = "camelCase")]
pub struct Preference<'a> {
    pub list: bool,
    pub push: bool,
}

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic,
    bon::Builder
)]
#[serde(rename_all = "camelCase")]
pub struct Preferences<'a> {
    #[serde(borrow)]
    pub chat: crate::app_bsky::notification::ChatPreference<'a>,
    #[serde(borrow)]
    pub follow: crate::app_bsky::notification::FilterablePreference<'a>,
    #[serde(borrow)]
    pub like: crate::app_bsky::notification::FilterablePreference<'a>,
    #[serde(borrow)]
    pub like_via_repost: crate::app_bsky::notification::FilterablePreference<'a>,
    #[serde(borrow)]
    pub mention: crate::app_bsky::notification::FilterablePreference<'a>,
    #[serde(borrow)]
    pub quote: crate::app_bsky::notification::FilterablePreference<'a>,
    #[serde(borrow)]
    pub reply: crate::app_bsky::notification::FilterablePreference<'a>,
    #[serde(borrow)]
    pub repost: crate::app_bsky::notification::FilterablePreference<'a>,
    #[serde(borrow)]
    pub repost_via_repost: crate::app_bsky::notification::FilterablePreference<'a>,
    #[serde(borrow)]
    pub starterpack_joined: crate::app_bsky::notification::Preference<'a>,
    #[serde(borrow)]
    pub subscribed_post: crate::app_bsky::notification::Preference<'a>,
    #[serde(borrow)]
    pub unverified: crate::app_bsky::notification::Preference<'a>,
    #[serde(borrow)]
    pub verified: crate::app_bsky::notification::Preference<'a>,
}

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic,
    bon::Builder
)]
#[serde(rename_all = "camelCase")]
pub struct RecordDeleted<'a> {}
/// Object used to store activity subscription data in stash.
#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic,
    bon::Builder
)]
#[serde(rename_all = "camelCase")]
pub struct SubjectActivitySubscription<'a> {
    #[serde(borrow)]
    pub activity_subscription: crate::app_bsky::notification::ActivitySubscription<'a>,
    #[serde(borrow)]
    pub subject: jacquard_common::types::string::Did<'a>,
}