// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: app.bsky.bookmark.defs
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

pub mod create_bookmark;
pub mod delete_bookmark;
pub mod get_bookmarks;

///Object used to store bookmark data in stash.
#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
pub struct Bookmark<'a> {
    ///A strong ref to the record to be bookmarked. Currently, only `app.bsky.feed.post` records are supported.
    #[serde(borrow)]
    pub subject: crate::com_atproto::repo::strong_ref::StrongRef<'a>,
}

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
pub struct BookmarkView<'a> {
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub created_at: std::option::Option<jacquard_common::types::string::Datetime>,
    #[serde(borrow)]
    pub item: BookmarkViewItem<'a>,
    ///A strong ref to the bookmarked record.
    #[serde(borrow)]
    pub subject: crate::com_atproto::repo::strong_ref::StrongRef<'a>,
}

#[jacquard_derive::open_union]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(tag = "$type")]
#[serde(bound(deserialize = "'de: 'a"))]
pub enum BookmarkViewItem<'a> {
    #[serde(rename = "app.bsky.feed.defs#blockedPost")]
    BlockedPost(Box<crate::app_bsky::feed::BlockedPost<'a>>),
    #[serde(rename = "app.bsky.feed.defs#notFoundPost")]
    NotFoundPost(Box<crate::app_bsky::feed::NotFoundPost<'a>>),
    #[serde(rename = "app.bsky.feed.defs#postView")]
    PostView(Box<crate::app_bsky::feed::PostView<'a>>),
}