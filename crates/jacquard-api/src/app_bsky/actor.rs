// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: app.bsky.actor.defs
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

pub mod get_preferences;
pub mod get_profile;
pub mod get_profiles;
pub mod get_suggestions;
pub mod profile;
pub mod put_preferences;
pub mod search_actors;
pub mod search_actors_typeahead;
pub mod status;

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic,
    bon::Builder
)]
#[serde(rename_all = "camelCase")]
pub struct AdultContentPref<'a> {
    pub enabled: bool,
}

/// If set, an active progress guide. Once completed, can be set to undefined. Should have unspecced fields tracking progress.
#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic,
    bon::Builder
)]
#[serde(rename_all = "camelCase")]
pub struct BskyAppProgressGuide<'a> {
    #[serde(borrow)]
    #[builder(into)]
    pub guide: jacquard_common::CowStr<'a>,
}

/// A grab bag of state that's specific to the bsky.app program. Third-party apps shouldn't use this.
#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic,
    bon::Builder
)]
#[serde(rename_all = "camelCase")]
pub struct BskyAppStatePref<'a> {
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub active_progress_guide: Option<crate::app_bsky::actor::BskyAppProgressGuide<'a>>,
    /// Storage for NUXs the user has encountered.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub nuxs: Option<Vec<crate::app_bsky::actor::Nux<'a>>>,
    /// An array of tokens which identify nudges (modals, popups, tours, highlight dots) that should be shown to the user.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub queued_nudges: Option<Vec<jacquard_common::CowStr<'a>>>,
}

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic,
    bon::Builder
)]
#[serde(rename_all = "camelCase")]
pub struct ContentLabelPref<'a> {
    #[serde(borrow)]
    #[builder(into)]
    pub label: jacquard_common::CowStr<'a>,
    /// Which labeler does this preference apply to? If undefined, applies globally.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub labeler_did: Option<jacquard_common::types::string::Did<'a>>,
    #[serde(borrow)]
    #[builder(into)]
    pub visibility: jacquard_common::CowStr<'a>,
}

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic,
    bon::Builder
)]
#[serde(rename_all = "camelCase")]
pub struct FeedViewPref<'a> {
    /// The URI of the feed, or an identifier which describes the feed.
    #[serde(borrow)]
    #[builder(into)]
    pub feed: jacquard_common::CowStr<'a>,
    /// Hide quote posts in the feed.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    pub hide_quote_posts: Option<bool>,
    /// Hide replies in the feed.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    pub hide_replies: Option<bool>,
    /// Hide replies in the feed if they do not have this number of likes.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    pub hide_replies_by_like_count: Option<i64>,
    /// Hide replies in the feed if they are not by followed users.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    pub hide_replies_by_unfollowed: Option<bool>,
    /// Hide reposts in the feed.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    pub hide_reposts: Option<bool>,
}

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic,
    bon::Builder
)]
#[serde(rename_all = "camelCase")]
pub struct HiddenPostsPref<'a> {
    /// A list of URIs of posts the account owner has hidden.
    #[serde(borrow)]
    pub items: Vec<jacquard_common::types::string::AtUri<'a>>,
}

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic,
    bon::Builder
)]
#[serde(rename_all = "camelCase")]
pub struct InterestsPref<'a> {
    /// A list of tags which describe the account owner's interests gathered during onboarding.
    #[serde(borrow)]
    pub tags: Vec<jacquard_common::CowStr<'a>>,
}

/// The subject's followers whom you also follow
#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic,
    bon::Builder
)]
#[serde(rename_all = "camelCase")]
pub struct KnownFollowers<'a> {
    pub count: i64,
    #[serde(borrow)]
    pub followers: Vec<crate::app_bsky::actor::ProfileViewBasic<'a>>,
}

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic,
    bon::Builder
)]
#[serde(rename_all = "camelCase")]
pub struct LabelerPrefItem<'a> {
    #[serde(borrow)]
    pub did: jacquard_common::types::string::Did<'a>,
}

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic,
    bon::Builder
)]
#[serde(rename_all = "camelCase")]
pub struct LabelersPref<'a> {
    #[serde(borrow)]
    pub labelers: Vec<crate::app_bsky::actor::LabelerPrefItem<'a>>,
}

/// A word that the account owner has muted.
#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic,
    bon::Builder
)]
#[serde(rename_all = "camelCase")]
pub struct MutedWord<'a> {
    /// Groups of users to apply the muted word to. If undefined, applies to all users.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub actor_target: Option<jacquard_common::CowStr<'a>>,
    /// The date and time at which the muted word will expire and no longer be applied.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    pub expires_at: Option<jacquard_common::types::string::Datetime>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub id: Option<jacquard_common::CowStr<'a>>,
    /// The intended targets of the muted word.
    #[serde(borrow)]
    pub targets: Vec<crate::app_bsky::actor::MutedWordTarget<'a>>,
    /// The muted word itself.
    #[serde(borrow)]
    #[builder(into)]
    pub value: jacquard_common::CowStr<'a>,
}

#[derive(Debug, Clone, PartialEq, Eq, Hash)]
pub enum MutedWordTarget<'a> {
    Content,
    Tag,
    Other(jacquard_common::CowStr<'a>),
}

impl<'a> MutedWordTarget<'a> {
    pub fn as_str(&self) -> &str {
        match self {
            Self::Content => "content",
            Self::Tag => "tag",
            Self::Other(s) => s.as_ref(),
        }
    }
}

impl<'a> From<&'a str> for MutedWordTarget<'a> {
    fn from(s: &'a str) -> Self {
        match s {
            "content" => Self::Content,
            "tag" => Self::Tag,
            _ => Self::Other(jacquard_common::CowStr::from(s)),
        }
    }
}

impl<'a> From<String> for MutedWordTarget<'a> {
    fn from(s: String) -> Self {
        match s.as_str() {
            "content" => Self::Content,
            "tag" => Self::Tag,
            _ => Self::Other(jacquard_common::CowStr::from(s)),
        }
    }
}

impl<'a> AsRef<str> for MutedWordTarget<'a> {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}

impl<'a> serde::Serialize for MutedWordTarget<'a> {
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        serializer.serialize_str(self.as_str())
    }
}

impl<'de, 'a> serde::Deserialize<'de> for MutedWordTarget<'a>
where
    'de: 'a,
{
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        let s = <&'de str>::deserialize(deserializer)?;
        Ok(Self::from(s))
    }
}

impl jacquard_common::IntoStatic for MutedWordTarget<'_> {
    type Output = MutedWordTarget<'static>;
    fn into_static(self) -> Self::Output {
        match self {
            MutedWordTarget::Content => MutedWordTarget::Content,
            MutedWordTarget::Tag => MutedWordTarget::Tag,
            MutedWordTarget::Other(v) => MutedWordTarget::Other(v.into_static()),
        }
    }
}

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic,
    bon::Builder
)]
#[serde(rename_all = "camelCase")]
pub struct MutedWordsPref<'a> {
    /// A list of words the account owner has muted.
    #[serde(borrow)]
    pub items: Vec<crate::app_bsky::actor::MutedWord<'a>>,
}

/// A new user experiences (NUX) storage object
#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic,
    bon::Builder
)]
#[serde(rename_all = "camelCase")]
pub struct Nux<'a> {
    pub completed: bool,
    /// Arbitrary data for the NUX. The structure is defined by the NUX itself. Limited to 300 characters.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub data: Option<jacquard_common::CowStr<'a>>,
    /// The date and time at which the NUX will expire and should be considered completed.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    pub expires_at: Option<jacquard_common::types::string::Datetime>,
    #[serde(borrow)]
    #[builder(into)]
    pub id: jacquard_common::CowStr<'a>,
}

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic,
    bon::Builder
)]
#[serde(rename_all = "camelCase")]
pub struct PersonalDetailsPref<'a> {
    /// The birth date of account owner.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    pub birth_date: Option<jacquard_common::types::string::Datetime>,
}

/// Default post interaction settings for the account. These values should be applied as default values when creating new posts. These refs should mirror the threadgate and postgate records exactly.
#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic,
    bon::Builder
)]
#[serde(rename_all = "camelCase")]
pub struct PostInteractionSettingsPref<'a> {
    /// Matches postgate record. List of rules defining who can embed this users posts. If value is an empty array or is undefined, no particular rules apply and anyone can embed.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub postgate_embedding_rules: Option<
        Vec<crate::app_bsky::feed::postgate::DisableRule<'a>>,
    >,
    /// Matches threadgate record. List of rules defining who can reply to this users posts. If value is an empty array, no one can reply. If value is undefined, anyone can reply.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub threadgate_allow_rules: Option<
        Vec<PostInteractionSettingsPrefThreadgateAllowRulesItem<'a>>,
    >,
}

#[jacquard_derive::open_union]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(tag = "$type")]
#[serde(bound(deserialize = "'de: 'a"))]
pub enum PostInteractionSettingsPrefThreadgateAllowRulesItem<'a> {
    #[serde(rename = "app.bsky.feed.threadgate#mentionRule")]
    ThreadgateMentionRule(Box<crate::app_bsky::feed::threadgate::MentionRule<'a>>),
    #[serde(rename = "app.bsky.feed.threadgate#followerRule")]
    ThreadgateFollowerRule(Box<crate::app_bsky::feed::threadgate::FollowerRule<'a>>),
    #[serde(rename = "app.bsky.feed.threadgate#followingRule")]
    ThreadgateFollowingRule(Box<crate::app_bsky::feed::threadgate::FollowingRule<'a>>),
    #[serde(rename = "app.bsky.feed.threadgate#listRule")]
    ThreadgateListRule(Box<crate::app_bsky::feed::threadgate::ListRule<'a>>),
}

#[jacquard_derive::open_union]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(tag = "$type")]
#[serde(bound(deserialize = "'de: 'a"))]
pub enum PreferencesItem<'a> {
    #[serde(rename = "app.bsky.actor.defs#adultContentPref")]
    AdultContentPref(Box<crate::app_bsky::actor::AdultContentPref<'a>>),
    #[serde(rename = "app.bsky.actor.defs#contentLabelPref")]
    ContentLabelPref(Box<crate::app_bsky::actor::ContentLabelPref<'a>>),
    #[serde(rename = "app.bsky.actor.defs#savedFeedsPref")]
    SavedFeedsPref(Box<crate::app_bsky::actor::SavedFeedsPref<'a>>),
    #[serde(rename = "app.bsky.actor.defs#savedFeedsPrefV2")]
    SavedFeedsPrefV2(Box<crate::app_bsky::actor::SavedFeedsPrefV2<'a>>),
    #[serde(rename = "app.bsky.actor.defs#personalDetailsPref")]
    PersonalDetailsPref(Box<crate::app_bsky::actor::PersonalDetailsPref<'a>>),
    #[serde(rename = "app.bsky.actor.defs#feedViewPref")]
    FeedViewPref(Box<crate::app_bsky::actor::FeedViewPref<'a>>),
    #[serde(rename = "app.bsky.actor.defs#threadViewPref")]
    ThreadViewPref(Box<crate::app_bsky::actor::ThreadViewPref<'a>>),
    #[serde(rename = "app.bsky.actor.defs#interestsPref")]
    InterestsPref(Box<crate::app_bsky::actor::InterestsPref<'a>>),
    #[serde(rename = "app.bsky.actor.defs#mutedWordsPref")]
    MutedWordsPref(Box<crate::app_bsky::actor::MutedWordsPref<'a>>),
    #[serde(rename = "app.bsky.actor.defs#hiddenPostsPref")]
    HiddenPostsPref(Box<crate::app_bsky::actor::HiddenPostsPref<'a>>),
    #[serde(rename = "app.bsky.actor.defs#bskyAppStatePref")]
    BskyAppStatePref(Box<crate::app_bsky::actor::BskyAppStatePref<'a>>),
    #[serde(rename = "app.bsky.actor.defs#labelersPref")]
    LabelersPref(Box<crate::app_bsky::actor::LabelersPref<'a>>),
    #[serde(rename = "app.bsky.actor.defs#postInteractionSettingsPref")]
    PostInteractionSettingsPref(
        Box<crate::app_bsky::actor::PostInteractionSettingsPref<'a>>,
    ),
    #[serde(rename = "app.bsky.actor.defs#verificationPrefs")]
    VerificationPrefs(Box<crate::app_bsky::actor::VerificationPrefs<'a>>),
}

pub type Preferences<'a> = Vec<PreferencesItem<'a>>;
#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic,
    bon::Builder
)]
#[serde(rename_all = "camelCase")]
pub struct ProfileAssociated<'a> {
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub activity_subscription: Option<
        crate::app_bsky::actor::ProfileAssociatedActivitySubscription<'a>,
    >,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub chat: Option<crate::app_bsky::actor::ProfileAssociatedChat<'a>>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    pub feedgens: Option<i64>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    pub labeler: Option<bool>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    pub lists: Option<i64>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    pub starter_packs: Option<i64>,
}

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic,
    bon::Builder
)]
#[serde(rename_all = "camelCase")]
pub struct ProfileAssociatedActivitySubscription<'a> {
    #[serde(borrow)]
    #[builder(into)]
    pub allow_subscriptions: jacquard_common::CowStr<'a>,
}

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic,
    bon::Builder
)]
#[serde(rename_all = "camelCase")]
pub struct ProfileAssociatedChat<'a> {
    #[serde(borrow)]
    #[builder(into)]
    pub allow_incoming: jacquard_common::CowStr<'a>,
}

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic,
    bon::Builder
)]
#[serde(rename_all = "camelCase")]
pub struct ProfileView<'a> {
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub associated: Option<crate::app_bsky::actor::ProfileAssociated<'a>>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub avatar: Option<jacquard_common::types::string::Uri<'a>>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    pub created_at: Option<jacquard_common::types::string::Datetime>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub description: Option<jacquard_common::CowStr<'a>>,
    #[serde(borrow)]
    pub did: jacquard_common::types::string::Did<'a>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub display_name: Option<jacquard_common::CowStr<'a>>,
    #[serde(borrow)]
    pub handle: jacquard_common::types::string::Handle<'a>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    pub indexed_at: Option<jacquard_common::types::string::Datetime>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub labels: Option<Vec<crate::com_atproto::label::Label<'a>>>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub pronouns: Option<jacquard_common::CowStr<'a>>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub status: Option<crate::app_bsky::actor::StatusView<'a>>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub verification: Option<crate::app_bsky::actor::VerificationState<'a>>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub viewer: Option<crate::app_bsky::actor::ViewerState<'a>>,
}

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic,
    bon::Builder
)]
#[serde(rename_all = "camelCase")]
pub struct ProfileViewBasic<'a> {
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub associated: Option<crate::app_bsky::actor::ProfileAssociated<'a>>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub avatar: Option<jacquard_common::types::string::Uri<'a>>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    pub created_at: Option<jacquard_common::types::string::Datetime>,
    #[serde(borrow)]
    pub did: jacquard_common::types::string::Did<'a>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub display_name: Option<jacquard_common::CowStr<'a>>,
    #[serde(borrow)]
    pub handle: jacquard_common::types::string::Handle<'a>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub labels: Option<Vec<crate::com_atproto::label::Label<'a>>>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub pronouns: Option<jacquard_common::CowStr<'a>>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub status: Option<crate::app_bsky::actor::StatusView<'a>>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub verification: Option<crate::app_bsky::actor::VerificationState<'a>>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub viewer: Option<crate::app_bsky::actor::ViewerState<'a>>,
}

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic,
    bon::Builder
)]
#[serde(rename_all = "camelCase")]
pub struct ProfileViewDetailed<'a> {
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub associated: Option<crate::app_bsky::actor::ProfileAssociated<'a>>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub avatar: Option<jacquard_common::types::string::Uri<'a>>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub banner: Option<jacquard_common::types::string::Uri<'a>>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    pub created_at: Option<jacquard_common::types::string::Datetime>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub description: Option<jacquard_common::CowStr<'a>>,
    #[serde(borrow)]
    pub did: jacquard_common::types::string::Did<'a>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub display_name: Option<jacquard_common::CowStr<'a>>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    pub followers_count: Option<i64>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    pub follows_count: Option<i64>,
    #[serde(borrow)]
    pub handle: jacquard_common::types::string::Handle<'a>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    pub indexed_at: Option<jacquard_common::types::string::Datetime>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub joined_via_starter_pack: Option<
        crate::app_bsky::graph::StarterPackViewBasic<'a>,
    >,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub labels: Option<Vec<crate::com_atproto::label::Label<'a>>>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub pinned_post: Option<crate::com_atproto::repo::strong_ref::StrongRef<'a>>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    pub posts_count: Option<i64>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub pronouns: Option<jacquard_common::CowStr<'a>>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub status: Option<crate::app_bsky::actor::StatusView<'a>>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub verification: Option<crate::app_bsky::actor::VerificationState<'a>>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub viewer: Option<crate::app_bsky::actor::ViewerState<'a>>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub website: Option<jacquard_common::types::string::Uri<'a>>,
}

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic,
    bon::Builder
)]
#[serde(rename_all = "camelCase")]
pub struct SavedFeed<'a> {
    #[serde(borrow)]
    #[builder(into)]
    pub id: jacquard_common::CowStr<'a>,
    pub pinned: bool,
    #[serde(borrow)]
    #[builder(into)]
    pub r#type: jacquard_common::CowStr<'a>,
    #[serde(borrow)]
    #[builder(into)]
    pub value: jacquard_common::CowStr<'a>,
}

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic,
    bon::Builder
)]
#[serde(rename_all = "camelCase")]
pub struct SavedFeedsPref<'a> {
    #[serde(borrow)]
    pub pinned: Vec<jacquard_common::types::string::AtUri<'a>>,
    #[serde(borrow)]
    pub saved: Vec<jacquard_common::types::string::AtUri<'a>>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    pub timeline_index: Option<i64>,
}

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic,
    bon::Builder
)]
#[serde(rename_all = "camelCase")]
pub struct SavedFeedsPrefV2<'a> {
    #[serde(borrow)]
    pub items: Vec<crate::app_bsky::actor::SavedFeed<'a>>,
}

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic,
    bon::Builder
)]
#[serde(rename_all = "camelCase")]
pub struct StatusView<'a> {
    /// An optional embed associated with the status.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub embed: Option<crate::app_bsky::embed::external::View<'a>>,
    /// The date when this status will expire. The application might choose to no longer return the status after expiration.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    pub expires_at: Option<jacquard_common::types::string::Datetime>,
    /// True if the status is not expired, false if it is expired. Only present if expiration was set.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    pub is_active: Option<bool>,
    #[serde(borrow)]
    pub record: jacquard_common::types::value::Data<'a>,
    /// The status for the account.
    #[serde(borrow)]
    #[builder(into)]
    pub status: jacquard_common::CowStr<'a>,
}

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic,
    bon::Builder
)]
#[serde(rename_all = "camelCase")]
pub struct ThreadViewPref<'a> {
    /// Show followed users at the top of all replies.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    pub prioritize_followed_users: Option<bool>,
    /// Sorting mode for threads.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub sort: Option<jacquard_common::CowStr<'a>>,
}

/// Preferences for how verified accounts appear in the app.
#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic,
    bon::Builder
)]
#[serde(rename_all = "camelCase")]
pub struct VerificationPrefs<'a> {
    /// Hide the blue check badges for verified accounts and trusted verifiers.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    pub hide_badges: Option<bool>,
}

/// Represents the verification information about the user this object is attached to.
#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic,
    bon::Builder
)]
#[serde(rename_all = "camelCase")]
pub struct VerificationState<'a> {
    /// The user's status as a trusted verifier.
    #[serde(borrow)]
    #[builder(into)]
    pub trusted_verifier_status: jacquard_common::CowStr<'a>,
    /// All verifications issued by trusted verifiers on behalf of this user. Verifications by untrusted verifiers are not included.
    #[serde(borrow)]
    pub verifications: Vec<crate::app_bsky::actor::VerificationView<'a>>,
    /// The user's status as a verified account.
    #[serde(borrow)]
    #[builder(into)]
    pub verified_status: jacquard_common::CowStr<'a>,
}

/// An individual verification for an associated subject.
#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic,
    bon::Builder
)]
#[serde(rename_all = "camelCase")]
pub struct VerificationView<'a> {
    /// Timestamp when the verification was created.
    pub created_at: jacquard_common::types::string::Datetime,
    /// True if the verification passes validation, otherwise false.
    pub is_valid: bool,
    /// The user who issued this verification.
    #[serde(borrow)]
    pub issuer: jacquard_common::types::string::Did<'a>,
    /// The AT-URI of the verification record.
    #[serde(borrow)]
    pub uri: jacquard_common::types::string::AtUri<'a>,
}

/// Metadata about the requesting account's relationship with the subject account. Only has meaningful content for authed requests.
#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic,
    bon::Builder
)]
#[serde(rename_all = "camelCase")]
pub struct ViewerState<'a> {
    /// This property is present only in selected cases, as an optimization.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub activity_subscription: Option<
        crate::app_bsky::notification::ActivitySubscription<'a>,
    >,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    pub blocked_by: Option<bool>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub blocking: Option<jacquard_common::types::string::AtUri<'a>>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub blocking_by_list: Option<crate::app_bsky::graph::ListViewBasic<'a>>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub followed_by: Option<jacquard_common::types::string::AtUri<'a>>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub following: Option<jacquard_common::types::string::AtUri<'a>>,
    /// This property is present only in selected cases, as an optimization.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub known_followers: Option<crate::app_bsky::actor::KnownFollowers<'a>>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    pub muted: Option<bool>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub muted_by_list: Option<crate::app_bsky::graph::ListViewBasic<'a>>,
}