// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: app.bsky.bookmark.createBookmark
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    bon::Builder,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
#[builder(start_fn = new)]
pub struct CreateBookmark<'a> {
    #[serde(borrow)]
    pub cid: jacquard_common::types::string::Cid<'a>,
    #[serde(borrow)]
    pub uri: jacquard_common::types::string::AtUri<'a>,
    #[serde(flatten)]
    #[serde(borrow)]
    #[builder(default)]
    pub extra_data: ::std::collections::BTreeMap<
        ::jacquard_common::smol_str::SmolStr,
        ::jacquard_common::types::value::Data<'a>,
    >,
}

#[jacquard_derive::open_union]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    thiserror::Error,
    miette::Diagnostic,
    jacquard_derive::IntoStatic
)]
#[serde(tag = "error", content = "message")]
#[serde(bound(deserialize = "'de: 'a"))]
pub enum CreateBookmarkError<'a> {
    ///The URI to be bookmarked is for an unsupported collection.
    #[serde(rename = "UnsupportedCollection")]
    UnsupportedCollection(std::option::Option<String>),
}

impl std::fmt::Display for CreateBookmarkError<'_> {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Self::UnsupportedCollection(msg) => {
                write!(f, "UnsupportedCollection")?;
                if let Some(msg) = msg {
                    write!(f, ": {}", msg)?;
                }
                Ok(())
            }
            Self::Unknown(err) => write!(f, "Unknown error: {:?}", err),
        }
    }
}

///Response type for
///app.bsky.bookmark.createBookmark
pub struct CreateBookmarkResponse;
impl jacquard_common::xrpc::XrpcResp for CreateBookmarkResponse {
    const NSID: &'static str = "app.bsky.bookmark.createBookmark";
    const ENCODING: &'static str = "application/json";
    type Output<'de> = ();
    type Err<'de> = CreateBookmarkError<'de>;
}

impl<'a> jacquard_common::xrpc::XrpcRequest for CreateBookmark<'a> {
    const NSID: &'static str = "app.bsky.bookmark.createBookmark";
    const METHOD: jacquard_common::xrpc::XrpcMethod = jacquard_common::xrpc::XrpcMethod::Procedure(
        "application/json",
    );
    type Response = CreateBookmarkResponse;
}

///Endpoint type for
///app.bsky.bookmark.createBookmark
pub struct CreateBookmarkRequest;
impl jacquard_common::xrpc::XrpcEndpoint for CreateBookmarkRequest {
    const PATH: &'static str = "/xrpc/app.bsky.bookmark.createBookmark";
    const METHOD: jacquard_common::xrpc::XrpcMethod = jacquard_common::xrpc::XrpcMethod::Procedure(
        "application/json",
    );
    type Request<'de> = CreateBookmark<'de>;
    type Response = CreateBookmarkResponse;
}