// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: app.bsky.unspecced.defs
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

pub mod get_age_assurance_state;
pub mod get_config;
pub mod get_onboarding_suggested_starter_packs;
pub mod get_onboarding_suggested_starter_packs_skeleton;
pub mod get_popular_feed_generators;
pub mod get_post_thread_other_v2;
pub mod get_post_thread_v2;
pub mod get_suggested_feeds;
pub mod get_suggested_feeds_skeleton;
pub mod get_suggested_starter_packs;
pub mod get_suggested_starter_packs_skeleton;
pub mod get_suggested_users;
pub mod get_suggested_users_skeleton;
pub mod get_suggestions_skeleton;
pub mod get_tagged_suggestions;
pub mod get_trending_topics;
pub mod get_trends;
pub mod get_trends_skeleton;
pub mod init_age_assurance;
pub mod search_actors_skeleton;
pub mod search_posts_skeleton;
pub mod search_starter_packs_skeleton;

///Object used to store age assurance data in stash.
#[jacquard_derive::lexicon]
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct AgeAssuranceEvent<'a> {
    ///The unique identifier for this instance of the age assurance flow, in UUID format.
    #[serde(borrow)]
    pub attempt_id: jacquard_common::CowStr<'a>,
    ///The IP address used when completing the AA flow.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub complete_ip: std::option::Option<jacquard_common::CowStr<'a>>,
    ///The user agent used when completing the AA flow.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub complete_ua: std::option::Option<jacquard_common::CowStr<'a>>,
    ///The date and time of this write operation.
    pub created_at: jacquard_common::types::string::Datetime,
    ///The email used for AA.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub email: std::option::Option<jacquard_common::CowStr<'a>>,
    ///The IP address used when initiating the AA flow.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub init_ip: std::option::Option<jacquard_common::CowStr<'a>>,
    ///The user agent used when initiating the AA flow.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub init_ua: std::option::Option<jacquard_common::CowStr<'a>>,
    ///The status of the age assurance process.
    #[serde(borrow)]
    pub status: jacquard_common::CowStr<'a>,
}

impl jacquard_common::IntoStatic for AgeAssuranceEvent<'_> {
    type Output = AgeAssuranceEvent<'static>;
    fn into_static(self) -> Self::Output {
        AgeAssuranceEvent {
            attempt_id: self.attempt_id.into_static(),
            complete_ip: self.complete_ip.into_static(),
            complete_ua: self.complete_ua.into_static(),
            created_at: self.created_at.into_static(),
            email: self.email.into_static(),
            init_ip: self.init_ip.into_static(),
            init_ua: self.init_ua.into_static(),
            status: self.status.into_static(),
            extra_data: self.extra_data.into_static(),
        }
    }
}

///The computed state of the age assurance process, returned to the user in question on certain authenticated requests.
#[jacquard_derive::lexicon]
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct AgeAssuranceState<'a> {
    ///The timestamp when this state was last updated.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub last_initiated_at: std::option::Option<jacquard_common::types::string::Datetime>,
    ///The status of the age assurance process.
    #[serde(borrow)]
    pub status: jacquard_common::CowStr<'a>,
}

impl jacquard_common::IntoStatic for AgeAssuranceState<'_> {
    type Output = AgeAssuranceState<'static>;
    fn into_static(self) -> Self::Output {
        AgeAssuranceState {
            last_initiated_at: self.last_initiated_at.into_static(),
            status: self.status.into_static(),
            extra_data: self.extra_data.into_static(),
        }
    }
}

#[jacquard_derive::lexicon]
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct SkeletonSearchActor<'a> {
    #[serde(borrow)]
    pub did: jacquard_common::types::string::Did<'a>,
}

impl jacquard_common::IntoStatic for SkeletonSearchActor<'_> {
    type Output = SkeletonSearchActor<'static>;
    fn into_static(self) -> Self::Output {
        SkeletonSearchActor {
            did: self.did.into_static(),
            extra_data: self.extra_data.into_static(),
        }
    }
}

#[jacquard_derive::lexicon]
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct SkeletonSearchPost<'a> {
    #[serde(borrow)]
    pub uri: jacquard_common::types::string::AtUri<'a>,
}

impl jacquard_common::IntoStatic for SkeletonSearchPost<'_> {
    type Output = SkeletonSearchPost<'static>;
    fn into_static(self) -> Self::Output {
        SkeletonSearchPost {
            uri: self.uri.into_static(),
            extra_data: self.extra_data.into_static(),
        }
    }
}

#[jacquard_derive::lexicon]
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct SkeletonSearchStarterPack<'a> {
    #[serde(borrow)]
    pub uri: jacquard_common::types::string::AtUri<'a>,
}

impl jacquard_common::IntoStatic for SkeletonSearchStarterPack<'_> {
    type Output = SkeletonSearchStarterPack<'static>;
    fn into_static(self) -> Self::Output {
        SkeletonSearchStarterPack {
            uri: self.uri.into_static(),
            extra_data: self.extra_data.into_static(),
        }
    }
}

#[jacquard_derive::lexicon]
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct SkeletonTrend<'a> {
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub category: std::option::Option<jacquard_common::CowStr<'a>>,
    #[serde(borrow)]
    pub dids: Vec<jacquard_common::types::string::Did<'a>>,
    #[serde(borrow)]
    pub display_name: jacquard_common::CowStr<'a>,
    #[serde(borrow)]
    pub link: jacquard_common::CowStr<'a>,
    pub post_count: i64,
    pub started_at: jacquard_common::types::string::Datetime,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub status: std::option::Option<jacquard_common::CowStr<'a>>,
    #[serde(borrow)]
    pub topic: jacquard_common::CowStr<'a>,
}

impl jacquard_common::IntoStatic for SkeletonTrend<'_> {
    type Output = SkeletonTrend<'static>;
    fn into_static(self) -> Self::Output {
        SkeletonTrend {
            category: self.category.into_static(),
            dids: self.dids.into_static(),
            display_name: self.display_name.into_static(),
            link: self.link.into_static(),
            post_count: self.post_count.into_static(),
            started_at: self.started_at.into_static(),
            status: self.status.into_static(),
            topic: self.topic.into_static(),
            extra_data: self.extra_data.into_static(),
        }
    }
}

#[jacquard_derive::lexicon]
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct ThreadItemBlocked<'a> {
    #[serde(borrow)]
    pub author: crate::app_bsky::feed::BlockedAuthor<'a>,
}

impl jacquard_common::IntoStatic for ThreadItemBlocked<'_> {
    type Output = ThreadItemBlocked<'static>;
    fn into_static(self) -> Self::Output {
        ThreadItemBlocked {
            author: self.author.into_static(),
            extra_data: self.extra_data.into_static(),
        }
    }
}

#[jacquard_derive::lexicon]
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct ThreadItemNoUnauthenticated<'a> {}
impl jacquard_common::IntoStatic for ThreadItemNoUnauthenticated<'_> {
    type Output = ThreadItemNoUnauthenticated<'static>;
    fn into_static(self) -> Self::Output {
        ThreadItemNoUnauthenticated {
            extra_data: self.extra_data.into_static(),
        }
    }
}

#[jacquard_derive::lexicon]
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct ThreadItemNotFound<'a> {}
impl jacquard_common::IntoStatic for ThreadItemNotFound<'_> {
    type Output = ThreadItemNotFound<'static>;
    fn into_static(self) -> Self::Output {
        ThreadItemNotFound {
            extra_data: self.extra_data.into_static(),
        }
    }
}

#[jacquard_derive::lexicon]
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct ThreadItemPost<'a> {
    ///The threadgate created by the author indicates this post as a reply to be hidden for everyone consuming the thread.
    pub hidden_by_threadgate: bool,
    ///This post has more parents that were not present in the response. This is just a boolean, without the number of parents.
    pub more_parents: bool,
    ///This post has more replies that were not present in the response. This is a numeric value, which is best-effort and might not be accurate.
    pub more_replies: i64,
    ///This is by an account muted by the viewer requesting it.
    pub muted_by_viewer: bool,
    ///This post is part of a contiguous thread by the OP from the thread root. Many different OP threads can happen in the same thread.
    pub op_thread: bool,
    #[serde(borrow)]
    pub post: crate::app_bsky::feed::PostView<'a>,
}

impl jacquard_common::IntoStatic for ThreadItemPost<'_> {
    type Output = ThreadItemPost<'static>;
    fn into_static(self) -> Self::Output {
        ThreadItemPost {
            hidden_by_threadgate: self.hidden_by_threadgate.into_static(),
            more_parents: self.more_parents.into_static(),
            more_replies: self.more_replies.into_static(),
            muted_by_viewer: self.muted_by_viewer.into_static(),
            op_thread: self.op_thread.into_static(),
            post: self.post.into_static(),
            extra_data: self.extra_data.into_static(),
        }
    }
}

#[jacquard_derive::lexicon]
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct TrendView<'a> {
    #[serde(borrow)]
    pub actors: Vec<crate::app_bsky::actor::ProfileViewBasic<'a>>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub category: std::option::Option<jacquard_common::CowStr<'a>>,
    #[serde(borrow)]
    pub display_name: jacquard_common::CowStr<'a>,
    #[serde(borrow)]
    pub link: jacquard_common::CowStr<'a>,
    pub post_count: i64,
    pub started_at: jacquard_common::types::string::Datetime,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub status: std::option::Option<jacquard_common::CowStr<'a>>,
    #[serde(borrow)]
    pub topic: jacquard_common::CowStr<'a>,
}

impl jacquard_common::IntoStatic for TrendView<'_> {
    type Output = TrendView<'static>;
    fn into_static(self) -> Self::Output {
        TrendView {
            actors: self.actors.into_static(),
            category: self.category.into_static(),
            display_name: self.display_name.into_static(),
            link: self.link.into_static(),
            post_count: self.post_count.into_static(),
            started_at: self.started_at.into_static(),
            status: self.status.into_static(),
            topic: self.topic.into_static(),
            extra_data: self.extra_data.into_static(),
        }
    }
}

#[jacquard_derive::lexicon]
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct TrendingTopic<'a> {
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub description: std::option::Option<jacquard_common::CowStr<'a>>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub display_name: std::option::Option<jacquard_common::CowStr<'a>>,
    #[serde(borrow)]
    pub link: jacquard_common::CowStr<'a>,
    #[serde(borrow)]
    pub topic: jacquard_common::CowStr<'a>,
}

impl jacquard_common::IntoStatic for TrendingTopic<'_> {
    type Output = TrendingTopic<'static>;
    fn into_static(self) -> Self::Output {
        TrendingTopic {
            description: self.description.into_static(),
            display_name: self.display_name.into_static(),
            link: self.link.into_static(),
            topic: self.topic.into_static(),
            extra_data: self.extra_data.into_static(),
        }
    }
}