// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: app.bsky.labeler.service
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

///A declaration of the existence of labeler service.
#[jacquard_derive::lexicon]
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct Service<'a> {
    pub created_at: jacquard_common::types::string::Datetime,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub labels: std::option::Option<ServiceRecordLabels<'a>>,
    #[serde(borrow)]
    pub policies: crate::app_bsky::labeler::LabelerPolicies<'a>,
    ///The set of report reason 'codes' which are in-scope for this service to review and action. These usually align to policy categories. If not defined (distinct from empty array), all reason types are allowed.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub reason_types: std::option::Option<
        Vec<crate::com_atproto::moderation::ReasonType<'a>>,
    >,
    ///Set of record types (collection NSIDs) which can be reported to this service. If not defined (distinct from empty array), default is any record type.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub subject_collections: std::option::Option<
        Vec<jacquard_common::types::string::Nsid<'a>>,
    >,
    ///The set of subject types (account, record, etc) this service accepts reports on.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub subject_types: std::option::Option<
        Vec<crate::com_atproto::moderation::SubjectType<'a>>,
    >,
}

#[jacquard_derive::open_union]
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(tag = "$type")]
#[serde(bound(deserialize = "'de: 'a"))]
pub enum ServiceRecordLabels<'a> {
    #[serde(rename = "com.atproto.label.defs#selfLabels")]
    DefsSelfLabels(Box<crate::com_atproto::label::SelfLabels<'a>>),
}

impl jacquard_common::IntoStatic for ServiceRecordLabels<'_> {
    type Output = ServiceRecordLabels<'static>;
    fn into_static(self) -> Self::Output {
        match self {
            ServiceRecordLabels::DefsSelfLabels(v) => {
                ServiceRecordLabels::DefsSelfLabels(v.into_static())
            }
            ServiceRecordLabels::Unknown(v) => {
                ServiceRecordLabels::Unknown(v.into_static())
            }
        }
    }
}

impl jacquard_common::types::collection::Collection for Service<'_> {
    const NSID: &'static str = "app.bsky.labeler.service";
}

impl jacquard_common::IntoStatic for Service<'_> {
    type Output = Service<'static>;
    fn into_static(self) -> Self::Output {
        Service {
            created_at: self.created_at.into_static(),
            labels: self.labels.into_static(),
            policies: self.policies.into_static(),
            reason_types: self.reason_types.into_static(),
            subject_collections: self.subject_collections.into_static(),
            subject_types: self.subject_types.into_static(),
            extra_data: self.extra_data.into_static(),
        }
    }
}