// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: app.bsky.notification.listNotifications
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    bon::Builder
)]
#[builder(start_fn = new)]
#[serde(rename_all = "camelCase")]
pub struct ListNotifications<'a> {
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    #[builder(into)]
    pub cursor: std::option::Option<jacquard_common::CowStr<'a>>,
    ///(default: 50, min: 1, max: 100)
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub limit: std::option::Option<i64>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub priority: std::option::Option<bool>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub reasons: std::option::Option<Vec<jacquard_common::CowStr<'a>>>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub seen_at: std::option::Option<jacquard_common::types::string::Datetime>,
}

impl jacquard_common::IntoStatic for ListNotifications<'_> {
    type Output = ListNotifications<'static>;
    fn into_static(self) -> Self::Output {
        ListNotifications {
            cursor: self.cursor.into_static(),
            limit: self.limit.into_static(),
            priority: self.priority.into_static(),
            reasons: self.reasons.into_static(),
            seen_at: self.seen_at.into_static(),
        }
    }
}

#[jacquard_derive::lexicon]
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct ListNotificationsOutput<'a> {
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub cursor: std::option::Option<jacquard_common::CowStr<'a>>,
    #[serde(borrow)]
    pub notifications: Vec<jacquard_common::types::value::Data<'a>>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub priority: std::option::Option<bool>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub seen_at: std::option::Option<jacquard_common::types::string::Datetime>,
}

impl jacquard_common::IntoStatic for ListNotificationsOutput<'_> {
    type Output = ListNotificationsOutput<'static>;
    fn into_static(self) -> Self::Output {
        ListNotificationsOutput {
            cursor: self.cursor.into_static(),
            notifications: self.notifications.into_static(),
            priority: self.priority.into_static(),
            seen_at: self.seen_at.into_static(),
            extra_data: self.extra_data.into_static(),
        }
    }
}

impl<'de> jacquard_common::types::xrpc::XrpcRequest<'de> for ListNotifications<'de> {
    const NSID: &'static str = "app.bsky.notification.listNotifications";
    const METHOD: jacquard_common::types::xrpc::XrpcMethod = jacquard_common::types::xrpc::XrpcMethod::Query;
    const OUTPUT_ENCODING: &'static str = "application/json";
    type Output = ListNotificationsOutput<'de>;
    type Err = jacquard_common::types::xrpc::GenericError<'de>;
}

#[jacquard_derive::lexicon]
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct Notification<'a> {
    #[serde(borrow)]
    pub author: crate::app_bsky::actor::ProfileView<'a>,
    #[serde(borrow)]
    pub cid: jacquard_common::types::string::Cid<'a>,
    pub indexed_at: jacquard_common::types::string::Datetime,
    pub is_read: bool,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub labels: std::option::Option<Vec<crate::com_atproto::label::Label<'a>>>,
    ///The reason why this notification was delivered - e.g. your post was liked, or you received a new follower.
    #[serde(borrow)]
    pub reason: jacquard_common::CowStr<'a>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub reason_subject: std::option::Option<jacquard_common::types::string::AtUri<'a>>,
    #[serde(borrow)]
    pub record: jacquard_common::types::value::Data<'a>,
    #[serde(borrow)]
    pub uri: jacquard_common::types::string::AtUri<'a>,
}

impl jacquard_common::IntoStatic for Notification<'_> {
    type Output = Notification<'static>;
    fn into_static(self) -> Self::Output {
        Notification {
            author: self.author.into_static(),
            cid: self.cid.into_static(),
            indexed_at: self.indexed_at.into_static(),
            is_read: self.is_read.into_static(),
            labels: self.labels.into_static(),
            reason: self.reason.into_static(),
            reason_subject: self.reason_subject.into_static(),
            record: self.record.into_static(),
            uri: self.uri.into_static(),
            extra_data: self.extra_data.into_static(),
        }
    }
}