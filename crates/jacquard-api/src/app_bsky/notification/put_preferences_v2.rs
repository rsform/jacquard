// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: app.bsky.notification.putPreferencesV2
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    bon::Builder
)]
#[serde(rename_all = "camelCase")]
#[builder(start_fn = new)]
pub struct PutPreferencesV2<'a> {
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub chat: std::option::Option<crate::app_bsky::notification::ChatPreference<'a>>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub follow: std::option::Option<
        crate::app_bsky::notification::FilterablePreference<'a>,
    >,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub like: std::option::Option<
        crate::app_bsky::notification::FilterablePreference<'a>,
    >,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub like_via_repost: std::option::Option<
        crate::app_bsky::notification::FilterablePreference<'a>,
    >,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub mention: std::option::Option<
        crate::app_bsky::notification::FilterablePreference<'a>,
    >,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub quote: std::option::Option<
        crate::app_bsky::notification::FilterablePreference<'a>,
    >,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub reply: std::option::Option<
        crate::app_bsky::notification::FilterablePreference<'a>,
    >,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub repost: std::option::Option<
        crate::app_bsky::notification::FilterablePreference<'a>,
    >,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub repost_via_repost: std::option::Option<
        crate::app_bsky::notification::FilterablePreference<'a>,
    >,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub starterpack_joined: std::option::Option<
        crate::app_bsky::notification::Preference<'a>,
    >,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub subscribed_post: std::option::Option<
        crate::app_bsky::notification::Preference<'a>,
    >,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub unverified: std::option::Option<crate::app_bsky::notification::Preference<'a>>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub verified: std::option::Option<crate::app_bsky::notification::Preference<'a>>,
    #[serde(flatten)]
    #[serde(borrow)]
    #[builder(default)]
    pub extra_data: ::std::collections::BTreeMap<
        ::jacquard_common::smol_str::SmolStr,
        ::jacquard_common::types::value::Data<'a>,
    >,
}

impl jacquard_common::IntoStatic for PutPreferencesV2<'_> {
    type Output = PutPreferencesV2<'static>;
    fn into_static(self) -> Self::Output {
        PutPreferencesV2 {
            chat: self.chat.into_static(),
            follow: self.follow.into_static(),
            like: self.like.into_static(),
            like_via_repost: self.like_via_repost.into_static(),
            mention: self.mention.into_static(),
            quote: self.quote.into_static(),
            reply: self.reply.into_static(),
            repost: self.repost.into_static(),
            repost_via_repost: self.repost_via_repost.into_static(),
            starterpack_joined: self.starterpack_joined.into_static(),
            subscribed_post: self.subscribed_post.into_static(),
            unverified: self.unverified.into_static(),
            verified: self.verified.into_static(),
            extra_data: self.extra_data.into_static(),
        }
    }
}

#[jacquard_derive::lexicon]
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct PutPreferencesV2Output<'a> {
    #[serde(borrow)]
    pub preferences: crate::app_bsky::notification::Preferences<'a>,
}

impl jacquard_common::IntoStatic for PutPreferencesV2Output<'_> {
    type Output = PutPreferencesV2Output<'static>;
    fn into_static(self) -> Self::Output {
        PutPreferencesV2Output {
            preferences: self.preferences.into_static(),
            extra_data: self.extra_data.into_static(),
        }
    }
}

///Response type for
///app.bsky.notification.putPreferencesV2
pub struct PutPreferencesV2Response;
impl jacquard_common::xrpc::XrpcResp for PutPreferencesV2Response {
    const NSID: &'static str = "app.bsky.notification.putPreferencesV2";
    const ENCODING: &'static str = "application/json";
    type Output<'de> = PutPreferencesV2Output<'de>;
    type Err<'de> = jacquard_common::xrpc::GenericError<'de>;
}

impl<'de> jacquard_common::xrpc::XrpcRequest<'de> for PutPreferencesV2<'de> {
    const NSID: &'static str = "app.bsky.notification.putPreferencesV2";
    const METHOD: jacquard_common::xrpc::XrpcMethod = jacquard_common::xrpc::XrpcMethod::Procedure(
        "application/json",
    );
    type Response = PutPreferencesV2Response;
}