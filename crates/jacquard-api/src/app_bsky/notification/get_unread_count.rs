// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: app.bsky.notification.getUnreadCount
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    bon::Builder
)]
#[builder(start_fn = new)]
#[serde(rename_all = "camelCase")]
pub struct GetUnreadCount {
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub priority: std::option::Option<bool>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub seen_at: std::option::Option<jacquard_common::types::string::Datetime>,
}

impl jacquard_common::IntoStatic for GetUnreadCount {
    type Output = GetUnreadCount;
    fn into_static(self) -> Self::Output {
        self
    }
}

#[jacquard_derive::lexicon]
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct GetUnreadCountOutput<'a> {
    pub count: i64,
}

impl jacquard_common::IntoStatic for GetUnreadCountOutput<'_> {
    type Output = GetUnreadCountOutput<'static>;
    fn into_static(self) -> Self::Output {
        GetUnreadCountOutput {
            count: self.count.into_static(),
            extra_data: self.extra_data.into_static(),
        }
    }
}

impl<'de> jacquard_common::types::xrpc::XrpcRequest<'de> for GetUnreadCount {
    const NSID: &'static str = "app.bsky.notification.getUnreadCount";
    const METHOD: jacquard_common::types::xrpc::XrpcMethod = jacquard_common::types::xrpc::XrpcMethod::Query;
    const OUTPUT_ENCODING: &'static str = "application/json";
    type Output = GetUnreadCountOutput<'de>;
    type Err = jacquard_common::types::xrpc::GenericError<'de>;
}