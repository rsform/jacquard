// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: app.bsky.notification.getUnreadCount
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    bon::Builder,
    jacquard_derive::IntoStatic
)]
#[builder(start_fn = new)]
#[serde(rename_all = "camelCase")]
pub struct GetUnreadCount {
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub priority: std::option::Option<bool>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub seen_at: std::option::Option<jacquard_common::types::string::Datetime>,
}

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
pub struct GetUnreadCountOutput<'a> {
    pub count: i64,
}

///Response type for
///app.bsky.notification.getUnreadCount
pub struct GetUnreadCountResponse;
impl jacquard_common::xrpc::XrpcResp for GetUnreadCountResponse {
    const NSID: &'static str = "app.bsky.notification.getUnreadCount";
    const ENCODING: &'static str = "application/json";
    type Output<'de> = GetUnreadCountOutput<'de>;
    type Err<'de> = jacquard_common::xrpc::GenericError<'de>;
}

impl<'de> jacquard_common::xrpc::XrpcRequest<'de> for GetUnreadCount {
    const NSID: &'static str = "app.bsky.notification.getUnreadCount";
    const METHOD: jacquard_common::xrpc::XrpcMethod = jacquard_common::xrpc::XrpcMethod::Query;
    type Response = GetUnreadCountResponse;
}