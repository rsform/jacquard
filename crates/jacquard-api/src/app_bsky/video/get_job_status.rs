// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: app.bsky.video.getJobStatus
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    bon::Builder
)]
#[builder(start_fn = new)]
#[serde(rename_all = "camelCase")]
pub struct GetJobStatus<'a> {
    #[serde(borrow)]
    #[builder(into)]
    pub job_id: jacquard_common::CowStr<'a>,
}

impl jacquard_common::IntoStatic for GetJobStatus<'_> {
    type Output = GetJobStatus<'static>;
    fn into_static(self) -> Self::Output {
        GetJobStatus {
            job_id: self.job_id.into_static(),
        }
    }
}

#[jacquard_derive::lexicon]
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct GetJobStatusOutput<'a> {
    #[serde(borrow)]
    pub job_status: crate::app_bsky::video::JobStatus<'a>,
}

impl jacquard_common::IntoStatic for GetJobStatusOutput<'_> {
    type Output = GetJobStatusOutput<'static>;
    fn into_static(self) -> Self::Output {
        GetJobStatusOutput {
            job_status: self.job_status.into_static(),
            extra_data: self.extra_data.into_static(),
        }
    }
}

impl jacquard_common::types::xrpc::XrpcRequest for GetJobStatus<'_> {
    const NSID: &'static str = "app.bsky.video.getJobStatus";
    const METHOD: jacquard_common::types::xrpc::XrpcMethod = jacquard_common::types::xrpc::XrpcMethod::Query;
    const OUTPUT_ENCODING: &'static str = "application/json";
    type Output<'de> = GetJobStatusOutput<'de>;
    type Err<'de> = jacquard_common::types::xrpc::GenericError<'de>;
}