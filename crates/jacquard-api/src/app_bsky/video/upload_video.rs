// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: app.bsky.video.uploadVideo
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct UploadVideo {
    pub body: bytes::Bytes,
}

impl jacquard_common::IntoStatic for UploadVideo {
    type Output = UploadVideo;
    fn into_static(self) -> Self::Output {
        self
    }
}

#[jacquard_derive::lexicon]
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct UploadVideoOutput<'a> {
    #[serde(borrow)]
    pub job_status: crate::app_bsky::video::JobStatus<'a>,
}

impl jacquard_common::IntoStatic for UploadVideoOutput<'_> {
    type Output = UploadVideoOutput<'static>;
    fn into_static(self) -> Self::Output {
        UploadVideoOutput {
            job_status: self.job_status.into_static(),
            extra_data: self.extra_data.into_static(),
        }
    }
}

impl jacquard_common::types::xrpc::XrpcRequest for UploadVideo {
    const NSID: &'static str = "app.bsky.video.uploadVideo";
    const METHOD: jacquard_common::types::xrpc::XrpcMethod = jacquard_common::types::xrpc::XrpcMethod::Procedure(
        "video/mp4",
    );
    const OUTPUT_ENCODING: &'static str = "application/json";
    type Output<'de> = UploadVideoOutput<'de>;
    type Err<'de> = jacquard_common::types::xrpc::GenericError<'de>;
    fn encode_body(&self) -> Result<Vec<u8>, jacquard_common::types::xrpc::EncodeError> {
        Ok(self.body.to_vec())
    }
}