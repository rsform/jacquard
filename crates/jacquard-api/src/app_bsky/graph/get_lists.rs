// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: app.bsky.graph.getLists
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq, bon::Builder)]
#[builder(start_fn = new)]
#[serde(rename_all = "camelCase")]
pub struct GetLists<'a> {
    #[serde(borrow)]
    pub actor: jacquard_common::types::ident::AtIdentifier<'a>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    #[builder(into)]
    pub cursor: std::option::Option<jacquard_common::CowStr<'a>>,
    ///(default: 50, min: 1, max: 100)
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub limit: std::option::Option<i64>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub purposes: std::option::Option<Vec<jacquard_common::CowStr<'a>>>,
}

impl jacquard_common::IntoStatic for GetLists<'_> {
    type Output = GetLists<'static>;
    fn into_static(self) -> Self::Output {
        GetLists {
            actor: self.actor.into_static(),
            cursor: self.cursor.into_static(),
            limit: self.limit.into_static(),
            purposes: self.purposes.into_static(),
        }
    }
}

#[jacquard_derive::lexicon]
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct GetListsOutput<'a> {
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub cursor: std::option::Option<jacquard_common::CowStr<'a>>,
    #[serde(borrow)]
    pub lists: Vec<crate::app_bsky::graph::ListView<'a>>,
}

impl jacquard_common::IntoStatic for GetListsOutput<'_> {
    type Output = GetListsOutput<'static>;
    fn into_static(self) -> Self::Output {
        GetListsOutput {
            cursor: self.cursor.into_static(),
            lists: self.lists.into_static(),
            extra_data: self.extra_data.into_static(),
        }
    }
}

///Response type for
///app.bsky.graph.getLists
pub struct GetListsResponse;
impl<'de> jacquard_common::types::xrpc::XrpcResp<'de> for GetListsResponse {
    const ENCODING: &'static str = "application/json";
    type Output = GetListsOutput<'de>;
    type Err = jacquard_common::types::xrpc::GenericError<'de>;
}

impl<'de> jacquard_common::types::xrpc::XrpcRequest<'de> for GetLists<'de> {
    const NSID: &'static str = "app.bsky.graph.getLists";
    const METHOD: jacquard_common::types::xrpc::XrpcMethod =
        jacquard_common::types::xrpc::XrpcMethod::Query;
    type Response<'de1> = GetListsResponse;
}
