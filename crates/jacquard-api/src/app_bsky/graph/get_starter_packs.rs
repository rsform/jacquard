// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: app.bsky.graph.getStarterPacks
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq, bon::Builder)]
#[builder(start_fn = new)]
#[serde(rename_all = "camelCase")]
pub struct GetStarterPacks<'a> {
    #[serde(borrow)]
    pub uris: Vec<jacquard_common::types::string::AtUri<'a>>,
}

impl jacquard_common::IntoStatic for GetStarterPacks<'_> {
    type Output = GetStarterPacks<'static>;
    fn into_static(self) -> Self::Output {
        GetStarterPacks {
            uris: self.uris.into_static(),
        }
    }
}

#[jacquard_derive::lexicon]
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct GetStarterPacksOutput<'a> {
    #[serde(borrow)]
    pub starter_packs: Vec<crate::app_bsky::graph::StarterPackViewBasic<'a>>,
}

impl jacquard_common::IntoStatic for GetStarterPacksOutput<'_> {
    type Output = GetStarterPacksOutput<'static>;
    fn into_static(self) -> Self::Output {
        GetStarterPacksOutput {
            starter_packs: self.starter_packs.into_static(),
            extra_data: self.extra_data.into_static(),
        }
    }
}

///Response type for
///app.bsky.graph.getStarterPacks
pub struct GetStarterPacksResponse;
impl<'de> jacquard_common::types::xrpc::XrpcResp<'de> for GetStarterPacksResponse {
    const ENCODING: &'static str = "application/json";
    type Output = GetStarterPacksOutput<'de>;
    type Err = jacquard_common::types::xrpc::GenericError<'de>;
}

impl<'de> jacquard_common::types::xrpc::XrpcRequest<'de> for GetStarterPacks<'de> {
    const NSID: &'static str = "app.bsky.graph.getStarterPacks";
    const METHOD: jacquard_common::types::xrpc::XrpcMethod =
        jacquard_common::types::xrpc::XrpcMethod::Query;
    type Response<'de1> = GetStarterPacksResponse;
}
