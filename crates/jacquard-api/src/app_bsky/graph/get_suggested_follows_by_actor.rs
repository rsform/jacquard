// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: app.bsky.graph.getSuggestedFollowsByActor
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct GetSuggestedFollowsByActor<'a> {
    #[serde(borrow)]
    pub actor: jacquard_common::types::ident::AtIdentifier<'a>,
}

impl jacquard_common::IntoStatic for GetSuggestedFollowsByActor<'_> {
    type Output = GetSuggestedFollowsByActor<'static>;
    fn into_static(self) -> Self::Output {
        GetSuggestedFollowsByActor {
            actor: self.actor.into_static(),
        }
    }
}

#[jacquard_derive::lexicon]
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct GetSuggestedFollowsByActorOutput<'a> {
    ///If true, response has fallen-back to generic results, and is not scoped using relativeToDid
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub is_fallback: std::option::Option<bool>,
    ///Snowflake for this recommendation, use when submitting recommendation events.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub rec_id: std::option::Option<i64>,
    #[serde(borrow)]
    pub suggestions: Vec<crate::app_bsky::actor::ProfileView<'a>>,
}

impl jacquard_common::IntoStatic for GetSuggestedFollowsByActorOutput<'_> {
    type Output = GetSuggestedFollowsByActorOutput<'static>;
    fn into_static(self) -> Self::Output {
        GetSuggestedFollowsByActorOutput {
            is_fallback: self.is_fallback.into_static(),
            rec_id: self.rec_id.into_static(),
            suggestions: self.suggestions.into_static(),
            extra_data: self.extra_data.into_static(),
        }
    }
}

impl jacquard_common::types::xrpc::XrpcRequest for GetSuggestedFollowsByActor<'_> {
    const NSID: &'static str = "app.bsky.graph.getSuggestedFollowsByActor";
    const METHOD: jacquard_common::types::xrpc::XrpcMethod = jacquard_common::types::xrpc::XrpcMethod::Query;
    const OUTPUT_ENCODING: &'static str = "application/json";
    type Output<'de> = GetSuggestedFollowsByActorOutput<'de>;
    type Err<'de> = jacquard_common::types::xrpc::GenericError<'de>;
}