// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: app.bsky.graph.getListsWithMembership
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

///A list and an optional list item indicating membership of a target user to that list.
#[jacquard_derive::lexicon]
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct ListWithMembership<'a> {
    #[serde(borrow)]
    pub list: crate::app_bsky::graph::ListView<'a>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub list_item: std::option::Option<crate::app_bsky::graph::ListItemView<'a>>,
}

impl jacquard_common::IntoStatic for ListWithMembership<'_> {
    type Output = ListWithMembership<'static>;
    fn into_static(self) -> Self::Output {
        ListWithMembership {
            list: self.list.into_static(),
            list_item: self.list_item.into_static(),
            extra_data: self.extra_data.into_static(),
        }
    }
}

#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    bon::Builder
)]
#[builder(start_fn = new)]
#[serde(rename_all = "camelCase")]
pub struct GetListsWithMembership<'a> {
    #[serde(borrow)]
    pub actor: jacquard_common::types::ident::AtIdentifier<'a>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    #[builder(into)]
    pub cursor: std::option::Option<jacquard_common::CowStr<'a>>,
    ///(default: 50, min: 1, max: 100)
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub limit: std::option::Option<i64>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub purposes: std::option::Option<Vec<jacquard_common::CowStr<'a>>>,
}

impl jacquard_common::IntoStatic for GetListsWithMembership<'_> {
    type Output = GetListsWithMembership<'static>;
    fn into_static(self) -> Self::Output {
        GetListsWithMembership {
            actor: self.actor.into_static(),
            cursor: self.cursor.into_static(),
            limit: self.limit.into_static(),
            purposes: self.purposes.into_static(),
        }
    }
}

#[jacquard_derive::lexicon]
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct GetListsWithMembershipOutput<'a> {
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub cursor: std::option::Option<jacquard_common::CowStr<'a>>,
    #[serde(borrow)]
    pub lists_with_membership: Vec<jacquard_common::types::value::Data<'a>>,
}

impl jacquard_common::IntoStatic for GetListsWithMembershipOutput<'_> {
    type Output = GetListsWithMembershipOutput<'static>;
    fn into_static(self) -> Self::Output {
        GetListsWithMembershipOutput {
            cursor: self.cursor.into_static(),
            lists_with_membership: self.lists_with_membership.into_static(),
            extra_data: self.extra_data.into_static(),
        }
    }
}

///Response type for
///app.bsky.graph.getListsWithMembership
pub struct GetListsWithMembershipResponse;
impl jacquard_common::xrpc::XrpcResp for GetListsWithMembershipResponse {
    const NSID: &'static str = "app.bsky.graph.getListsWithMembership";
    const ENCODING: &'static str = "application/json";
    type Output<'de> = GetListsWithMembershipOutput<'de>;
    type Err<'de> = jacquard_common::xrpc::GenericError<'de>;
}

impl<'de> jacquard_common::xrpc::XrpcRequest<'de> for GetListsWithMembership<'de> {
    const NSID: &'static str = "app.bsky.graph.getListsWithMembership";
    const METHOD: jacquard_common::xrpc::XrpcMethod = jacquard_common::xrpc::XrpcMethod::Query;
    type Response = GetListsWithMembershipResponse;
}