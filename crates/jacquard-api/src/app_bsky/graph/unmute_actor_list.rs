// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: app.bsky.graph.unmuteActorList
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

#[jacquard_derive::lexicon]
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq, bon::Builder)]
#[serde(rename_all = "camelCase")]
#[builder(start_fn = new)]
pub struct UnmuteActorList<'a> {
    #[serde(borrow)]
    pub list: jacquard_common::types::string::AtUri<'a>,
    #[serde(flatten)]
    #[serde(borrow)]
    #[builder(default)]
    pub extra_data: ::std::collections::BTreeMap<
        ::jacquard_common::smol_str::SmolStr,
        ::jacquard_common::types::value::Data<'a>,
    >,
}

impl jacquard_common::IntoStatic for UnmuteActorList<'_> {
    type Output = UnmuteActorList<'static>;
    fn into_static(self) -> Self::Output {
        UnmuteActorList {
            list: self.list.into_static(),
            extra_data: self.extra_data.into_static(),
        }
    }
}

///Response type for
///app.bsky.graph.unmuteActorList
pub struct UnmuteActorListResponse;
impl<'de> jacquard_common::types::xrpc::XrpcResp<'de> for UnmuteActorListResponse {
    const ENCODING: &'static str = "application/json";
    type Output = ();
    type Err = jacquard_common::types::xrpc::GenericError<'de>;
}

impl<'de> jacquard_common::types::xrpc::XrpcRequest<'de> for UnmuteActorList<'de> {
    const NSID: &'static str = "app.bsky.graph.unmuteActorList";
    const METHOD: jacquard_common::types::xrpc::XrpcMethod =
        jacquard_common::types::xrpc::XrpcMethod::Procedure("application/json");
    type Response<'de1> = UnmuteActorListResponse;
}
