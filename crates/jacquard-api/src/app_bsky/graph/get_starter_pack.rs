// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: app.bsky.graph.getStarterPack
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    bon::Builder,
    jacquard_derive::IntoStatic
)]
#[builder(start_fn = new)]
#[serde(rename_all = "camelCase")]
pub struct GetStarterPack<'a> {
    #[serde(borrow)]
    pub starter_pack: jacquard_common::types::string::AtUri<'a>,
}

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
pub struct GetStarterPackOutput<'a> {
    #[serde(borrow)]
    pub starter_pack: crate::app_bsky::graph::StarterPackView<'a>,
}

///Response type for
///app.bsky.graph.getStarterPack
pub struct GetStarterPackResponse;
impl jacquard_common::xrpc::XrpcResp for GetStarterPackResponse {
    const NSID: &'static str = "app.bsky.graph.getStarterPack";
    const ENCODING: &'static str = "application/json";
    type Output<'de> = GetStarterPackOutput<'de>;
    type Err<'de> = jacquard_common::xrpc::GenericError<'de>;
}

impl<'a> jacquard_common::xrpc::XrpcRequest for GetStarterPack<'a> {
    const NSID: &'static str = "app.bsky.graph.getStarterPack";
    const METHOD: jacquard_common::xrpc::XrpcMethod = jacquard_common::xrpc::XrpcMethod::Query;
    type Response = GetStarterPackResponse;
}

///Endpoint type for
///app.bsky.graph.getStarterPack
pub struct GetStarterPackRequest;
impl jacquard_common::xrpc::XrpcEndpoint for GetStarterPackRequest {
    const PATH: &'static str = "/xrpc/app.bsky.graph.getStarterPack";
    const METHOD: jacquard_common::xrpc::XrpcMethod = jacquard_common::xrpc::XrpcMethod::Query;
    type Request<'de> = GetStarterPack<'de>;
    type Response = GetStarterPackResponse;
}