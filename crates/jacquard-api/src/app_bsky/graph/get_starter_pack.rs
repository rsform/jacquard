// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: app.bsky.graph.getStarterPack
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    bon::Builder
)]
#[builder(start_fn = new)]
#[serde(rename_all = "camelCase")]
pub struct GetStarterPack<'a> {
    #[serde(borrow)]
    pub starter_pack: jacquard_common::types::string::AtUri<'a>,
}

impl jacquard_common::IntoStatic for GetStarterPack<'_> {
    type Output = GetStarterPack<'static>;
    fn into_static(self) -> Self::Output {
        GetStarterPack {
            starter_pack: self.starter_pack.into_static(),
        }
    }
}

#[jacquard_derive::lexicon]
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct GetStarterPackOutput<'a> {
    #[serde(borrow)]
    pub starter_pack: crate::app_bsky::graph::StarterPackView<'a>,
}

impl jacquard_common::IntoStatic for GetStarterPackOutput<'_> {
    type Output = GetStarterPackOutput<'static>;
    fn into_static(self) -> Self::Output {
        GetStarterPackOutput {
            starter_pack: self.starter_pack.into_static(),
            extra_data: self.extra_data.into_static(),
        }
    }
}

impl<'de> jacquard_common::types::xrpc::XrpcRequest<'de> for GetStarterPack<'de> {
    const NSID: &'static str = "app.bsky.graph.getStarterPack";
    const METHOD: jacquard_common::types::xrpc::XrpcMethod = jacquard_common::types::xrpc::XrpcMethod::Query;
    const OUTPUT_ENCODING: &'static str = "application/json";
    type Output = GetStarterPackOutput<'de>;
    type Err = jacquard_common::types::xrpc::GenericError<'de>;
}