// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: inc.toronto.discover.beta.profile
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

///A Toronto profile entry
#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
pub struct Profile<'a> {
    ///Short bio - one-liner about who you are, what you make, or what you're about
    #[serde(borrow)]
    pub bio: jacquard_common::CowStr<'a>,
    ///When this profile was created
    pub created_at: jacquard_common::types::string::Datetime,
    ///Short blurb about a project you're currently working on or exploring
    #[serde(borrow)]
    pub current_project: jacquard_common::CowStr<'a>,
    ///GitHub profile URL
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub github_url: std::option::Option<jacquard_common::types::string::Uri<'a>>,
    ///Instagram profile URL
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub instagram_url: std::option::Option<jacquard_common::types::string::Uri<'a>>,
    ///Keywords describing interests, focus areas, or creative mediums
    #[serde(borrow)]
    pub interests: Vec<jacquard_common::CowStr<'a>>,
    ///LinkedIn profile URL
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub linkedin_url: std::option::Option<jacquard_common::types::string::Uri<'a>>,
    ///Name or online alias - real name, artist name, or handle
    #[serde(borrow)]
    pub name: jacquard_common::CowStr<'a>,
    ///Toronto neighbourhood where you're based or do most of your work
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub neighbourhood: std::option::Option<jacquard_common::CowStr<'a>>,
    ///Twitter profile URL
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub twitter_url: std::option::Option<jacquard_common::types::string::Uri<'a>>,
    ///When this profile was last updated
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub updated_at: std::option::Option<jacquard_common::types::string::Datetime>,
    ///Personal website URL
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub website_url: std::option::Option<jacquard_common::types::string::Uri<'a>>,
}

impl jacquard_common::types::collection::Collection for Profile<'_> {
    const NSID: &'static str = "inc.toronto.discover.beta.profile";
}