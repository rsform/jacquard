// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: place.stream.server.listWebhooks
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    bon::Builder,
    jacquard_derive::IntoStatic
)]
#[builder(start_fn = new)]
#[serde(rename_all = "camelCase")]
pub struct ListWebhooks<'a> {
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub active: std::option::Option<bool>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    #[builder(into)]
    pub cursor: std::option::Option<jacquard_common::CowStr<'a>>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    #[builder(into)]
    pub event: std::option::Option<jacquard_common::CowStr<'a>>,
    ///(default: 50, min: 1, max: 100)
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub limit: std::option::Option<i64>,
}

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
pub struct ListWebhooksOutput<'a> {
    ///A cursor for pagination, if there are more results.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub cursor: std::option::Option<jacquard_common::CowStr<'a>>,
    #[serde(borrow)]
    pub webhooks: Vec<crate::place_stream::server::Webhook<'a>>,
}

#[jacquard_derive::open_union]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    thiserror::Error,
    miette::Diagnostic
)]
#[serde(tag = "error", content = "message")]
#[serde(bound(deserialize = "'de: 'a"))]
pub enum ListWebhooksError<'a> {
    ///The provided cursor is invalid or expired.
    #[serde(rename = "InvalidCursor")]
    InvalidCursor(std::option::Option<String>),
}

impl std::fmt::Display for ListWebhooksError<'_> {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Self::InvalidCursor(msg) => {
                write!(f, "InvalidCursor")?;
                if let Some(msg) = msg {
                    write!(f, ": {}", msg)?;
                }
                Ok(())
            }
            Self::Unknown(err) => write!(f, "Unknown error: {:?}", err),
        }
    }
}

impl jacquard_common::IntoStatic for ListWebhooksError<'_> {
    type Output = ListWebhooksError<'static>;
    fn into_static(self) -> Self::Output {
        match self {
            ListWebhooksError::InvalidCursor(v) => {
                ListWebhooksError::InvalidCursor(v.into_static())
            }
            ListWebhooksError::Unknown(v) => ListWebhooksError::Unknown(v.into_static()),
        }
    }
}

///Response type for
///place.stream.server.listWebhooks
pub struct ListWebhooksResponse;
impl jacquard_common::xrpc::XrpcResp for ListWebhooksResponse {
    const NSID: &'static str = "place.stream.server.listWebhooks";
    const ENCODING: &'static str = "application/json";
    type Output<'de> = ListWebhooksOutput<'de>;
    type Err<'de> = ListWebhooksError<'de>;
}

impl<'de> jacquard_common::xrpc::XrpcRequest<'de> for ListWebhooks<'de> {
    const NSID: &'static str = "place.stream.server.listWebhooks";
    const METHOD: jacquard_common::xrpc::XrpcMethod = jacquard_common::xrpc::XrpcMethod::Query;
    type Response = ListWebhooksResponse;
}