// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: place.stream.chat.defs
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

pub mod gate;
pub mod message;
pub mod profile;

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic,
    bon::Builder
)]
#[serde(rename_all = "camelCase")]
pub struct MessageView<'a> {
    #[serde(borrow)]
    pub author: crate::app_bsky::actor::ProfileViewBasic<'a>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub chat_profile: Option<crate::place_stream::chat::profile::Profile<'a>>,
    #[serde(borrow)]
    pub cid: jacquard_common::types::string::Cid<'a>,
    /// If true, this message has been deleted or labeled and should be cleared from the cache
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    pub deleted: Option<bool>,
    pub indexed_at: jacquard_common::types::string::Datetime,
    #[serde(borrow)]
    pub record: jacquard_common::types::value::Data<'a>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub reply_to: Option<MessageViewReplyTo<'a>>,
    #[serde(borrow)]
    pub uri: jacquard_common::types::string::AtUri<'a>,
}

#[jacquard_derive::open_union]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(tag = "$type")]
#[serde(bound(deserialize = "'de: 'a"))]
pub enum MessageViewReplyTo<'a> {
    #[serde(rename = "place.stream.chat.defs#messageView")]
    MessageView(Box<crate::place_stream::chat::MessageView<'a>>),
}