// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: place.stream.live.getSegments
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    bon::Builder,
    jacquard_derive::IntoStatic
)]
#[builder(start_fn = new)]
#[serde(rename_all = "camelCase")]
pub struct GetSegments<'a> {
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub before: std::option::Option<jacquard_common::types::string::Datetime>,
    ///(default: 50, min: 1, max: 100)
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub limit: std::option::Option<i64>,
    #[serde(borrow)]
    pub user_did: jacquard_common::types::string::Did<'a>,
}

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
pub struct GetSegmentsOutput<'a> {
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub segments: std::option::Option<
        Vec<crate::place_stream::segment::SegmentView<'a>>,
    >,
}

///Response type for
///place.stream.live.getSegments
pub struct GetSegmentsResponse;
impl jacquard_common::xrpc::XrpcResp for GetSegmentsResponse {
    const NSID: &'static str = "place.stream.live.getSegments";
    const ENCODING: &'static str = "application/json";
    type Output<'de> = GetSegmentsOutput<'de>;
    type Err<'de> = jacquard_common::xrpc::GenericError<'de>;
}

impl<'de> jacquard_common::xrpc::XrpcRequest<'de> for GetSegments<'de> {
    const NSID: &'static str = "place.stream.live.getSegments";
    const METHOD: jacquard_common::xrpc::XrpcMethod = jacquard_common::xrpc::XrpcMethod::Query;
    type Response = GetSegmentsResponse;
}

///Endpoint type for
///place.stream.live.getSegments
pub struct GetSegmentsRequest;
impl jacquard_common::xrpc::XrpcEndpoint for GetSegmentsRequest {
    const PATH: &'static str = "/xrpc/place.stream.live.getSegments";
    const METHOD: jacquard_common::xrpc::XrpcMethod = jacquard_common::xrpc::XrpcMethod::Query;
    type Request<'de> = GetSegments<'de>;
    type Response = GetSegmentsResponse;
}