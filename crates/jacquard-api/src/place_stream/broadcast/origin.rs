// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: place.stream.broadcast.origin
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

/// Record indicating a livestream is published and available for replication at a given address. By convention, the record key is streamer::server
#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic,
    bon::Builder
)]
#[serde(rename_all = "camelCase")]
pub struct Origin<'a> {
    /// Iroh ticket that can be used to access the livestream from the server
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub iroh_ticket: Option<jacquard_common::CowStr<'a>>,
    /// did:web of the server that's currently rebroadcasting the livestream
    #[serde(borrow)]
    pub server: jacquard_common::types::string::Did<'a>,
    /// DID of the streamer whose livestream is being published
    #[serde(borrow)]
    pub streamer: jacquard_common::types::string::Did<'a>,
    /// Periodically updated timestamp when this origin last saw a livestream
    pub updated_at: jacquard_common::types::string::Datetime,
}

impl<'a> Origin<'a> {
    pub fn uri(
        uri: impl Into<jacquard_common::CowStr<'a>>,
    ) -> Result<
        jacquard_common::types::uri::RecordUri<'a, OriginRecord>,
        jacquard_common::types::uri::UriError,
    > {
        jacquard_common::types::uri::RecordUri::try_from_uri(
            jacquard_common::types::string::AtUri::new_cow(uri.into())?,
        )
    }
}

/// Typed wrapper for GetRecord response with this collection's record type.
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
pub struct OriginGetRecordOutput<'a> {
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub cid: std::option::Option<jacquard_common::types::string::Cid<'a>>,
    #[serde(borrow)]
    pub uri: jacquard_common::types::string::AtUri<'a>,
    #[serde(borrow)]
    pub value: Origin<'a>,
}

impl From<OriginGetRecordOutput<'_>> for Origin<'_> {
    fn from(output: OriginGetRecordOutput<'_>) -> Self {
        use jacquard_common::IntoStatic;
        output.value.into_static()
    }
}

impl jacquard_common::types::collection::Collection for Origin<'_> {
    const NSID: &'static str = "place.stream.broadcast.origin";
    type Record = OriginRecord;
}

/// Marker type for deserializing records from this collection.
#[derive(Debug, serde::Serialize, serde::Deserialize)]
pub struct OriginRecord;
impl jacquard_common::xrpc::XrpcResp for OriginRecord {
    const NSID: &'static str = "place.stream.broadcast.origin";
    const ENCODING: &'static str = "application/json";
    type Output<'de> = OriginGetRecordOutput<'de>;
    type Err<'de> = jacquard_common::types::collection::RecordError<'de>;
}

impl jacquard_common::types::collection::Collection for OriginRecord {
    const NSID: &'static str = "place.stream.broadcast.origin";
    type Record = OriginRecord;
}