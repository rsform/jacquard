// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: place.stream.livestream
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic,
    bon::Builder
)]
#[serde(rename_all = "camelCase")]
pub struct LivestreamView<'a> {
    #[serde(borrow)]
    pub author: crate::app_bsky::actor::ProfileViewBasic<'a>,
    #[serde(borrow)]
    pub cid: jacquard_common::types::string::Cid<'a>,
    pub indexed_at: jacquard_common::types::string::Datetime,
    #[serde(borrow)]
    pub record: jacquard_common::types::value::Data<'a>,
    #[serde(borrow)]
    pub uri: jacquard_common::types::string::AtUri<'a>,
    /// The number of viewers watching this livestream. Use when you can't reasonably use #viewerCount directly.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub viewer_count: Option<crate::place_stream::livestream::ViewerCount<'a>>,
}

/// Record announcing a livestream is happening
#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic,
    bon::Builder
)]
#[serde(rename_all = "camelCase")]
pub struct Livestream<'a> {
    /// The source of the livestream, if available, in a User Agent format: `<product> / <product-version> <comment>` e.g. Streamplace/0.7.5 iOS
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub agent: Option<jacquard_common::CowStr<'a>>,
    /// The primary URL where this livestream can be viewed, if available.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub canonical_url: Option<jacquard_common::types::string::Uri<'a>>,
    /// Client-declared timestamp when this livestream started.
    pub created_at: jacquard_common::types::string::Datetime,
    /// The post that announced this livestream.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub post: Option<crate::com_atproto::repo::strong_ref::StrongRef<'a>>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub thumb: Option<jacquard_common::types::blob::Blob<'a>>,
    /// The title of the livestream, as it will be announced to followers.
    #[serde(borrow)]
    #[builder(into)]
    pub title: jacquard_common::CowStr<'a>,
    /// The URL where this stream can be found. This is primarily a hint for other Streamplace nodes to locate and replicate the stream.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[builder(into)]
    #[serde(borrow)]
    pub url: Option<jacquard_common::types::string::Uri<'a>>,
}

/// Typed wrapper for GetRecord response with this collection's record type.
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
pub struct LivestreamGetRecordOutput<'a> {
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub cid: std::option::Option<jacquard_common::types::string::Cid<'a>>,
    #[serde(borrow)]
    pub uri: jacquard_common::types::string::AtUri<'a>,
    #[serde(borrow)]
    pub value: Livestream<'a>,
}

/// Marker type for deserializing records from this collection.
pub struct LivestreamRecord;
impl jacquard_common::xrpc::XrpcResp for LivestreamRecord {
    const NSID: &'static str = "place.stream.livestream";
    const ENCODING: &'static str = "application/json";
    type Output<'de> = LivestreamGetRecordOutput<'de>;
    type Err<'de> = jacquard_common::types::collection::RecordError<'de>;
}

impl jacquard_common::types::collection::Collection for Livestream<'_> {
    const NSID: &'static str = "place.stream.livestream";
    type Record = LivestreamRecord;
}

impl From<LivestreamGetRecordOutput<'_>> for Livestream<'_> {
    fn from(output: LivestreamGetRecordOutput<'_>) -> Self {
        use jacquard_common::IntoStatic;
        output.value.into_static()
    }
}

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic,
    bon::Builder
)]
#[serde(rename_all = "camelCase")]
pub struct StreamplaceAnything<'a> {
    #[serde(borrow)]
    pub livestream: StreamplaceAnythingLivestream<'a>,
}

#[jacquard_derive::open_union]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(tag = "$type")]
#[serde(bound(deserialize = "'de: 'a"))]
pub enum StreamplaceAnythingLivestream<'a> {
    #[serde(rename = "place.stream.livestream#livestreamView")]
    LivestreamView(Box<crate::place_stream::livestream::LivestreamView<'a>>),
    #[serde(rename = "place.stream.livestream#viewerCount")]
    ViewerCount(Box<crate::place_stream::livestream::ViewerCount<'a>>),
    #[serde(rename = "place.stream.defs#blockView")]
    BlockView(Box<crate::place_stream::BlockView<'a>>),
    #[serde(rename = "place.stream.defs#renditions")]
    Renditions(Box<crate::place_stream::Renditions<'a>>),
    #[serde(rename = "place.stream.defs#rendition")]
    Rendition(Box<crate::place_stream::Rendition<'a>>),
    #[serde(rename = "place.stream.chat.defs#messageView")]
    MessageView(Box<crate::place_stream::chat::MessageView<'a>>),
}

#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic,
    bon::Builder
)]
#[serde(rename_all = "camelCase")]
pub struct ViewerCount<'a> {
    pub count: i64,
}