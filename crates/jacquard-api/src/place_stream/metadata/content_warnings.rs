// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: place.stream.metadata.contentWarnings
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

/// The content contains information that can be used to identify a particular individual, such as a name, phone number, email address, physical address, or IP address.
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    Hash,
    jacquard_derive::IntoStatic
)]
pub struct Pii;
impl std::fmt::Display for Pii {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "PII")
    }
}

/// The content could be perceived as offensive due to the discussion or display of death.
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    Hash,
    jacquard_derive::IntoStatic
)]
pub struct Death;
impl std::fmt::Display for Death {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "death")
    }
}

/// The content contains a portrayal of the use or abuse of mind altering substances.
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    Hash,
    jacquard_derive::IntoStatic
)]
pub struct DrugUse;
impl std::fmt::Display for DrugUse {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "drugUse")
    }
}

/// The content contains violent actions of a fantasy nature, involving human or non-human characters in situations easily distinguishable from real life.
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    Hash,
    jacquard_derive::IntoStatic
)]
pub struct FantasyViolence;
impl std::fmt::Display for FantasyViolence {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "fantasyViolence")
    }
}

/// The content contains flashing lights that could be harmful to viewers with seizure disorders such as photosensitive epilepsy.
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    Hash,
    jacquard_derive::IntoStatic
)]
pub struct FlashingLights;
impl std::fmt::Display for FlashingLights {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "flashingLights")
    }
}

/// The content could be perceived as offensive due to the language used.
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    Hash,
    jacquard_derive::IntoStatic
)]
pub struct Language;
impl std::fmt::Display for Language {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "language")
    }
}

/// Content warnings for a stream.
#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic,
    Default
)]
#[serde(rename_all = "camelCase")]
pub struct ContentWarnings<'a> {
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub warnings: std::option::Option<Vec<jacquard_common::CowStr<'a>>>,
}

/// The content could be perceived as offensive due to nudity.
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    Hash,
    jacquard_derive::IntoStatic
)]
pub struct Nudity;
impl std::fmt::Display for Nudity {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "nudity")
    }
}

/// The content could be perceived as offensive due to the discussion or display of sexuality.
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    Hash,
    jacquard_derive::IntoStatic
)]
pub struct Sexuality;
impl std::fmt::Display for Sexuality {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "sexuality")
    }
}

/// The content could be perceived as distressing due to the discussion or display of suffering or triggering topics, including suicide, eating disorders or self harm.
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    Hash,
    jacquard_derive::IntoStatic
)]
pub struct Suffering;
impl std::fmt::Display for Suffering {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "suffering")
    }
}

/// The content could be perceived as offensive due to the discussion or display of violence.
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    Hash,
    jacquard_derive::IntoStatic
)]
pub struct Violence;
impl std::fmt::Display for Violence {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "violence")
    }
}