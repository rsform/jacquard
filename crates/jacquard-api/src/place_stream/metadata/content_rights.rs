// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: place.stream.metadata.contentRights
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

/// All rights reserved to the creator â€” others cannot use, modify, or share without explicit authorization.
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    Hash,
    jacquard_derive::IntoStatic
)]
pub struct AllRightsReserved;
impl std::fmt::Display for AllRightsReserved {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "all-rights-reserved")
    }
}

/// Attribution + non-commercial + no derivatives. Others may download and share your work with credit, but cannot change it or use it commercially.
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    Hash,
    jacquard_derive::IntoStatic
)]
pub struct CcByNcNd40;
impl std::fmt::Display for CcByNcNd40 {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "cc-by-nc-nd_4__0")
    }
}

/// Attribution + non-commercial + share-alike. Others may adapt and build upon your work for non-commercial purposes only, must credit you, and must license their new creations under identical terms.
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    Hash,
    jacquard_derive::IntoStatic
)]
pub struct CcByNcSa40;
impl std::fmt::Display for CcByNcSa40 {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "cc-by-nc-sa_4__0")
    }
}

/// Attribution + non-commercial. Others may adapt and build upon your work for non-commercial purposes only, and must credit you.
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    Hash,
    jacquard_derive::IntoStatic
)]
pub struct CcByNc40;
impl std::fmt::Display for CcByNc40 {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "cc-by-nc_4__0")
    }
}

/// Attribution + no derivatives. Others may reuse your work, even commercially, but it must remain unchanged and you must be credited.
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    Hash,
    jacquard_derive::IntoStatic
)]
pub struct CcByNd40;
impl std::fmt::Display for CcByNd40 {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "cc-by-nd_4__0")
    }
}

/// Attribution + share-alike. Others may adapt and build upon your work, even commercially, if they credit you and license their new creations under identical terms.
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    Hash,
    jacquard_derive::IntoStatic
)]
pub struct CcBySa40;
impl std::fmt::Display for CcBySa40 {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "cc-by-sa_4__0")
    }
}

/// Attribution required. Others may copy, distribute, remix, and build upon your work, even commercially, if they credit you.
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    Hash,
    jacquard_derive::IntoStatic
)]
pub struct CcBy40;
impl std::fmt::Display for CcBy40 {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "cc-by_4__0")
    }
}

/// Public domain dedication. You waive all copyright and related rights where possible. Others may copy, modify, distribute, or perform your work for any purpose without attribution.
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    Hash,
    jacquard_derive::IntoStatic
)]
pub struct Cc010;
impl std::fmt::Display for Cc010 {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "cc0_1__0")
    }
}

/// Content rights and attribution information.
#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic,
    Default
)]
#[serde(rename_all = "camelCase")]
pub struct ContentRights<'a> {
    /// Copyright notice for the work.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub copyright_notice: std::option::Option<jacquard_common::CowStr<'a>>,
    /// Year of creation or publication.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub copyright_year: std::option::Option<i64>,
    /// Name of the creator of the work.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub creator: std::option::Option<jacquard_common::CowStr<'a>>,
    /// Credit line for the work.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub credit_line: std::option::Option<jacquard_common::CowStr<'a>>,
    /// License URL or identifier.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub license: std::option::Option<jacquard_common::CowStr<'a>>,
}