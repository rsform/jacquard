// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: dev.fudgeu.experimental.atforumv1.feed.post
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

///An initial post that starts a discussion
#[jacquard_derive::lexicon]
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
pub struct Post<'a> {
    #[serde(borrow)]
    pub category: jacquard_common::types::string::AtUri<'a>,
    #[serde(borrow)]
    pub content: jacquard_common::CowStr<'a>,
    pub created_at: jacquard_common::types::string::Datetime,
    #[serde(borrow)]
    pub forum: jacquard_common::types::ident::AtIdentifier<'a>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub solution: std::option::Option<jacquard_common::types::string::AtUri<'a>>,
    #[serde(borrow)]
    pub tags: Vec<jacquard_common::CowStr<'a>>,
    #[serde(borrow)]
    pub title: jacquard_common::CowStr<'a>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub updated_at: std::option::Option<jacquard_common::types::string::Datetime>,
}

/// Typed wrapper for GetRecord response with this collection's record type.
#[derive(
    serde::Serialize,
    serde::Deserialize,
    Debug,
    Clone,
    PartialEq,
    Eq,
    jacquard_derive::IntoStatic
)]
#[serde(rename_all = "camelCase")]
pub struct PostGetRecordOutput<'a> {
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub cid: std::option::Option<jacquard_common::types::string::Cid<'a>>,
    #[serde(borrow)]
    pub uri: jacquard_common::types::string::AtUri<'a>,
    #[serde(borrow)]
    pub value: Post<'a>,
}

/// Marker type for deserializing records from this collection.
pub struct PostRecord;
impl jacquard_common::xrpc::XrpcResp for PostRecord {
    const NSID: &'static str = "dev.fudgeu.experimental.atforumv1.feed.post";
    const ENCODING: &'static str = "application/json";
    type Output<'de> = PostGetRecordOutput<'de>;
    type Err<'de> = jacquard_common::types::collection::RecordError<'de>;
}

impl jacquard_common::types::collection::Collection for Post<'_> {
    const NSID: &'static str = "dev.fudgeu.experimental.atforumv1.feed.post";
    type Record = PostRecord;
}

impl From<PostGetRecordOutput<'_>> for Post<'_> {
    fn from(output: PostGetRecordOutput<'_>) -> Self {
        use jacquard_common::IntoStatic;
        output.value.into_static()
    }
}