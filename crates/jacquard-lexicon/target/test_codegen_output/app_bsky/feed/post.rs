// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: app.bsky.feed.post
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

///Deprecated: use facets instead.
#[jacquard_derive::lexicon]
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct Entity<'a> {
    #[serde(borrow)]
    pub index: test_generated::app_bsky::feed::post::TextSlice<'a>,
    ///Expected values are 'mention' and 'link'.
    #[serde(borrow)]
    pub r#type: jacquard_common::CowStr<'a>,
    #[serde(borrow)]
    pub value: jacquard_common::CowStr<'a>,
}

impl jacquard_common::IntoStatic for Entity<'_> {
    type Output = Entity<'static>;
    fn into_static(self) -> Self::Output {
        Entity {
            index: self.index.into_static(),
            r#type: self.r#type.into_static(),
            value: self.value.into_static(),
            extra_data: self.extra_data.into_static(),
        }
    }
}

///Record containing a Bluesky post.
#[jacquard_derive::lexicon]
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct Post<'a> {
    ///Client-declared timestamp when this post was originally created.
    pub created_at: jacquard_common::types::string::Datetime,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub embed: std::option::Option<PostRecordEmbed<'a>>,
    ///DEPRECATED: replaced by app.bsky.richtext.facet.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub entities: std::option::Option<
        Vec<test_generated::app_bsky::feed::post::Entity<'a>>,
    >,
    ///Annotations of text (mentions, URLs, hashtags, etc)
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub facets: std::option::Option<
        Vec<test_generated::app_bsky::richtext::facet::Facet<'a>>,
    >,
    ///Self-label values for this post. Effectively content warnings.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub labels: std::option::Option<PostRecordLabels<'a>>,
    ///Indicates human language of post primary text content.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub langs: std::option::Option<Vec<jacquard_common::types::string::Language>>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub reply: std::option::Option<test_generated::app_bsky::feed::post::ReplyRef<'a>>,
    ///Additional hashtags, in addition to any included in post text and facets.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub tags: std::option::Option<Vec<jacquard_common::CowStr<'a>>>,
    ///The primary post content. May be an empty string, if there are embeds.
    #[serde(borrow)]
    pub text: jacquard_common::CowStr<'a>,
}

#[jacquard_derive::open_union]
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(tag = "$type")]
#[serde(bound(deserialize = "'de: 'a"))]
pub enum PostRecordEmbed<'a> {
    #[serde(rename = "app.bsky.embed.images")]
    Images(Box<test_generated::app_bsky::embed::images::Images<'a>>),
    #[serde(rename = "app.bsky.embed.video")]
    Video(Box<test_generated::app_bsky::embed::video::Video<'a>>),
    #[serde(rename = "app.bsky.embed.external")]
    External(Box<test_generated::app_bsky::embed::external::ExternalRecord<'a>>),
    #[serde(rename = "app.bsky.embed.record")]
    Record(Box<test_generated::app_bsky::embed::record::Record<'a>>),
    #[serde(rename = "app.bsky.embed.recordWithMedia")]
    RecordWithMedia(
        Box<test_generated::app_bsky::embed::record_with_media::RecordWithMedia<'a>>,
    ),
}

impl jacquard_common::IntoStatic for PostRecordEmbed<'_> {
    type Output = PostRecordEmbed<'static>;
    fn into_static(self) -> Self::Output {
        match self {
            PostRecordEmbed::Images(v) => PostRecordEmbed::Images(v.into_static()),
            PostRecordEmbed::Video(v) => PostRecordEmbed::Video(v.into_static()),
            PostRecordEmbed::External(v) => PostRecordEmbed::External(v.into_static()),
            PostRecordEmbed::Record(v) => PostRecordEmbed::Record(v.into_static()),
            PostRecordEmbed::RecordWithMedia(v) => {
                PostRecordEmbed::RecordWithMedia(v.into_static())
            }
            PostRecordEmbed::Unknown(v) => PostRecordEmbed::Unknown(v.into_static()),
        }
    }
}

#[jacquard_derive::open_union]
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(tag = "$type")]
#[serde(bound(deserialize = "'de: 'a"))]
pub enum PostRecordLabels<'a> {
    #[serde(rename = "com.atproto.label.defs#selfLabels")]
    DefsSelfLabels(Box<test_generated::com_atproto::label::SelfLabels<'a>>),
}

impl jacquard_common::IntoStatic for PostRecordLabels<'_> {
    type Output = PostRecordLabels<'static>;
    fn into_static(self) -> Self::Output {
        match self {
            PostRecordLabels::DefsSelfLabels(v) => {
                PostRecordLabels::DefsSelfLabels(v.into_static())
            }
            PostRecordLabels::Unknown(v) => PostRecordLabels::Unknown(v.into_static()),
        }
    }
}

impl jacquard_common::types::collection::Collection for Post<'_> {
    const NSID: &'static str = "app.bsky.feed.post";
}

impl jacquard_common::IntoStatic for Post<'_> {
    type Output = Post<'static>;
    fn into_static(self) -> Self::Output {
        Post {
            created_at: self.created_at.into_static(),
            embed: self.embed.into_static(),
            entities: self.entities.into_static(),
            facets: self.facets.into_static(),
            labels: self.labels.into_static(),
            langs: self.langs.into_static(),
            reply: self.reply.into_static(),
            tags: self.tags.into_static(),
            text: self.text.into_static(),
            extra_data: self.extra_data.into_static(),
        }
    }
}

#[jacquard_derive::lexicon]
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct ReplyRef<'a> {
    #[serde(borrow)]
    pub parent: test_generated::com_atproto::repo::strong_ref::StrongRef<'a>,
    #[serde(borrow)]
    pub root: test_generated::com_atproto::repo::strong_ref::StrongRef<'a>,
}

impl jacquard_common::IntoStatic for ReplyRef<'_> {
    type Output = ReplyRef<'static>;
    fn into_static(self) -> Self::Output {
        ReplyRef {
            parent: self.parent.into_static(),
            root: self.root.into_static(),
            extra_data: self.extra_data.into_static(),
        }
    }
}

///Deprecated. Use app.bsky.richtext instead -- A text segment. Start is inclusive, end is exclusive. Indices are for utf16-encoded strings.
#[jacquard_derive::lexicon]
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct TextSlice<'a> {
    pub end: i64,
    pub start: i64,
}

impl jacquard_common::IntoStatic for TextSlice<'_> {
    type Output = TextSlice<'static>;
    fn into_static(self) -> Self::Output {
        TextSlice {
            end: self.end.into_static(),
            start: self.start.into_static(),
            extra_data: self.extra_data.into_static(),
        }
    }
}