// @generated by jacquard-lexicon. DO NOT EDIT.
//
// Lexicon: app.bsky.embed.record
//
// This file was automatically generated from Lexicon schemas.
// Any manual changes will be overwritten on the next regeneration.

#[jacquard_derive::lexicon]
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct Record<'a> {
    #[serde(borrow)]
    pub record: test_generated::com_atproto::repo::strong_ref::StrongRef<'a>,
}

impl jacquard_common::IntoStatic for Record<'_> {
    type Output = Record<'static>;
    fn into_static(self) -> Self::Output {
        Record {
            record: self.record.into_static(),
            extra_data: self.extra_data.into_static(),
        }
    }
}

#[jacquard_derive::lexicon]
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct View<'a> {
    #[serde(borrow)]
    pub record: ViewRecordRecord<'a>,
}

#[jacquard_derive::open_union]
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(tag = "$type")]
#[serde(bound(deserialize = "'de: 'a"))]
pub enum ViewRecordRecord<'a> {}
impl jacquard_common::IntoStatic for ViewRecordRecord<'_> {
    type Output = ViewRecordRecord<'static>;
    fn into_static(self) -> Self::Output {
        match self {
            ViewRecordRecord::Unknown(v) => ViewRecordRecord::Unknown(v.into_static()),
        }
    }
}

impl jacquard_common::IntoStatic for View<'_> {
    type Output = View<'static>;
    fn into_static(self) -> Self::Output {
        View {
            record: self.record.into_static(),
            extra_data: self.extra_data.into_static(),
        }
    }
}

#[jacquard_derive::lexicon]
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct ViewBlocked<'a> {
    #[serde(borrow)]
    pub author: jacquard_common::types::value::Data<'a>,
    pub blocked: bool,
    #[serde(borrow)]
    pub uri: jacquard_common::types::string::AtUri<'a>,
}

impl jacquard_common::IntoStatic for ViewBlocked<'_> {
    type Output = ViewBlocked<'static>;
    fn into_static(self) -> Self::Output {
        ViewBlocked {
            author: self.author.into_static(),
            blocked: self.blocked.into_static(),
            uri: self.uri.into_static(),
            extra_data: self.extra_data.into_static(),
        }
    }
}

#[jacquard_derive::lexicon]
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct ViewDetached<'a> {
    pub detached: bool,
    #[serde(borrow)]
    pub uri: jacquard_common::types::string::AtUri<'a>,
}

impl jacquard_common::IntoStatic for ViewDetached<'_> {
    type Output = ViewDetached<'static>;
    fn into_static(self) -> Self::Output {
        ViewDetached {
            detached: self.detached.into_static(),
            uri: self.uri.into_static(),
            extra_data: self.extra_data.into_static(),
        }
    }
}

#[jacquard_derive::lexicon]
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct ViewNotFound<'a> {
    pub not_found: bool,
    #[serde(borrow)]
    pub uri: jacquard_common::types::string::AtUri<'a>,
}

impl jacquard_common::IntoStatic for ViewNotFound<'_> {
    type Output = ViewNotFound<'static>;
    fn into_static(self) -> Self::Output {
        ViewNotFound {
            not_found: self.not_found.into_static(),
            uri: self.uri.into_static(),
            extra_data: self.extra_data.into_static(),
        }
    }
}

#[jacquard_derive::lexicon]
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct ViewRecord<'a> {
    #[serde(borrow)]
    pub author: jacquard_common::types::value::Data<'a>,
    #[serde(borrow)]
    pub cid: jacquard_common::types::string::Cid<'a>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub embeds: std::option::Option<Vec<jacquard_common::types::value::Data<'a>>>,
    pub indexed_at: jacquard_common::types::string::Datetime,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde(borrow)]
    pub labels: std::option::Option<Vec<test_generated::com_atproto::label::Label<'a>>>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub like_count: std::option::Option<i64>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub quote_count: std::option::Option<i64>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub reply_count: std::option::Option<i64>,
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub repost_count: std::option::Option<i64>,
    #[serde(borrow)]
    pub uri: jacquard_common::types::string::AtUri<'a>,
    ///The record data itself.
    #[serde(borrow)]
    pub value: jacquard_common::types::value::Data<'a>,
}

impl jacquard_common::IntoStatic for ViewRecord<'_> {
    type Output = ViewRecord<'static>;
    fn into_static(self) -> Self::Output {
        ViewRecord {
            author: self.author.into_static(),
            cid: self.cid.into_static(),
            embeds: self.embeds.into_static(),
            indexed_at: self.indexed_at.into_static(),
            labels: self.labels.into_static(),
            like_count: self.like_count.into_static(),
            quote_count: self.quote_count.into_static(),
            reply_count: self.reply_count.into_static(),
            repost_count: self.repost_count.into_static(),
            uri: self.uri.into_static(),
            value: self.value.into_static(),
            extra_data: self.extra_data.into_static(),
        }
    }
}